
Project_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f54  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005060  08005060  00006060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005104  08005104  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005104  08005104  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005104  08005104  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005104  08005104  00006104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800510c  0800510c  0000610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005110  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000010  08005120  00007010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08005120  000072c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eac2  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df3  00000000  00000000  00015afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000188f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a70  00000000  00000000  00019668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2a1  00000000  00000000  0001a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f0f  00000000  00000000  00034379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a765  00000000  00000000  00048288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d29ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003640  00000000  00000000  000d2a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000d6070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08005048 	.word	0x08005048

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08005048 	.word	0x08005048

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <HAL_UARTEx_RxEventCallback>:
float temperature_Sm9541=0,pressure_Sm9541=0;
uint8_t data[4];


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0b      	ldr	r2, [pc, #44]	@ (8000688 <HAL_UARTEx_RxEventCallback+0x40>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d110      	bne.n	8000680 <HAL_UARTEx_RxEventCallback+0x38>
	{
		_Modbus_Slave.Check_Buffer(USART1);
 800065e:	490a      	ldr	r1, [pc, #40]	@ (8000688 <HAL_UARTEx_RxEventCallback+0x40>)
 8000660:	480a      	ldr	r0, [pc, #40]	@ (800068c <HAL_UARTEx_RxEventCallback+0x44>)
 8000662:	f004 f8c6 	bl	80047f2 <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef>
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) _Modbus_Slave.RxData, 10);
 8000666:	220a      	movs	r2, #10
 8000668:	4909      	ldr	r1, [pc, #36]	@ (8000690 <HAL_UARTEx_RxEventCallback+0x48>)
 800066a:	480a      	ldr	r0, [pc, #40]	@ (8000694 <HAL_UARTEx_RxEventCallback+0x4c>)
 800066c:	f002 ff60 	bl	8003530 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000670:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <HAL_UARTEx_RxEventCallback+0x50>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <HAL_UARTEx_RxEventCallback+0x50>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f022 0204 	bic.w	r2, r2, #4
 800067e:	601a      	str	r2, [r3, #0]

	}


}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40013800 	.word	0x40013800
 800068c:	20000048 	.word	0x20000048
 8000690:	2000004b 	.word	0x2000004b
 8000694:	2000020c 	.word	0x2000020c
 8000698:	20000254 	.word	0x20000254

0800069c <HAL_GPIO_EXTI_Callback>:



uint32_t cur_time_ext=0,pre_time_ext=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
 /* Prevent unused argument(s) compilation warning */
 UNUSED(GPIO_Pin);
 	 cur_time_ext=HAL_GetTick();
 80006a6:	f000 fc6d 	bl	8000f84 <HAL_GetTick>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a0e      	ldr	r2, [pc, #56]	@ (80006e8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80006ae:	6013      	str	r3, [r2, #0]
	 if ((GPIO_Pin==GPIO_PIN_5)||(cur_time_ext-pre_time_ext>10)){
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	2b20      	cmp	r3, #32
 80006b4:	d006      	beq.n	80006c4 <HAL_GPIO_EXTI_Callback+0x28>
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <HAL_GPIO_EXTI_Callback+0x50>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	2b0a      	cmp	r3, #10
 80006c2:	d90c      	bls.n	80006de <HAL_GPIO_EXTI_Callback+0x42>
		 Status_stm32=(Status_stm32==NORMAL)?SLAVE_ID:NORMAL;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <HAL_GPIO_EXTI_Callback+0x54>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	bf14      	ite	ne
 80006cc:	2301      	movne	r3, #1
 80006ce:	2300      	moveq	r3, #0
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <HAL_GPIO_EXTI_Callback+0x54>)
 80006d6:	701a      	strb	r2, [r3, #0]
		 Status_initial_LCD=true;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <HAL_GPIO_EXTI_Callback+0x58>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
	 }
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000178 	.word	0x20000178
 80006ec:	2000017c 	.word	0x2000017c
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000001 	.word	0x20000001

080006f8 <Tacvu_HIENTHI>:



/////         THUC THI TAC VU THEO FLAG //////////
#define ADD_Flash_Slave_ID 0x0801FCF0
void Tacvu_HIENTHI(void){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	id=_Modbus_Slave.Slave_id_to_Eeprom;
 80006fc:	4b13      	ldr	r3, [pc, #76]	@ (800074c <Tacvu_HIENTHI+0x54>)
 80006fe:	881a      	ldrh	r2, [r3, #0]
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <Tacvu_HIENTHI+0x58>)
 8000702:	801a      	strh	r2, [r3, #0]
	if (Status_stm32==NORMAL){
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <Tacvu_HIENTHI+0x5c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d114      	bne.n	8000736 <Tacvu_HIENTHI+0x3e>
		_Ht621b.clearAll();
 800070c:	4812      	ldr	r0, [pc, #72]	@ (8000758 <Tacvu_HIENTHI+0x60>)
 800070e:	f004 fa61 	bl	8004bd4 <_ZN6HT16218clearAllEv>
		_Ht621b.displayOn();
 8000712:	4811      	ldr	r0, [pc, #68]	@ (8000758 <Tacvu_HIENTHI+0x60>)
 8000714:	f004 fa42 	bl	8004b9c <_ZN6HT16219displayOnEv>
		_Ht621b.Write_Float_Linex(temperature_Sm9541,2);
 8000718:	4b10      	ldr	r3, [pc, #64]	@ (800075c <Tacvu_HIENTHI+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2202      	movs	r2, #2
 800071e:	4619      	mov	r1, r3
 8000720:	480d      	ldr	r0, [pc, #52]	@ (8000758 <Tacvu_HIENTHI+0x60>)
 8000722:	f004 fb1f 	bl	8004d64 <_ZN6HT162117Write_Float_LinexEfh>
		_Ht621b.Write_Float_Linex(pressure_Sm9541,1);
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <Tacvu_HIENTHI+0x68>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2201      	movs	r2, #1
 800072c:	4619      	mov	r1, r3
 800072e:	480a      	ldr	r0, [pc, #40]	@ (8000758 <Tacvu_HIENTHI+0x60>)
 8000730:	f004 fb18 	bl	8004d64 <_ZN6HT162117Write_Float_LinexEfh>
		_Ht621b.clearAll();
		_Ht621b.Write_Id(_Modbus_Slave.Slave_id);


	}
}
 8000734:	e008      	b.n	8000748 <Tacvu_HIENTHI+0x50>
		_Ht621b.clearAll();
 8000736:	4808      	ldr	r0, [pc, #32]	@ (8000758 <Tacvu_HIENTHI+0x60>)
 8000738:	f004 fa4c 	bl	8004bd4 <_ZN6HT16218clearAllEv>
		_Ht621b.Write_Id(_Modbus_Slave.Slave_id);
 800073c:	4b03      	ldr	r3, [pc, #12]	@ (800074c <Tacvu_HIENTHI+0x54>)
 800073e:	789b      	ldrb	r3, [r3, #2]
 8000740:	4619      	mov	r1, r3
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <Tacvu_HIENTHI+0x60>)
 8000744:	f004 fbd8 	bl	8004ef8 <_ZN6HT16218Write_IdEh>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000048 	.word	0x20000048
 8000750:	20000180 	.word	0x20000180
 8000754:	20000000 	.word	0x20000000
 8000758:	2000002c 	.word	0x2000002c
 800075c:	20000170 	.word	0x20000170
 8000760:	20000174 	.word	0x20000174

08000764 <Check_Slaveid>:
    }
}

uint32_t value=0;
///////////           Luu id slave vao epprom  /////////////////
void Check_Slaveid(){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	id=_Modbus_Slave.Slave_id;
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <Check_Slaveid+0x60>)
 800076a:	789b      	ldrb	r3, [r3, #2]
 800076c:	461a      	mov	r2, r3
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <Check_Slaveid+0x64>)
 8000770:	801a      	strh	r2, [r3, #0]
	if(_Modbus_Slave.Slave_id!=_Modbus_Slave.Slave_id_to_Eeprom){
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <Check_Slaveid+0x60>)
 8000774:	789b      	ldrb	r3, [r3, #2]
 8000776:	461a      	mov	r2, r3
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <Check_Slaveid+0x60>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	429a      	cmp	r2, r3
 800077e:	d00e      	beq.n	800079e <Check_Slaveid+0x3a>
		Flash_ErasePage(127);
 8000780:	207f      	movs	r0, #127	@ 0x7f
 8000782:	f003 fdd8 	bl	8004336 <Flash_ErasePage>
		Flash_Write(FLASH_TYPEPROGRAM_WORD,ADD_Flash_Slave_ID,_Modbus_Slave.Slave_id_to_Eeprom);
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <Check_Slaveid+0x60>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	461a      	mov	r2, r3
 800078c:	490f      	ldr	r1, [pc, #60]	@ (80007cc <Check_Slaveid+0x68>)
 800078e:	2002      	movs	r0, #2
 8000790:	f003 fdf6 	bl	8004380 <Flash_Write>
		_Modbus_Slave.Slave_id=_Modbus_Slave.Slave_id_to_Eeprom;
 8000794:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <Check_Slaveid+0x60>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <Check_Slaveid+0x60>)
 800079c:	709a      	strb	r2, [r3, #2]
	}
	 HAL_ADC_Start(&hadc1);
 800079e:	480c      	ldr	r0, [pc, #48]	@ (80007d0 <Check_Slaveid+0x6c>)
 80007a0:	f000 fcd2 	bl	8001148 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 100);
 80007a4:	2164      	movs	r1, #100	@ 0x64
 80007a6:	480a      	ldr	r0, [pc, #40]	@ (80007d0 <Check_Slaveid+0x6c>)
 80007a8:	f000 fda8 	bl	80012fc <HAL_ADC_PollForConversion>
	 value = HAL_ADC_GetValue(&hadc1);
 80007ac:	4808      	ldr	r0, [pc, #32]	@ (80007d0 <Check_Slaveid+0x6c>)
 80007ae:	f000 feab 	bl	8001508 <HAL_ADC_GetValue>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4a07      	ldr	r2, [pc, #28]	@ (80007d4 <Check_Slaveid+0x70>)
 80007b6:	6013      	str	r3, [r2, #0]
	 HAL_ADC_Stop(&hadc1);
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <Check_Slaveid+0x6c>)
 80007ba:	f000 fd73 	bl	80012a4 <HAL_ADC_Stop>

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000048 	.word	0x20000048
 80007c8:	20000180 	.word	0x20000180
 80007cc:	0801fcf0 	.word	0x0801fcf0
 80007d0:	20000188 	.word	0x20000188
 80007d4:	20000184 	.word	0x20000184

080007d8 <initial_UART_DMA>:

void initial_UART_DMA(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, _Modbus_Slave.RxData, 10);
 80007dc:	220a      	movs	r2, #10
 80007de:	4907      	ldr	r1, [pc, #28]	@ (80007fc <initial_UART_DMA+0x24>)
 80007e0:	4807      	ldr	r0, [pc, #28]	@ (8000800 <initial_UART_DMA+0x28>)
 80007e2:	f002 fea5 	bl	8003530 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80007e6:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <initial_UART_DMA+0x2c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <initial_UART_DMA+0x2c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f022 0204 	bic.w	r2, r2, #4
 80007f4:	601a      	str	r2, [r3, #0]
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000004b 	.word	0x2000004b
 8000800:	2000020c 	.word	0x2000020c
 8000804:	20000254 	.word	0x20000254

08000808 <alt_main>:
/////////////////////////////////////////////////////////////////////////////
void alt_main()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	/* Initialization */

	initial_UART_DMA();
 800080c:	f7ff ffe4 	bl	80007d8 <initial_UART_DMA>


	while (1)
	{
		/* Super loop */
		_Flags.TurnONFlags();
 8000810:	4809      	ldr	r0, [pc, #36]	@ (8000838 <alt_main+0x30>)
 8000812:	f003 fdd1 	bl	80043b8 <_ZN5Flags11TurnONFlagsEv>
		if (Status_initial_LCD){Status_initial_LCD=false;Tacvu_HIENTHI();}
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <alt_main+0x34>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d004      	beq.n	8000828 <alt_main+0x20>
 800081e:	4b07      	ldr	r3, [pc, #28]	@ (800083c <alt_main+0x34>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	f7ff ff68 	bl	80006f8 <Tacvu_HIENTHI>
		Check_Slaveid();
 8000828:	f7ff ff9c 	bl	8000764 <Check_Slaveid>
		Tacvu_HIENTHI();
 800082c:	f7ff ff64 	bl	80006f8 <Tacvu_HIENTHI>
		_Flags.TurnOFFFlags();
 8000830:	4801      	ldr	r0, [pc, #4]	@ (8000838 <alt_main+0x30>)
 8000832:	f003 fe25 	bl	8004480 <_ZN5Flags12TurnOFFFlagsEv>
		_Flags.TurnONFlags();
 8000836:	e7eb      	b.n	8000810 <alt_main+0x8>
 8000838:	2000015c 	.word	0x2000015c
 800083c:	20000001 	.word	0x20000001

08000840 <_Z41__static_initialization_and_destruction_0ii>:

	}
}
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d10a      	bne.n	8000866 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000856:	4293      	cmp	r3, r2
 8000858:	d105      	bne.n	8000866 <_Z41__static_initialization_and_destruction_0ii+0x26>
HT1621 _Ht621b;
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800085c:	f004 f8e0 	bl	8004a20 <_ZN6HT1621C1Ev>
Modbus_Slave _Modbus_Slave;
 8000860:	4804      	ldr	r0, [pc, #16]	@ (8000874 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000862:	f003 fea7 	bl	80045b4 <_ZN12Modbus_SlaveC1Ev>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000002c 	.word	0x2000002c
 8000874:	20000048 	.word	0x20000048

08000878 <_GLOBAL__sub_I_Rxx>:
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
 800087c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff ffdd 	bl	8000840 <_Z41__static_initialization_and_destruction_0ii>
 8000886:	bd80      	pop	{r7, pc}

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f000 fb22 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f80e 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f000 f910 	bl	8000ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000898:	f000 f8f0 	bl	8000a7c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800089c:	f000 f8c4 	bl	8000a28 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80008a0:	f000 f894 	bl	80009cc <MX_I2C1_Init>
  MX_ADC1_Init();
 80008a4:	f000 f854 	bl	8000950 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  alt_main();
 80008a8:	f7ff ffae 	bl	8000808 <alt_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <main+0x24>

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	@ 0x50
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ba:	2228      	movs	r2, #40	@ 0x28
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f004 fb96 	bl	8004ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e0:	2302      	movs	r3, #2
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e4:	2301      	movs	r3, #1
 80008e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e8:	2310      	movs	r3, #16
 80008ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 f84f 	bl	8002998 <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000900:	f000 f932 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	230f      	movs	r3, #15
 8000906:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f002 fabc 	bl	8002e9c <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800092a:	f000 f91d 	bl	8000b68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800092e:	2302      	movs	r3, #2
 8000930:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4618      	mov	r0, r3
 800093a:	f002 fc3d 	bl	80031b8 <HAL_RCCEx_PeriphCLKConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000944:	f000 f910 	bl	8000b68 <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3750      	adds	r7, #80	@ 0x50
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000960:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <MX_ADC1_Init+0x74>)
 8000962:	4a19      	ldr	r2, [pc, #100]	@ (80009c8 <MX_ADC1_Init+0x78>)
 8000964:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000966:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <MX_ADC1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <MX_ADC1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_ADC1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_ADC1_Init+0x74>)
 800097a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800097e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000980:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <MX_ADC1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_ADC1_Init+0x74>)
 8000988:	2201      	movs	r2, #1
 800098a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098c:	480d      	ldr	r0, [pc, #52]	@ (80009c4 <MX_ADC1_Init+0x74>)
 800098e:	f000 fb03 	bl	8000f98 <HAL_ADC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000998:	f000 f8e6 	bl	8000b68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800099c:	2302      	movs	r3, #2
 800099e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_ADC1_Init+0x74>)
 80009ae:	f000 fdb7 	bl	8001520 <HAL_ADC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80009b8:	f000 f8d6 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000188 	.word	0x20000188
 80009c8:	40012400 	.word	0x40012400

080009cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <MX_I2C1_Init+0x50>)
 80009d2:	4a13      	ldr	r2, [pc, #76]	@ (8000a20 <MX_I2C1_Init+0x54>)
 80009d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <MX_I2C1_Init+0x50>)
 80009d8:	4a12      	ldr	r2, [pc, #72]	@ (8000a24 <MX_I2C1_Init+0x58>)
 80009da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <MX_I2C1_Init+0x50>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <MX_I2C1_Init+0x50>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <MX_I2C1_Init+0x50>)
 80009ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <MX_I2C1_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_I2C1_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fc:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <MX_I2C1_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <MX_I2C1_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	@ (8000a1c <MX_I2C1_Init+0x50>)
 8000a0a:	f001 fe81 	bl	8002710 <HAL_I2C_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a14:	f000 f8a8 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200001b8 	.word	0x200001b8
 8000a20:	40005400 	.word	0x40005400
 8000a24:	000186a0 	.word	0x000186a0

08000a28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	@ (8000a78 <MX_USART1_UART_Init+0x50>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a60:	f002 fd16 	bl	8003490 <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a6a:	f000 f87d 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000020c 	.word	0x2000020c
 8000a78:	40013800 	.word	0x40013800

08000a7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a82:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <MX_DMA_Init+0x38>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a0b      	ldr	r2, [pc, #44]	@ (8000ab4 <MX_DMA_Init+0x38>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_DMA_Init+0x38>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	200f      	movs	r0, #15
 8000aa0:	f000 ffa9 	bl	80019f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000aa4:	200f      	movs	r0, #15
 8000aa6:	f000 ffc2 	bl	8001a2e <HAL_NVIC_EnableIRQ>

}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b22      	ldr	r3, [pc, #136]	@ (8000b58 <MX_GPIO_Init+0xa0>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a21      	ldr	r2, [pc, #132]	@ (8000b58 <MX_GPIO_Init+0xa0>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <MX_GPIO_Init+0xa0>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <MX_GPIO_Init+0xa0>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b58 <MX_GPIO_Init+0xa0>)
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <MX_GPIO_Init+0xa0>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0308 	and.w	r3, r3, #8
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000b02:	4816      	ldr	r0, [pc, #88]	@ (8000b5c <MX_GPIO_Init+0xa4>)
 8000b04:	f001 fdd4 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b08:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2302      	movs	r3, #2
 8000b18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480e      	ldr	r0, [pc, #56]	@ (8000b5c <MX_GPIO_Init+0xa4>)
 8000b22:	f001 fc41 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b26:	2320      	movs	r3, #32
 8000b28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <MX_GPIO_Init+0xa8>)
 8000b2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	4619      	mov	r1, r3
 8000b38:	480a      	ldr	r0, [pc, #40]	@ (8000b64 <MX_GPIO_Init+0xac>)
 8000b3a:	f001 fc35 	bl	80023a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	2017      	movs	r0, #23
 8000b44:	f000 ff57 	bl	80019f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b48:	2017      	movs	r0, #23
 8000b4a:	f000 ff70 	bl	8001a2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40010800 	.word	0x40010800
 8000b60:	10210000 	.word	0x10210000
 8000b64:	40010c00 	.word	0x40010c00

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <Error_Handler+0x8>

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <HAL_MspInit+0x5c>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	4a14      	ldr	r2, [pc, #80]	@ (8000bd0 <HAL_MspInit+0x5c>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6193      	str	r3, [r2, #24]
 8000b86:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <HAL_MspInit+0x5c>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <HAL_MspInit+0x5c>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd0 <HAL_MspInit+0x5c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9c:	61d3      	str	r3, [r2, #28]
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <HAL_MspInit+0x5c>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000baa:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <HAL_MspInit+0x60>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	@ (8000bd4 <HAL_MspInit+0x60>)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010000 	.word	0x40010000

08000bd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a14      	ldr	r2, [pc, #80]	@ (8000c44 <HAL_ADC_MspInit+0x6c>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d121      	bne.n	8000c3c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <HAL_ADC_MspInit+0x70>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a12      	ldr	r2, [pc, #72]	@ (8000c48 <HAL_ADC_MspInit+0x70>)
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <HAL_ADC_MspInit+0x70>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <HAL_ADC_MspInit+0x70>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a0c      	ldr	r2, [pc, #48]	@ (8000c48 <HAL_ADC_MspInit+0x70>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <HAL_ADC_MspInit+0x70>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	4619      	mov	r1, r3
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <HAL_ADC_MspInit+0x74>)
 8000c38:	f001 fbb6 	bl	80023a8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40012400 	.word	0x40012400
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010800 	.word	0x40010800

08000c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce0 <HAL_I2C_MspInit+0x90>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d132      	bne.n	8000cd6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <HAL_I2C_MspInit+0x94>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce4 <HAL_I2C_MspInit+0x94>)
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <HAL_I2C_MspInit+0x94>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c88:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8e:	2312      	movs	r3, #18
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4812      	ldr	r0, [pc, #72]	@ (8000ce8 <HAL_I2C_MspInit+0x98>)
 8000c9e:	f001 fb83 	bl	80023a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000ca2:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <HAL_I2C_MspInit+0x9c>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000caa:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb2:	f043 0302 	orr.w	r3, r3, #2
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000cec <HAL_I2C_MspInit+0x9c>)
 8000cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <HAL_I2C_MspInit+0x94>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	4a08      	ldr	r2, [pc, #32]	@ (8000ce4 <HAL_I2C_MspInit+0x94>)
 8000cc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cc8:	61d3      	str	r3, [r2, #28]
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_I2C_MspInit+0x94>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	@ 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010c00 	.word	0x40010c00
 8000cec:	40010000 	.word	0x40010000

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a33      	ldr	r2, [pc, #204]	@ (8000dd8 <HAL_UART_MspInit+0xe8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d15f      	bne.n	8000dd0 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d10:	4b32      	ldr	r3, [pc, #200]	@ (8000ddc <HAL_UART_MspInit+0xec>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a31      	ldr	r2, [pc, #196]	@ (8000ddc <HAL_UART_MspInit+0xec>)
 8000d16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ddc <HAL_UART_MspInit+0xec>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b2c      	ldr	r3, [pc, #176]	@ (8000ddc <HAL_UART_MspInit+0xec>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8000ddc <HAL_UART_MspInit+0xec>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b29      	ldr	r3, [pc, #164]	@ (8000ddc <HAL_UART_MspInit+0xec>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	4619      	mov	r1, r3
 8000d54:	4822      	ldr	r0, [pc, #136]	@ (8000de0 <HAL_UART_MspInit+0xf0>)
 8000d56:	f001 fb27 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481c      	ldr	r0, [pc, #112]	@ (8000de0 <HAL_UART_MspInit+0xf0>)
 8000d70:	f001 fb1a 	bl	80023a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <HAL_UART_MspInit+0xf4>)
 8000d76:	4a1c      	ldr	r2, [pc, #112]	@ (8000de8 <HAL_UART_MspInit+0xf8>)
 8000d78:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <HAL_UART_MspInit+0xf4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <HAL_UART_MspInit+0xf4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d86:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <HAL_UART_MspInit+0xf4>)
 8000d88:	2280      	movs	r2, #128	@ 0x80
 8000d8a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <HAL_UART_MspInit+0xf4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <HAL_UART_MspInit+0xf4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_UART_MspInit+0xf4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <HAL_UART_MspInit+0xf4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000da4:	480f      	ldr	r0, [pc, #60]	@ (8000de4 <HAL_UART_MspInit+0xf4>)
 8000da6:	f000 fe5d 	bl	8001a64 <HAL_DMA_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000db0:	f7ff feda 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <HAL_UART_MspInit+0xf4>)
 8000db8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dba:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <HAL_UART_MspInit+0xf4>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2025      	movs	r0, #37	@ 0x25
 8000dc6:	f000 fe16 	bl	80019f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dca:	2025      	movs	r0, #37	@ 0x25
 8000dcc:	f000 fe2f 	bl	8001a2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40013800 	.word	0x40013800
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010800 	.word	0x40010800
 8000de4:	20000254 	.word	0x20000254
 8000de8:	40020058 	.word	0x40020058

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <NMI_Handler+0x4>

08000df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <MemManage_Handler+0x4>

08000e04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 f890 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <DMA1_Channel5_IRQHandler+0x10>)
 8000e4a:	f000 ff79 	bl	8001d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000254 	.word	0x20000254

08000e58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000e5c:	2020      	movs	r0, #32
 8000e5e:	f001 fc3f 	bl	80026e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e6c:	4802      	ldr	r0, [pc, #8]	@ (8000e78 <USART1_IRQHandler+0x10>)
 8000e6e:	f002 fbb9 	bl	80035e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000020c 	.word	0x2000020c

08000e7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e88:	f7ff fff8 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e8c:	480b      	ldr	r0, [pc, #44]	@ (8000ebc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e8e:	490c      	ldr	r1, [pc, #48]	@ (8000ec0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e90:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a09      	ldr	r2, [pc, #36]	@ (8000ec8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ea4:	4c09      	ldr	r4, [pc, #36]	@ (8000ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f004 f8a5 	bl	8005000 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eb6:	f7ff fce7 	bl	8000888 <main>
  bx lr
 8000eba:	4770      	bx	lr
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ec4:	08005110 	.word	0x08005110
  ldr r2, =_sbss
 8000ec8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ecc:	200002c0 	.word	0x200002c0

08000ed0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC1_2_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <HAL_Init+0x28>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	@ (8000efc <HAL_Init+0x28>)
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 fd7b 	bl	80019e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	200f      	movs	r0, #15
 8000eec:	f000 f808 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f7ff fe40 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40022000 	.word	0x40022000

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_InitTick+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <HAL_InitTick+0x58>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fd93 	bl	8001a4a <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 fd5b 	bl	80019f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <HAL_InitTick+0x5c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000004 	.word	0x20000004
 8000f58:	2000000c 	.word	0x2000000c
 8000f5c:	20000008 	.word	0x20000008

08000f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <HAL_IncTick+0x1c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <HAL_IncTick+0x20>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a03      	ldr	r2, [pc, #12]	@ (8000f80 <HAL_IncTick+0x20>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	2000000c 	.word	0x2000000c
 8000f80:	20000298 	.word	0x20000298

08000f84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b02      	ldr	r3, [pc, #8]	@ (8000f94 <HAL_GetTick+0x10>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	20000298 	.word	0x20000298

08000f98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e0be      	b.n	8001138 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d109      	bne.n	8000fdc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff fdfe 	bl	8000bd8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 fbf1 	bl	80017c4 <ADC_ConversionStop_Disable>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f040 8099 	bne.w	8001126 <HAL_ADC_Init+0x18e>
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 8095 	bne.w	8001126 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001000:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001004:	f023 0302 	bic.w	r3, r3, #2
 8001008:	f043 0202 	orr.w	r2, r3, #2
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001018:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7b1b      	ldrb	r3, [r3, #12]
 800101e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001020:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	4313      	orrs	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001030:	d003      	beq.n	800103a <HAL_ADC_Init+0xa2>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d102      	bne.n	8001040 <HAL_ADC_Init+0xa8>
 800103a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800103e:	e000      	b.n	8001042 <HAL_ADC_Init+0xaa>
 8001040:	2300      	movs	r3, #0
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7d1b      	ldrb	r3, [r3, #20]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d119      	bne.n	8001084 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7b1b      	ldrb	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d109      	bne.n	800106c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	3b01      	subs	r3, #1
 800105e:	035a      	lsls	r2, r3, #13
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	e00b      	b.n	8001084 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001070:	f043 0220 	orr.w	r2, r3, #32
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800107c:	f043 0201 	orr.w	r2, r3, #1
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	430a      	orrs	r2, r1
 8001096:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <HAL_ADC_Init+0x1a8>)
 80010a0:	4013      	ands	r3, r2
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	6812      	ldr	r2, [r2, #0]
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	430b      	orrs	r3, r1
 80010aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010b4:	d003      	beq.n	80010be <HAL_ADC_Init+0x126>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d104      	bne.n	80010c8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	051b      	lsls	r3, r3, #20
 80010c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ce:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	430a      	orrs	r2, r1
 80010da:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <HAL_ADC_Init+0x1ac>)
 80010e4:	4013      	ands	r3, r2
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d10b      	bne.n	8001104 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f6:	f023 0303 	bic.w	r3, r3, #3
 80010fa:	f043 0201 	orr.w	r2, r3, #1
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001102:	e018      	b.n	8001136 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	f023 0312 	bic.w	r3, r3, #18
 800110c:	f043 0210 	orr.w	r2, r3, #16
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001118:	f043 0201 	orr.w	r2, r3, #1
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001124:	e007      	b.n	8001136 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112a:	f043 0210 	orr.w	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001136:	7dfb      	ldrb	r3, [r7, #23]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	ffe1f7fd 	.word	0xffe1f7fd
 8001144:	ff1f0efe 	.word	0xff1f0efe

08001148 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <HAL_ADC_Start+0x1a>
 800115e:	2302      	movs	r3, #2
 8001160:	e098      	b.n	8001294 <HAL_ADC_Start+0x14c>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 fad0 	bl	8001710 <ADC_Enable>
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f040 8087 	bne.w	800128a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001184:	f023 0301 	bic.w	r3, r3, #1
 8001188:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a41      	ldr	r2, [pc, #260]	@ (800129c <HAL_ADC_Start+0x154>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d105      	bne.n	80011a6 <HAL_ADC_Start+0x5e>
 800119a:	4b41      	ldr	r3, [pc, #260]	@ (80012a0 <HAL_ADC_Start+0x158>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d115      	bne.n	80011d2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d026      	beq.n	800120e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011d0:	e01d      	b.n	800120e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a2f      	ldr	r2, [pc, #188]	@ (80012a0 <HAL_ADC_Start+0x158>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d004      	beq.n	80011f2 <HAL_ADC_Start+0xaa>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a2b      	ldr	r2, [pc, #172]	@ (800129c <HAL_ADC_Start+0x154>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10d      	bne.n	800120e <HAL_ADC_Start+0xc6>
 80011f2:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <HAL_ADC_Start+0x158>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001202:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001206:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001212:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121e:	f023 0206 	bic.w	r2, r3, #6
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001226:	e002      	b.n	800122e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f06f 0202 	mvn.w	r2, #2
 800123e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800124a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800124e:	d113      	bne.n	8001278 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001254:	4a11      	ldr	r2, [pc, #68]	@ (800129c <HAL_ADC_Start+0x154>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d105      	bne.n	8001266 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <HAL_ADC_Start+0x158>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001262:	2b00      	cmp	r3, #0
 8001264:	d108      	bne.n	8001278 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	e00c      	b.n	8001292 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	e003      	b.n	8001292 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40012800 	.word	0x40012800
 80012a0:	40012400 	.word	0x40012400

080012a4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <HAL_ADC_Stop+0x1a>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e01a      	b.n	80012f4 <HAL_ADC_Stop+0x50>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 fa7c 	bl	80017c4 <ADC_ConversionStop_Disable>
 80012cc:	4603      	mov	r3, r0
 80012ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012de:	f023 0301 	bic.w	r3, r3, #1
 80012e2:	f043 0201 	orr.w	r2, r3, #1
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001312:	f7ff fe37 	bl	8000f84 <HAL_GetTick>
 8001316:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132a:	f043 0220 	orr.w	r2, r3, #32
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0d3      	b.n	80014e6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d131      	bne.n	80013b0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001352:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001356:	2b00      	cmp	r3, #0
 8001358:	d12a      	bne.n	80013b0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800135a:	e021      	b.n	80013a0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001362:	d01d      	beq.n	80013a0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <HAL_ADC_PollForConversion+0x7e>
 800136a:	f7ff fe0b 	bl	8000f84 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d212      	bcs.n	80013a0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10b      	bne.n	80013a0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138c:	f043 0204 	orr.w	r2, r3, #4
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e0a2      	b.n	80014e6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0d6      	beq.n	800135c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013ae:	e070      	b.n	8001492 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80013b0:	4b4f      	ldr	r3, [pc, #316]	@ (80014f0 <HAL_ADC_PollForConversion+0x1f4>)
 80013b2:	681c      	ldr	r4, [r3, #0]
 80013b4:	2002      	movs	r0, #2
 80013b6:	f001 ffb5 	bl	8003324 <HAL_RCCEx_GetPeriphCLKFreq>
 80013ba:	4603      	mov	r3, r0
 80013bc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6919      	ldr	r1, [r3, #16]
 80013c6:	4b4b      	ldr	r3, [pc, #300]	@ (80014f4 <HAL_ADC_PollForConversion+0x1f8>)
 80013c8:	400b      	ands	r3, r1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d118      	bne.n	8001400 <HAL_ADC_PollForConversion+0x104>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68d9      	ldr	r1, [r3, #12]
 80013d4:	4b48      	ldr	r3, [pc, #288]	@ (80014f8 <HAL_ADC_PollForConversion+0x1fc>)
 80013d6:	400b      	ands	r3, r1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d111      	bne.n	8001400 <HAL_ADC_PollForConversion+0x104>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6919      	ldr	r1, [r3, #16]
 80013e2:	4b46      	ldr	r3, [pc, #280]	@ (80014fc <HAL_ADC_PollForConversion+0x200>)
 80013e4:	400b      	ands	r3, r1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d108      	bne.n	80013fc <HAL_ADC_PollForConversion+0x100>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	4b43      	ldr	r3, [pc, #268]	@ (8001500 <HAL_ADC_PollForConversion+0x204>)
 80013f2:	400b      	ands	r3, r1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_ADC_PollForConversion+0x100>
 80013f8:	2314      	movs	r3, #20
 80013fa:	e020      	b.n	800143e <HAL_ADC_PollForConversion+0x142>
 80013fc:	2329      	movs	r3, #41	@ 0x29
 80013fe:	e01e      	b.n	800143e <HAL_ADC_PollForConversion+0x142>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6919      	ldr	r1, [r3, #16]
 8001406:	4b3d      	ldr	r3, [pc, #244]	@ (80014fc <HAL_ADC_PollForConversion+0x200>)
 8001408:	400b      	ands	r3, r1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <HAL_ADC_PollForConversion+0x120>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68d9      	ldr	r1, [r3, #12]
 8001414:	4b3a      	ldr	r3, [pc, #232]	@ (8001500 <HAL_ADC_PollForConversion+0x204>)
 8001416:	400b      	ands	r3, r1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00d      	beq.n	8001438 <HAL_ADC_PollForConversion+0x13c>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6919      	ldr	r1, [r3, #16]
 8001422:	4b38      	ldr	r3, [pc, #224]	@ (8001504 <HAL_ADC_PollForConversion+0x208>)
 8001424:	400b      	ands	r3, r1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d108      	bne.n	800143c <HAL_ADC_PollForConversion+0x140>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68d9      	ldr	r1, [r3, #12]
 8001430:	4b34      	ldr	r3, [pc, #208]	@ (8001504 <HAL_ADC_PollForConversion+0x208>)
 8001432:	400b      	ands	r3, r1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_ADC_PollForConversion+0x140>
 8001438:	2354      	movs	r3, #84	@ 0x54
 800143a:	e000      	b.n	800143e <HAL_ADC_PollForConversion+0x142>
 800143c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001444:	e021      	b.n	800148a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d01a      	beq.n	8001484 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <HAL_ADC_PollForConversion+0x168>
 8001454:	f7ff fd96 	bl	8000f84 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d20f      	bcs.n	8001484 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d90b      	bls.n	8001484 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001470:	f043 0204 	orr.w	r2, r3, #4
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e030      	b.n	80014e6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	429a      	cmp	r2, r3
 8001490:	d8d9      	bhi.n	8001446 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f06f 0212 	mvn.w	r2, #18
 800149a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80014b2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80014b6:	d115      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d111      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d105      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd90      	pop	{r4, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000004 	.word	0x20000004
 80014f4:	24924924 	.word	0x24924924
 80014f8:	00924924 	.word	0x00924924
 80014fc:	12492492 	.word	0x12492492
 8001500:	00492492 	.word	0x00492492
 8001504:	00249249 	.word	0x00249249

08001508 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x20>
 800153c:	2302      	movs	r3, #2
 800153e:	e0dc      	b.n	80016fa <HAL_ADC_ConfigChannel+0x1da>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b06      	cmp	r3, #6
 800154e:	d81c      	bhi.n	800158a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	3b05      	subs	r3, #5
 8001562:	221f      	movs	r2, #31
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	4019      	ands	r1, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	3b05      	subs	r3, #5
 800157c:	fa00 f203 	lsl.w	r2, r0, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	635a      	str	r2, [r3, #52]	@ 0x34
 8001588:	e03c      	b.n	8001604 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b0c      	cmp	r3, #12
 8001590:	d81c      	bhi.n	80015cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	3b23      	subs	r3, #35	@ 0x23
 80015a4:	221f      	movs	r2, #31
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	4019      	ands	r1, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	3b23      	subs	r3, #35	@ 0x23
 80015be:	fa00 f203 	lsl.w	r2, r0, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80015ca:	e01b      	b.n	8001604 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	3b41      	subs	r3, #65	@ 0x41
 80015de:	221f      	movs	r2, #31
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	4019      	ands	r1, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	3b41      	subs	r3, #65	@ 0x41
 80015f8:	fa00 f203 	lsl.w	r2, r0, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b09      	cmp	r3, #9
 800160a:	d91c      	bls.n	8001646 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68d9      	ldr	r1, [r3, #12]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	3b1e      	subs	r3, #30
 800161e:	2207      	movs	r2, #7
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	4019      	ands	r1, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	6898      	ldr	r0, [r3, #8]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	3b1e      	subs	r3, #30
 8001638:	fa00 f203 	lsl.w	r2, r0, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	e019      	b.n	800167a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6919      	ldr	r1, [r3, #16]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	2207      	movs	r2, #7
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	4019      	ands	r1, r3
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	6898      	ldr	r0, [r3, #8]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	fa00 f203 	lsl.w	r2, r0, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b10      	cmp	r3, #16
 8001680:	d003      	beq.n	800168a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001686:	2b11      	cmp	r3, #17
 8001688:	d132      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a1d      	ldr	r2, [pc, #116]	@ (8001704 <HAL_ADC_ConfigChannel+0x1e4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d125      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d126      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80016b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d11a      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ba:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <HAL_ADC_ConfigChannel+0x1e8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a13      	ldr	r2, [pc, #76]	@ (800170c <HAL_ADC_ConfigChannel+0x1ec>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	0c9a      	lsrs	r2, r3, #18
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016d0:	e002      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f9      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x1b2>
 80016de:	e007      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e4:	f043 0220 	orr.w	r2, r3, #32
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40012400 	.word	0x40012400
 8001708:	20000004 	.word	0x20000004
 800170c:	431bde83 	.word	0x431bde83

08001710 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b01      	cmp	r3, #1
 800172c:	d040      	beq.n	80017b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0201 	orr.w	r2, r2, #1
 800173c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800173e:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <ADC_Enable+0xac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a1f      	ldr	r2, [pc, #124]	@ (80017c0 <ADC_Enable+0xb0>)
 8001744:	fba2 2303 	umull	r2, r3, r2, r3
 8001748:	0c9b      	lsrs	r3, r3, #18
 800174a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800174c:	e002      	b.n	8001754 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	3b01      	subs	r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f9      	bne.n	800174e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800175a:	f7ff fc13 	bl	8000f84 <HAL_GetTick>
 800175e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001760:	e01f      	b.n	80017a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001762:	f7ff fc0f 	bl	8000f84 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d918      	bls.n	80017a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b01      	cmp	r3, #1
 800177c:	d011      	beq.n	80017a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001782:	f043 0210 	orr.w	r2, r3, #16
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178e:	f043 0201 	orr.w	r2, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e007      	b.n	80017b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d1d8      	bne.n	8001762 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000004 	.word	0x20000004
 80017c0:	431bde83 	.word	0x431bde83

080017c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d12e      	bne.n	800183c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0201 	bic.w	r2, r2, #1
 80017ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017ee:	f7ff fbc9 	bl	8000f84 <HAL_GetTick>
 80017f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017f4:	e01b      	b.n	800182e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017f6:	f7ff fbc5 	bl	8000f84 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d914      	bls.n	800182e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b01      	cmp	r3, #1
 8001810:	d10d      	bne.n	800182e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001816:	f043 0210 	orr.w	r2, r3, #16
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001822:	f043 0201 	orr.w	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e007      	b.n	800183e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b01      	cmp	r3, #1
 800183a:	d0dc      	beq.n	80017f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	@ (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db0b      	blt.n	80018d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4906      	ldr	r1, [pc, #24]	@ (80018e0 <__NVIC_EnableIRQ+0x34>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	@ (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	@ (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	@ 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	@ 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019ac:	d301      	bcc.n	80019b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00f      	b.n	80019d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b2:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <SysTick_Config+0x40>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ba:	210f      	movs	r1, #15
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f7ff ff90 	bl	80018e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <SysTick_Config+0x40>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <SysTick_Config+0x40>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff2d 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a08:	f7ff ff42 	bl	8001890 <__NVIC_GetPriorityGrouping>
 8001a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7ff ff90 	bl	8001938 <NVIC_EncodePriority>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff5f 	bl	80018e4 <__NVIC_SetPriority>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff35 	bl	80018ac <__NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffa2 	bl	800199c <SysTick_Config>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e043      	b.n	8001b02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b22      	ldr	r3, [pc, #136]	@ (8001b0c <HAL_DMA_Init+0xa8>)
 8001a82:	4413      	add	r3, r2
 8001a84:	4a22      	ldr	r2, [pc, #136]	@ (8001b10 <HAL_DMA_Init+0xac>)
 8001a86:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8a:	091b      	lsrs	r3, r3, #4
 8001a8c:	009a      	lsls	r2, r3, #2
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a1f      	ldr	r2, [pc, #124]	@ (8001b14 <HAL_DMA_Init+0xb0>)
 8001a96:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001aae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ab2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	bffdfff8 	.word	0xbffdfff8
 8001b10:	cccccccd 	.word	0xcccccccd
 8001b14:	40020000 	.word	0x40020000

08001b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_DMA_Start_IT+0x20>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e04b      	b.n	8001bd0 <HAL_DMA_Start_IT+0xb8>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d13a      	bne.n	8001bc2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0201 	bic.w	r2, r2, #1
 8001b68:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	68b9      	ldr	r1, [r7, #8]
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 f9eb 	bl	8001f4c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 020e 	orr.w	r2, r2, #14
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	e00f      	b.n	8001bb0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0204 	bic.w	r2, r2, #4
 8001b9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 020a 	orr.w	r2, r2, #10
 8001bae:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e005      	b.n	8001bce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d008      	beq.n	8001c02 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e020      	b.n	8001c44 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 020e 	bic.w	r2, r2, #14
 8001c10:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0201 	bic.w	r2, r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c30:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d005      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	e051      	b.n	8001d18 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 020e 	bic.w	r2, r2, #14
 8001c82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0201 	bic.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a22      	ldr	r2, [pc, #136]	@ (8001d24 <HAL_DMA_Abort_IT+0xd4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d029      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0xa2>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a21      	ldr	r2, [pc, #132]	@ (8001d28 <HAL_DMA_Abort_IT+0xd8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d022      	beq.n	8001cee <HAL_DMA_Abort_IT+0x9e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1f      	ldr	r2, [pc, #124]	@ (8001d2c <HAL_DMA_Abort_IT+0xdc>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d01a      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x98>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d30 <HAL_DMA_Abort_IT+0xe0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d012      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x92>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d34 <HAL_DMA_Abort_IT+0xe4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00a      	beq.n	8001cdc <HAL_DMA_Abort_IT+0x8c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1b      	ldr	r2, [pc, #108]	@ (8001d38 <HAL_DMA_Abort_IT+0xe8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d102      	bne.n	8001cd6 <HAL_DMA_Abort_IT+0x86>
 8001cd0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001cd4:	e00e      	b.n	8001cf4 <HAL_DMA_Abort_IT+0xa4>
 8001cd6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cda:	e00b      	b.n	8001cf4 <HAL_DMA_Abort_IT+0xa4>
 8001cdc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ce0:	e008      	b.n	8001cf4 <HAL_DMA_Abort_IT+0xa4>
 8001ce2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ce6:	e005      	b.n	8001cf4 <HAL_DMA_Abort_IT+0xa4>
 8001ce8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cec:	e002      	b.n	8001cf4 <HAL_DMA_Abort_IT+0xa4>
 8001cee:	2310      	movs	r3, #16
 8001cf0:	e000      	b.n	8001cf4 <HAL_DMA_Abort_IT+0xa4>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	4a11      	ldr	r2, [pc, #68]	@ (8001d3c <HAL_DMA_Abort_IT+0xec>)
 8001cf6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	4798      	blx	r3
    } 
  }
  return status;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40020008 	.word	0x40020008
 8001d28:	4002001c 	.word	0x4002001c
 8001d2c:	40020030 	.word	0x40020030
 8001d30:	40020044 	.word	0x40020044
 8001d34:	40020058 	.word	0x40020058
 8001d38:	4002006c 	.word	0x4002006c
 8001d3c:	40020000 	.word	0x40020000

08001d40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d04f      	beq.n	8001e08 <HAL_DMA_IRQHandler+0xc8>
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d04a      	beq.n	8001e08 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0320 	and.w	r3, r3, #32
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d107      	bne.n	8001d90 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0204 	bic.w	r2, r2, #4
 8001d8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a66      	ldr	r2, [pc, #408]	@ (8001f30 <HAL_DMA_IRQHandler+0x1f0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d029      	beq.n	8001dee <HAL_DMA_IRQHandler+0xae>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a65      	ldr	r2, [pc, #404]	@ (8001f34 <HAL_DMA_IRQHandler+0x1f4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d022      	beq.n	8001dea <HAL_DMA_IRQHandler+0xaa>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a63      	ldr	r2, [pc, #396]	@ (8001f38 <HAL_DMA_IRQHandler+0x1f8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d01a      	beq.n	8001de4 <HAL_DMA_IRQHandler+0xa4>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a62      	ldr	r2, [pc, #392]	@ (8001f3c <HAL_DMA_IRQHandler+0x1fc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d012      	beq.n	8001dde <HAL_DMA_IRQHandler+0x9e>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a60      	ldr	r2, [pc, #384]	@ (8001f40 <HAL_DMA_IRQHandler+0x200>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00a      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x98>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a5f      	ldr	r2, [pc, #380]	@ (8001f44 <HAL_DMA_IRQHandler+0x204>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d102      	bne.n	8001dd2 <HAL_DMA_IRQHandler+0x92>
 8001dcc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001dd0:	e00e      	b.n	8001df0 <HAL_DMA_IRQHandler+0xb0>
 8001dd2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001dd6:	e00b      	b.n	8001df0 <HAL_DMA_IRQHandler+0xb0>
 8001dd8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001ddc:	e008      	b.n	8001df0 <HAL_DMA_IRQHandler+0xb0>
 8001dde:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001de2:	e005      	b.n	8001df0 <HAL_DMA_IRQHandler+0xb0>
 8001de4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001de8:	e002      	b.n	8001df0 <HAL_DMA_IRQHandler+0xb0>
 8001dea:	2340      	movs	r3, #64	@ 0x40
 8001dec:	e000      	b.n	8001df0 <HAL_DMA_IRQHandler+0xb0>
 8001dee:	2304      	movs	r3, #4
 8001df0:	4a55      	ldr	r2, [pc, #340]	@ (8001f48 <HAL_DMA_IRQHandler+0x208>)
 8001df2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8094 	beq.w	8001f26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e06:	e08e      	b.n	8001f26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d056      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x186>
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d051      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10b      	bne.n	8001e48 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 020a 	bic.w	r2, r2, #10
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a38      	ldr	r2, [pc, #224]	@ (8001f30 <HAL_DMA_IRQHandler+0x1f0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d029      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0x166>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a37      	ldr	r2, [pc, #220]	@ (8001f34 <HAL_DMA_IRQHandler+0x1f4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d022      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0x162>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a35      	ldr	r2, [pc, #212]	@ (8001f38 <HAL_DMA_IRQHandler+0x1f8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01a      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x15c>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a34      	ldr	r2, [pc, #208]	@ (8001f3c <HAL_DMA_IRQHandler+0x1fc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d012      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x156>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a32      	ldr	r2, [pc, #200]	@ (8001f40 <HAL_DMA_IRQHandler+0x200>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00a      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x150>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a31      	ldr	r2, [pc, #196]	@ (8001f44 <HAL_DMA_IRQHandler+0x204>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d102      	bne.n	8001e8a <HAL_DMA_IRQHandler+0x14a>
 8001e84:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e88:	e00e      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x168>
 8001e8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e8e:	e00b      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x168>
 8001e90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e94:	e008      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x168>
 8001e96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e9a:	e005      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x168>
 8001e9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ea0:	e002      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x168>
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	e000      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x168>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	4a27      	ldr	r2, [pc, #156]	@ (8001f48 <HAL_DMA_IRQHandler+0x208>)
 8001eaa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d034      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ec4:	e02f      	b.n	8001f26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	2208      	movs	r2, #8
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d028      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x1e8>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d023      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 020e 	bic.w	r2, r2, #14
 8001eee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef8:	2101      	movs	r1, #1
 8001efa:	fa01 f202 	lsl.w	r2, r1, r2
 8001efe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d004      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4798      	blx	r3
    }
  }
  return;
 8001f26:	bf00      	nop
 8001f28:	bf00      	nop
}
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40020008 	.word	0x40020008
 8001f34:	4002001c 	.word	0x4002001c
 8001f38:	40020030 	.word	0x40020030
 8001f3c:	40020044 	.word	0x40020044
 8001f40:	40020058 	.word	0x40020058
 8001f44:	4002006c 	.word	0x4002006c
 8001f48:	40020000 	.word	0x40020000

08001f4c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f62:	2101      	movs	r1, #1
 8001f64:	fa01 f202 	lsl.w	r2, r1, r2
 8001f68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d108      	bne.n	8001f8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f8a:	e007      	b.n	8001f9c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	60da      	str	r2, [r3, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
	...

08001fa8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002080 <HAL_FLASH_Program+0xd8>)
 8001fc4:	7e1b      	ldrb	r3, [r3, #24]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_FLASH_Program+0x26>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e054      	b.n	8002078 <HAL_FLASH_Program+0xd0>
 8001fce:	4b2c      	ldr	r3, [pc, #176]	@ (8002080 <HAL_FLASH_Program+0xd8>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001fd4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001fd8:	f000 f8a8 	bl	800212c <FLASH_WaitForLastOperation>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d144      	bne.n	8002070 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d102      	bne.n	8001ff2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001fec:	2301      	movs	r3, #1
 8001fee:	757b      	strb	r3, [r7, #21]
 8001ff0:	e007      	b.n	8002002 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d102      	bne.n	8001ffe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	757b      	strb	r3, [r7, #21]
 8001ffc:	e001      	b.n	8002002 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001ffe:	2304      	movs	r3, #4
 8002000:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002002:	2300      	movs	r3, #0
 8002004:	75bb      	strb	r3, [r7, #22]
 8002006:	e02d      	b.n	8002064 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002008:	7dbb      	ldrb	r3, [r7, #22]
 800200a:	005a      	lsls	r2, r3, #1
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	eb02 0c03 	add.w	ip, r2, r3
 8002012:	7dbb      	ldrb	r3, [r7, #22]
 8002014:	0119      	lsls	r1, r3, #4
 8002016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800201a:	f1c1 0620 	rsb	r6, r1, #32
 800201e:	f1a1 0020 	sub.w	r0, r1, #32
 8002022:	fa22 f401 	lsr.w	r4, r2, r1
 8002026:	fa03 f606 	lsl.w	r6, r3, r6
 800202a:	4334      	orrs	r4, r6
 800202c:	fa23 f000 	lsr.w	r0, r3, r0
 8002030:	4304      	orrs	r4, r0
 8002032:	fa23 f501 	lsr.w	r5, r3, r1
 8002036:	b2a3      	uxth	r3, r4
 8002038:	4619      	mov	r1, r3
 800203a:	4660      	mov	r0, ip
 800203c:	f000 f85a 	bl	80020f4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002040:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002044:	f000 f872 	bl	800212c <FLASH_WaitForLastOperation>
 8002048:	4603      	mov	r3, r0
 800204a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800204c:	4b0d      	ldr	r3, [pc, #52]	@ (8002084 <HAL_FLASH_Program+0xdc>)
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	4a0c      	ldr	r2, [pc, #48]	@ (8002084 <HAL_FLASH_Program+0xdc>)
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d107      	bne.n	800206e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800205e:	7dbb      	ldrb	r3, [r7, #22]
 8002060:	3301      	adds	r3, #1
 8002062:	75bb      	strb	r3, [r7, #22]
 8002064:	7dba      	ldrb	r2, [r7, #22]
 8002066:	7d7b      	ldrb	r3, [r7, #21]
 8002068:	429a      	cmp	r2, r3
 800206a:	d3cd      	bcc.n	8002008 <HAL_FLASH_Program+0x60>
 800206c:	e000      	b.n	8002070 <HAL_FLASH_Program+0xc8>
      {
        break;
 800206e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002070:	4b03      	ldr	r3, [pc, #12]	@ (8002080 <HAL_FLASH_Program+0xd8>)
 8002072:	2200      	movs	r2, #0
 8002074:	761a      	strb	r2, [r3, #24]

  return status;
 8002076:	7dfb      	ldrb	r3, [r7, #23]
}
 8002078:	4618      	mov	r0, r3
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002080:	200002a0 	.word	0x200002a0
 8002084:	40022000 	.word	0x40022000

08002088 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002092:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <HAL_FLASH_Unlock+0x40>)
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00d      	beq.n	80020ba <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800209e:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <HAL_FLASH_Unlock+0x40>)
 80020a0:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <HAL_FLASH_Unlock+0x44>)
 80020a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <HAL_FLASH_Unlock+0x40>)
 80020a6:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <HAL_FLASH_Unlock+0x48>)
 80020a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80020aa:	4b07      	ldr	r3, [pc, #28]	@ (80020c8 <HAL_FLASH_Unlock+0x40>)
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80020ba:	79fb      	ldrb	r3, [r7, #7]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40022000 	.word	0x40022000
 80020cc:	45670123 	.word	0x45670123
 80020d0:	cdef89ab 	.word	0xcdef89ab

080020d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_FLASH_Lock+0x1c>)
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	4a04      	ldr	r2, [pc, #16]	@ (80020f0 <HAL_FLASH_Lock+0x1c>)
 80020de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020e2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40022000 	.word	0x40022000

080020f4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <FLASH_Program_HalfWord+0x30>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002106:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <FLASH_Program_HalfWord+0x34>)
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	4a07      	ldr	r2, [pc, #28]	@ (8002128 <FLASH_Program_HalfWord+0x34>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	887a      	ldrh	r2, [r7, #2]
 8002116:	801a      	strh	r2, [r3, #0]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	200002a0 	.word	0x200002a0
 8002128:	40022000 	.word	0x40022000

0800212c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002134:	f7fe ff26 	bl	8000f84 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800213a:	e010      	b.n	800215e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002142:	d00c      	beq.n	800215e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <FLASH_WaitForLastOperation+0x2e>
 800214a:	f7fe ff1b 	bl	8000f84 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	429a      	cmp	r2, r3
 8002158:	d201      	bcs.n	800215e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e025      	b.n	80021aa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <FLASH_WaitForLastOperation+0x88>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1e8      	bne.n	800213c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800216a:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <FLASH_WaitForLastOperation+0x88>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002176:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <FLASH_WaitForLastOperation+0x88>)
 8002178:	2220      	movs	r2, #32
 800217a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800217c:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <FLASH_WaitForLastOperation+0x88>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10b      	bne.n	80021a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002188:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <FLASH_WaitForLastOperation+0x88>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002194:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <FLASH_WaitForLastOperation+0x88>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80021a0:	f000 f80a 	bl	80021b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000

080021b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80021c2:	4b23      	ldr	r3, [pc, #140]	@ (8002250 <FLASH_SetErrorCode+0x98>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80021ce:	4b21      	ldr	r3, [pc, #132]	@ (8002254 <FLASH_SetErrorCode+0x9c>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f043 0302 	orr.w	r3, r3, #2
 80021d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002254 <FLASH_SetErrorCode+0x9c>)
 80021d8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f043 0310 	orr.w	r3, r3, #16
 80021e0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80021e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002250 <FLASH_SetErrorCode+0x98>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80021ee:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <FLASH_SetErrorCode+0x9c>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	4a17      	ldr	r2, [pc, #92]	@ (8002254 <FLASH_SetErrorCode+0x9c>)
 80021f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002202:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <FLASH_SetErrorCode+0x98>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00b      	beq.n	8002226 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800220e:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <FLASH_SetErrorCode+0x9c>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	4a0f      	ldr	r2, [pc, #60]	@ (8002254 <FLASH_SetErrorCode+0x9c>)
 8002218:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800221a:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <FLASH_SetErrorCode+0x98>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4a0c      	ldr	r2, [pc, #48]	@ (8002250 <FLASH_SetErrorCode+0x98>)
 8002220:	f023 0301 	bic.w	r3, r3, #1
 8002224:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f240 1201 	movw	r2, #257	@ 0x101
 800222c:	4293      	cmp	r3, r2
 800222e:	d106      	bne.n	800223e <FLASH_SetErrorCode+0x86>
 8002230:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <FLASH_SetErrorCode+0x98>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	4a06      	ldr	r2, [pc, #24]	@ (8002250 <FLASH_SetErrorCode+0x98>)
 8002236:	f023 0301 	bic.w	r3, r3, #1
 800223a:	61d3      	str	r3, [r2, #28]
}  
 800223c:	e002      	b.n	8002244 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800223e:	4a04      	ldr	r2, [pc, #16]	@ (8002250 <FLASH_SetErrorCode+0x98>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	60d3      	str	r3, [r2, #12]
}  
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40022000 	.word	0x40022000
 8002254:	200002a0 	.word	0x200002a0

08002258 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800226a:	4b2f      	ldr	r3, [pc, #188]	@ (8002328 <HAL_FLASHEx_Erase+0xd0>)
 800226c:	7e1b      	ldrb	r3, [r3, #24]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_FLASHEx_Erase+0x1e>
 8002272:	2302      	movs	r3, #2
 8002274:	e053      	b.n	800231e <HAL_FLASHEx_Erase+0xc6>
 8002276:	4b2c      	ldr	r3, [pc, #176]	@ (8002328 <HAL_FLASHEx_Erase+0xd0>)
 8002278:	2201      	movs	r2, #1
 800227a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d116      	bne.n	80022b2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002284:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002288:	f7ff ff50 	bl	800212c <FLASH_WaitForLastOperation>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d141      	bne.n	8002316 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002292:	2001      	movs	r0, #1
 8002294:	f000 f84c 	bl	8002330 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002298:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800229c:	f7ff ff46 	bl	800212c <FLASH_WaitForLastOperation>
 80022a0:	4603      	mov	r3, r0
 80022a2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80022a4:	4b21      	ldr	r3, [pc, #132]	@ (800232c <HAL_FLASHEx_Erase+0xd4>)
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	4a20      	ldr	r2, [pc, #128]	@ (800232c <HAL_FLASHEx_Erase+0xd4>)
 80022aa:	f023 0304 	bic.w	r3, r3, #4
 80022ae:	6113      	str	r3, [r2, #16]
 80022b0:	e031      	b.n	8002316 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80022b2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022b6:	f7ff ff39 	bl	800212c <FLASH_WaitForLastOperation>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d12a      	bne.n	8002316 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f04f 32ff 	mov.w	r2, #4294967295
 80022c6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	e019      	b.n	8002304 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80022d0:	68b8      	ldr	r0, [r7, #8]
 80022d2:	f000 f849 	bl	8002368 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022d6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022da:	f7ff ff27 	bl	800212c <FLASH_WaitForLastOperation>
 80022de:	4603      	mov	r3, r0
 80022e0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80022e2:	4b12      	ldr	r3, [pc, #72]	@ (800232c <HAL_FLASHEx_Erase+0xd4>)
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	4a11      	ldr	r2, [pc, #68]	@ (800232c <HAL_FLASHEx_Erase+0xd4>)
 80022e8:	f023 0302 	bic.w	r3, r3, #2
 80022ec:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	601a      	str	r2, [r3, #0]
            break;
 80022fa:	e00c      	b.n	8002316 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002302:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	029a      	lsls	r2, r3, #10
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	4413      	add	r3, r2
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	429a      	cmp	r2, r3
 8002314:	d3dc      	bcc.n	80022d0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002316:	4b04      	ldr	r3, [pc, #16]	@ (8002328 <HAL_FLASHEx_Erase+0xd0>)
 8002318:	2200      	movs	r2, #0
 800231a:	761a      	strb	r2, [r3, #24]

  return status;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200002a0 	.word	0x200002a0
 800232c:	40022000 	.word	0x40022000

08002330 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002338:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <FLASH_MassErase+0x30>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800233e:	4b09      	ldr	r3, [pc, #36]	@ (8002364 <FLASH_MassErase+0x34>)
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	4a08      	ldr	r2, [pc, #32]	@ (8002364 <FLASH_MassErase+0x34>)
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800234a:	4b06      	ldr	r3, [pc, #24]	@ (8002364 <FLASH_MassErase+0x34>)
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	4a05      	ldr	r2, [pc, #20]	@ (8002364 <FLASH_MassErase+0x34>)
 8002350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002354:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	200002a0 	.word	0x200002a0
 8002364:	40022000 	.word	0x40022000

08002368 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <FLASH_PageErase+0x38>)
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002376:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <FLASH_PageErase+0x3c>)
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <FLASH_PageErase+0x3c>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002382:	4a08      	ldr	r2, [pc, #32]	@ (80023a4 <FLASH_PageErase+0x3c>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002388:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <FLASH_PageErase+0x3c>)
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	4a05      	ldr	r2, [pc, #20]	@ (80023a4 <FLASH_PageErase+0x3c>)
 800238e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002392:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	200002a0 	.word	0x200002a0
 80023a4:	40022000 	.word	0x40022000

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b08b      	sub	sp, #44	@ 0x2c
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ba:	e169      	b.n	8002690 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023bc:	2201      	movs	r2, #1
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	f040 8158 	bne.w	800268a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a9a      	ldr	r2, [pc, #616]	@ (8002648 <HAL_GPIO_Init+0x2a0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d05e      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 80023e4:	4a98      	ldr	r2, [pc, #608]	@ (8002648 <HAL_GPIO_Init+0x2a0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d875      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 80023ea:	4a98      	ldr	r2, [pc, #608]	@ (800264c <HAL_GPIO_Init+0x2a4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d058      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 80023f0:	4a96      	ldr	r2, [pc, #600]	@ (800264c <HAL_GPIO_Init+0x2a4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d86f      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 80023f6:	4a96      	ldr	r2, [pc, #600]	@ (8002650 <HAL_GPIO_Init+0x2a8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d052      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 80023fc:	4a94      	ldr	r2, [pc, #592]	@ (8002650 <HAL_GPIO_Init+0x2a8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d869      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 8002402:	4a94      	ldr	r2, [pc, #592]	@ (8002654 <HAL_GPIO_Init+0x2ac>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d04c      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 8002408:	4a92      	ldr	r2, [pc, #584]	@ (8002654 <HAL_GPIO_Init+0x2ac>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d863      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 800240e:	4a92      	ldr	r2, [pc, #584]	@ (8002658 <HAL_GPIO_Init+0x2b0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d046      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 8002414:	4a90      	ldr	r2, [pc, #576]	@ (8002658 <HAL_GPIO_Init+0x2b0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d85d      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 800241a:	2b12      	cmp	r3, #18
 800241c:	d82a      	bhi.n	8002474 <HAL_GPIO_Init+0xcc>
 800241e:	2b12      	cmp	r3, #18
 8002420:	d859      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 8002422:	a201      	add	r2, pc, #4	@ (adr r2, 8002428 <HAL_GPIO_Init+0x80>)
 8002424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002428:	080024a3 	.word	0x080024a3
 800242c:	0800247d 	.word	0x0800247d
 8002430:	0800248f 	.word	0x0800248f
 8002434:	080024d1 	.word	0x080024d1
 8002438:	080024d7 	.word	0x080024d7
 800243c:	080024d7 	.word	0x080024d7
 8002440:	080024d7 	.word	0x080024d7
 8002444:	080024d7 	.word	0x080024d7
 8002448:	080024d7 	.word	0x080024d7
 800244c:	080024d7 	.word	0x080024d7
 8002450:	080024d7 	.word	0x080024d7
 8002454:	080024d7 	.word	0x080024d7
 8002458:	080024d7 	.word	0x080024d7
 800245c:	080024d7 	.word	0x080024d7
 8002460:	080024d7 	.word	0x080024d7
 8002464:	080024d7 	.word	0x080024d7
 8002468:	080024d7 	.word	0x080024d7
 800246c:	08002485 	.word	0x08002485
 8002470:	08002499 	.word	0x08002499
 8002474:	4a79      	ldr	r2, [pc, #484]	@ (800265c <HAL_GPIO_Init+0x2b4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800247a:	e02c      	b.n	80024d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	623b      	str	r3, [r7, #32]
          break;
 8002482:	e029      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	3304      	adds	r3, #4
 800248a:	623b      	str	r3, [r7, #32]
          break;
 800248c:	e024      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	3308      	adds	r3, #8
 8002494:	623b      	str	r3, [r7, #32]
          break;
 8002496:	e01f      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	330c      	adds	r3, #12
 800249e:	623b      	str	r3, [r7, #32]
          break;
 80024a0:	e01a      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024aa:	2304      	movs	r3, #4
 80024ac:	623b      	str	r3, [r7, #32]
          break;
 80024ae:	e013      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b8:	2308      	movs	r3, #8
 80024ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	611a      	str	r2, [r3, #16]
          break;
 80024c2:	e009      	b.n	80024d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024c4:	2308      	movs	r3, #8
 80024c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	615a      	str	r2, [r3, #20]
          break;
 80024ce:	e003      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
          break;
 80024d4:	e000      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          break;
 80024d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2bff      	cmp	r3, #255	@ 0xff
 80024dc:	d801      	bhi.n	80024e2 <HAL_GPIO_Init+0x13a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	e001      	b.n	80024e6 <HAL_GPIO_Init+0x13e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3304      	adds	r3, #4
 80024e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2bff      	cmp	r3, #255	@ 0xff
 80024ec:	d802      	bhi.n	80024f4 <HAL_GPIO_Init+0x14c>
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	e002      	b.n	80024fa <HAL_GPIO_Init+0x152>
 80024f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f6:	3b08      	subs	r3, #8
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	210f      	movs	r1, #15
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	401a      	ands	r2, r3
 800250c:	6a39      	ldr	r1, [r7, #32]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	431a      	orrs	r2, r3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80b1 	beq.w	800268a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002528:	4b4d      	ldr	r3, [pc, #308]	@ (8002660 <HAL_GPIO_Init+0x2b8>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4a4c      	ldr	r2, [pc, #304]	@ (8002660 <HAL_GPIO_Init+0x2b8>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6193      	str	r3, [r2, #24]
 8002534:	4b4a      	ldr	r3, [pc, #296]	@ (8002660 <HAL_GPIO_Init+0x2b8>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002540:	4a48      	ldr	r2, [pc, #288]	@ (8002664 <HAL_GPIO_Init+0x2bc>)
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	089b      	lsrs	r3, r3, #2
 8002546:	3302      	adds	r3, #2
 8002548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	220f      	movs	r2, #15
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a40      	ldr	r2, [pc, #256]	@ (8002668 <HAL_GPIO_Init+0x2c0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d013      	beq.n	8002594 <HAL_GPIO_Init+0x1ec>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a3f      	ldr	r2, [pc, #252]	@ (800266c <HAL_GPIO_Init+0x2c4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00d      	beq.n	8002590 <HAL_GPIO_Init+0x1e8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a3e      	ldr	r2, [pc, #248]	@ (8002670 <HAL_GPIO_Init+0x2c8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d007      	beq.n	800258c <HAL_GPIO_Init+0x1e4>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a3d      	ldr	r2, [pc, #244]	@ (8002674 <HAL_GPIO_Init+0x2cc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d101      	bne.n	8002588 <HAL_GPIO_Init+0x1e0>
 8002584:	2303      	movs	r3, #3
 8002586:	e006      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 8002588:	2304      	movs	r3, #4
 800258a:	e004      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 800258c:	2302      	movs	r3, #2
 800258e:	e002      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 8002594:	2300      	movs	r3, #0
 8002596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002598:	f002 0203 	and.w	r2, r2, #3
 800259c:	0092      	lsls	r2, r2, #2
 800259e:	4093      	lsls	r3, r2
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025a6:	492f      	ldr	r1, [pc, #188]	@ (8002664 <HAL_GPIO_Init+0x2bc>)
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	492c      	ldr	r1, [pc, #176]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	4928      	ldr	r1, [pc, #160]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025d8:	4013      	ands	r3, r2
 80025da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d006      	beq.n	80025f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025e8:	4b23      	ldr	r3, [pc, #140]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	4922      	ldr	r1, [pc, #136]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60cb      	str	r3, [r1, #12]
 80025f4:	e006      	b.n	8002604 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025f6:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	491e      	ldr	r1, [pc, #120]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 8002600:	4013      	ands	r3, r2
 8002602:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d006      	beq.n	800261e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002610:	4b19      	ldr	r3, [pc, #100]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	4918      	ldr	r1, [pc, #96]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800261e:	4b16      	ldr	r3, [pc, #88]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	43db      	mvns	r3, r3
 8002626:	4914      	ldr	r1, [pc, #80]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 8002628:	4013      	ands	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d021      	beq.n	800267c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002638:	4b0f      	ldr	r3, [pc, #60]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	490e      	ldr	r1, [pc, #56]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
 8002644:	e021      	b.n	800268a <HAL_GPIO_Init+0x2e2>
 8002646:	bf00      	nop
 8002648:	10320000 	.word	0x10320000
 800264c:	10310000 	.word	0x10310000
 8002650:	10220000 	.word	0x10220000
 8002654:	10210000 	.word	0x10210000
 8002658:	10120000 	.word	0x10120000
 800265c:	10110000 	.word	0x10110000
 8002660:	40021000 	.word	0x40021000
 8002664:	40010000 	.word	0x40010000
 8002668:	40010800 	.word	0x40010800
 800266c:	40010c00 	.word	0x40010c00
 8002670:	40011000 	.word	0x40011000
 8002674:	40011400 	.word	0x40011400
 8002678:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800267c:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <HAL_GPIO_Init+0x304>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	43db      	mvns	r3, r3
 8002684:	4909      	ldr	r1, [pc, #36]	@ (80026ac <HAL_GPIO_Init+0x304>)
 8002686:	4013      	ands	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	3301      	adds	r3, #1
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	f47f ae8e 	bne.w	80023bc <HAL_GPIO_Init+0x14>
  }
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	372c      	adds	r7, #44	@ 0x2c
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	40010400 	.word	0x40010400

080026b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
 80026bc:	4613      	mov	r3, r2
 80026be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c0:	787b      	ldrb	r3, [r7, #1]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026cc:	e003      	b.n	80026d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	041a      	lsls	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	611a      	str	r2, [r3, #16]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026ea:	4b08      	ldr	r3, [pc, #32]	@ (800270c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d006      	beq.n	8002704 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026f6:	4a05      	ldr	r2, [pc, #20]	@ (800270c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd ffcc 	bl	800069c <HAL_GPIO_EXTI_Callback>
  }
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40010400 	.word	0x40010400

08002710 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e12b      	b.n	800297a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fa8a 	bl	8000c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2224      	movs	r2, #36	@ 0x24
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0201 	bic.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002762:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002772:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002774:	f000 fcda 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 8002778:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4a81      	ldr	r2, [pc, #516]	@ (8002984 <HAL_I2C_Init+0x274>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d807      	bhi.n	8002794 <HAL_I2C_Init+0x84>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a80      	ldr	r2, [pc, #512]	@ (8002988 <HAL_I2C_Init+0x278>)
 8002788:	4293      	cmp	r3, r2
 800278a:	bf94      	ite	ls
 800278c:	2301      	movls	r3, #1
 800278e:	2300      	movhi	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	e006      	b.n	80027a2 <HAL_I2C_Init+0x92>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a7d      	ldr	r2, [pc, #500]	@ (800298c <HAL_I2C_Init+0x27c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	bf94      	ite	ls
 800279c:	2301      	movls	r3, #1
 800279e:	2300      	movhi	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e0e7      	b.n	800297a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4a78      	ldr	r2, [pc, #480]	@ (8002990 <HAL_I2C_Init+0x280>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	0c9b      	lsrs	r3, r3, #18
 80027b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002984 <HAL_I2C_Init+0x274>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d802      	bhi.n	80027e4 <HAL_I2C_Init+0xd4>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	3301      	adds	r3, #1
 80027e2:	e009      	b.n	80027f8 <HAL_I2C_Init+0xe8>
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	4a69      	ldr	r2, [pc, #420]	@ (8002994 <HAL_I2C_Init+0x284>)
 80027f0:	fba2 2303 	umull	r2, r3, r2, r3
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	3301      	adds	r3, #1
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800280a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	495c      	ldr	r1, [pc, #368]	@ (8002984 <HAL_I2C_Init+0x274>)
 8002814:	428b      	cmp	r3, r1
 8002816:	d819      	bhi.n	800284c <HAL_I2C_Init+0x13c>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1e59      	subs	r1, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	fbb1 f3f3 	udiv	r3, r1, r3
 8002826:	1c59      	adds	r1, r3, #1
 8002828:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800282c:	400b      	ands	r3, r1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_I2C_Init+0x138>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1e59      	subs	r1, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002840:	3301      	adds	r3, #1
 8002842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002846:	e051      	b.n	80028ec <HAL_I2C_Init+0x1dc>
 8002848:	2304      	movs	r3, #4
 800284a:	e04f      	b.n	80028ec <HAL_I2C_Init+0x1dc>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d111      	bne.n	8002878 <HAL_I2C_Init+0x168>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1e58      	subs	r0, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	440b      	add	r3, r1
 8002862:	fbb0 f3f3 	udiv	r3, r0, r3
 8002866:	3301      	adds	r3, #1
 8002868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf0c      	ite	eq
 8002870:	2301      	moveq	r3, #1
 8002872:	2300      	movne	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	e012      	b.n	800289e <HAL_I2C_Init+0x18e>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1e58      	subs	r0, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	0099      	lsls	r1, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	fbb0 f3f3 	udiv	r3, r0, r3
 800288e:	3301      	adds	r3, #1
 8002890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Init+0x196>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e022      	b.n	80028ec <HAL_I2C_Init+0x1dc>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10e      	bne.n	80028cc <HAL_I2C_Init+0x1bc>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1e58      	subs	r0, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6859      	ldr	r1, [r3, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	440b      	add	r3, r1
 80028bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c0:	3301      	adds	r3, #1
 80028c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028ca:	e00f      	b.n	80028ec <HAL_I2C_Init+0x1dc>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1e58      	subs	r0, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	0099      	lsls	r1, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	6809      	ldr	r1, [r1, #0]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800291a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6911      	ldr	r1, [r2, #16]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	68d2      	ldr	r2, [r2, #12]
 8002926:	4311      	orrs	r1, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	430b      	orrs	r3, r1
 800292e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	000186a0 	.word	0x000186a0
 8002988:	001e847f 	.word	0x001e847f
 800298c:	003d08ff 	.word	0x003d08ff
 8002990:	431bde83 	.word	0x431bde83
 8002994:	10624dd3 	.word	0x10624dd3

08002998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e272      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8087 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b8:	4b92      	ldr	r3, [pc, #584]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d00c      	beq.n	80029de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d112      	bne.n	80029f6 <HAL_RCC_OscConfig+0x5e>
 80029d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029dc:	d10b      	bne.n	80029f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029de:	4b89      	ldr	r3, [pc, #548]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d06c      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x12c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d168      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e24c      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x76>
 8002a00:	4b80      	ldr	r3, [pc, #512]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a7f      	ldr	r2, [pc, #508]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	e02e      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x98>
 8002a16:	4b7b      	ldr	r3, [pc, #492]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a7a      	ldr	r2, [pc, #488]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b78      	ldr	r3, [pc, #480]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a77      	ldr	r2, [pc, #476]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e01d      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0xbc>
 8002a3a:	4b72      	ldr	r3, [pc, #456]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a71      	ldr	r2, [pc, #452]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b6f      	ldr	r3, [pc, #444]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a54:	4b6b      	ldr	r3, [pc, #428]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a6a      	ldr	r2, [pc, #424]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b68      	ldr	r3, [pc, #416]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a67      	ldr	r2, [pc, #412]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7fe fa86 	bl	8000f84 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fa82 	bl	8000f84 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	@ 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e200      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0xe4>
 8002a9a:	e014      	b.n	8002ac6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fa72 	bl	8000f84 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fa6e 	bl	8000f84 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	@ 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e1ec      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	4b53      	ldr	r3, [pc, #332]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x10c>
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d063      	beq.n	8002b9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ad2:	4b4c      	ldr	r3, [pc, #304]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ade:	4b49      	ldr	r3, [pc, #292]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d11c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x18c>
 8002aea:	4b46      	ldr	r3, [pc, #280]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d116      	bne.n	8002b24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	4b43      	ldr	r3, [pc, #268]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_RCC_OscConfig+0x176>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e1c0      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4939      	ldr	r1, [pc, #228]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b22:	e03a      	b.n	8002b9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d020      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b2c:	4b36      	ldr	r3, [pc, #216]	@ (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b32:	f7fe fa27 	bl	8000f84 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3a:	f7fe fa23 	bl	8000f84 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e1a1      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b58:	4b2a      	ldr	r3, [pc, #168]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4927      	ldr	r1, [pc, #156]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
 8002b6c:	e015      	b.n	8002b9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6e:	4b26      	ldr	r3, [pc, #152]	@ (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe fa06 	bl	8000f84 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7c:	f7fe fa02 	bl	8000f84 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e180      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d03a      	beq.n	8002c1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d019      	beq.n	8002be2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bae:	4b17      	ldr	r3, [pc, #92]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb4:	f7fe f9e6 	bl	8000f84 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bbc:	f7fe f9e2 	bl	8000f84 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e160      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	4b0d      	ldr	r3, [pc, #52]	@ (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f000 face 	bl	800317c <RCC_Delay>
 8002be0:	e01c      	b.n	8002c1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be2:	4b0a      	ldr	r3, [pc, #40]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be8:	f7fe f9cc 	bl	8000f84 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bee:	e00f      	b.n	8002c10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7fe f9c8 	bl	8000f84 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d908      	bls.n	8002c10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e146      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	42420000 	.word	0x42420000
 8002c0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c10:	4b92      	ldr	r3, [pc, #584]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e9      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80a6 	beq.w	8002d76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2e:	4b8b      	ldr	r3, [pc, #556]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10d      	bne.n	8002c56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	4b88      	ldr	r3, [pc, #544]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	4a87      	ldr	r2, [pc, #540]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c44:	61d3      	str	r3, [r2, #28]
 8002c46:	4b85      	ldr	r3, [pc, #532]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c52:	2301      	movs	r3, #1
 8002c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	4b82      	ldr	r3, [pc, #520]	@ (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d118      	bne.n	8002c94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c62:	4b7f      	ldr	r3, [pc, #508]	@ (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a7e      	ldr	r2, [pc, #504]	@ (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6e:	f7fe f989 	bl	8000f84 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c76:	f7fe f985 	bl	8000f84 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	@ 0x64
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e103      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	4b75      	ldr	r3, [pc, #468]	@ (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x312>
 8002c9c:	4b6f      	ldr	r3, [pc, #444]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4a6e      	ldr	r2, [pc, #440]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6213      	str	r3, [r2, #32]
 8002ca8:	e02d      	b.n	8002d06 <HAL_RCC_OscConfig+0x36e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x334>
 8002cb2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4a69      	ldr	r2, [pc, #420]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	6213      	str	r3, [r2, #32]
 8002cbe:	4b67      	ldr	r3, [pc, #412]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4a66      	ldr	r2, [pc, #408]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	6213      	str	r3, [r2, #32]
 8002cca:	e01c      	b.n	8002d06 <HAL_RCC_OscConfig+0x36e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d10c      	bne.n	8002cee <HAL_RCC_OscConfig+0x356>
 8002cd4:	4b61      	ldr	r3, [pc, #388]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	4a60      	ldr	r2, [pc, #384]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6213      	str	r3, [r2, #32]
 8002ce0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4a5d      	ldr	r2, [pc, #372]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6213      	str	r3, [r2, #32]
 8002cec:	e00b      	b.n	8002d06 <HAL_RCC_OscConfig+0x36e>
 8002cee:	4b5b      	ldr	r3, [pc, #364]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a5a      	ldr	r2, [pc, #360]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6213      	str	r3, [r2, #32]
 8002cfa:	4b58      	ldr	r3, [pc, #352]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4a57      	ldr	r2, [pc, #348]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d015      	beq.n	8002d3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0e:	f7fe f939 	bl	8000f84 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7fe f935 	bl	8000f84 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e0b1      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ee      	beq.n	8002d16 <HAL_RCC_OscConfig+0x37e>
 8002d38:	e014      	b.n	8002d64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3a:	f7fe f923 	bl	8000f84 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d42:	f7fe f91f 	bl	8000f84 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e09b      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d58:	4b40      	ldr	r3, [pc, #256]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1ee      	bne.n	8002d42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d105      	bne.n	8002d76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4a3b      	ldr	r2, [pc, #236]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8087 	beq.w	8002e8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d80:	4b36      	ldr	r3, [pc, #216]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d061      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d146      	bne.n	8002e22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d94:	4b33      	ldr	r3, [pc, #204]	@ (8002e64 <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9a:	f7fe f8f3 	bl	8000f84 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da2:	f7fe f8ef 	bl	8000f84 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e06d      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db4:	4b29      	ldr	r3, [pc, #164]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f0      	bne.n	8002da2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dc8:	d108      	bne.n	8002ddc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dca:	4b24      	ldr	r3, [pc, #144]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	4921      	ldr	r1, [pc, #132]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a19      	ldr	r1, [r3, #32]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	430b      	orrs	r3, r1
 8002dee:	491b      	ldr	r1, [pc, #108]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e64 <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7fe f8c3 	bl	8000f84 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e02:	f7fe f8bf 	bl	8000f84 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e03d      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e14:	4b11      	ldr	r3, [pc, #68]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x46a>
 8002e20:	e035      	b.n	8002e8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e22:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <HAL_RCC_OscConfig+0x4cc>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fe f8ac 	bl	8000f84 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e30:	f7fe f8a8 	bl	8000f84 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e026      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x498>
 8002e4e:	e01e      	b.n	8002e8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e019      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40007000 	.word	0x40007000
 8002e64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <HAL_RCC_OscConfig+0x500>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d106      	bne.n	8002e8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d001      	beq.n	8002e8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000

08002e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0d0      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b6a      	ldr	r3, [pc, #424]	@ (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d910      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b67      	ldr	r3, [pc, #412]	@ (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 0207 	bic.w	r2, r3, #7
 8002ec6:	4965      	ldr	r1, [pc, #404]	@ (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b63      	ldr	r3, [pc, #396]	@ (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0b8      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d020      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef8:	4b59      	ldr	r3, [pc, #356]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4a58      	ldr	r2, [pc, #352]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f10:	4b53      	ldr	r3, [pc, #332]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4a52      	ldr	r2, [pc, #328]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f1c:	4b50      	ldr	r3, [pc, #320]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	494d      	ldr	r1, [pc, #308]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d040      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b47      	ldr	r3, [pc, #284]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d115      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e07f      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5a:	4b41      	ldr	r3, [pc, #260]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e073      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e06b      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f7a:	4b39      	ldr	r3, [pc, #228]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f023 0203 	bic.w	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4936      	ldr	r1, [pc, #216]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f8c:	f7fd fffa 	bl	8000f84 <HAL_GetTick>
 8002f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f94:	f7fd fff6 	bl	8000f84 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e053      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	4b2d      	ldr	r3, [pc, #180]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 020c 	and.w	r2, r3, #12
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d1eb      	bne.n	8002f94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b27      	ldr	r3, [pc, #156]	@ (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d210      	bcs.n	8002fec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b24      	ldr	r3, [pc, #144]	@ (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 0207 	bic.w	r2, r3, #7
 8002fd2:	4922      	ldr	r1, [pc, #136]	@ (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b20      	ldr	r3, [pc, #128]	@ (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e032      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff8:	4b19      	ldr	r3, [pc, #100]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4916      	ldr	r1, [pc, #88]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003016:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	490e      	ldr	r1, [pc, #56]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800302a:	f000 f821 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 800302e:	4602      	mov	r2, r0
 8003030:	4b0b      	ldr	r3, [pc, #44]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	490a      	ldr	r1, [pc, #40]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 800303c:	5ccb      	ldrb	r3, [r1, r3]
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	4a09      	ldr	r2, [pc, #36]	@ (8003068 <HAL_RCC_ClockConfig+0x1cc>)
 8003044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003046:	4b09      	ldr	r3, [pc, #36]	@ (800306c <HAL_RCC_ClockConfig+0x1d0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd ff58 	bl	8000f00 <HAL_InitTick>

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40022000 	.word	0x40022000
 8003060:	40021000 	.word	0x40021000
 8003064:	08005060 	.word	0x08005060
 8003068:	20000004 	.word	0x20000004
 800306c:	20000008 	.word	0x20000008

08003070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800308a:	4b1e      	ldr	r3, [pc, #120]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x94>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b04      	cmp	r3, #4
 8003098:	d002      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x30>
 800309a:	2b08      	cmp	r3, #8
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_GetSysClockFreq+0x36>
 800309e:	e027      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030a0:	4b19      	ldr	r3, [pc, #100]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x98>)
 80030a2:	613b      	str	r3, [r7, #16]
      break;
 80030a4:	e027      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	0c9b      	lsrs	r3, r3, #18
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	4a17      	ldr	r2, [pc, #92]	@ (800310c <HAL_RCC_GetSysClockFreq+0x9c>)
 80030b0:	5cd3      	ldrb	r3, [r2, r3]
 80030b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d010      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030be:	4b11      	ldr	r3, [pc, #68]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x94>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	0c5b      	lsrs	r3, r3, #17
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	4a11      	ldr	r2, [pc, #68]	@ (8003110 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030ca:	5cd3      	ldrb	r3, [r2, r3]
 80030cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x98>)
 80030d2:	fb03 f202 	mul.w	r2, r3, r2
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	e004      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003114 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	613b      	str	r3, [r7, #16]
      break;
 80030ee:	e002      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030f0:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x98>)
 80030f2:	613b      	str	r3, [r7, #16]
      break;
 80030f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f6:	693b      	ldr	r3, [r7, #16]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	007a1200 	.word	0x007a1200
 800310c:	08005078 	.word	0x08005078
 8003110:	08005088 	.word	0x08005088
 8003114:	003d0900 	.word	0x003d0900

08003118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800311c:	4b02      	ldr	r3, [pc, #8]	@ (8003128 <HAL_RCC_GetHCLKFreq+0x10>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	20000004 	.word	0x20000004

0800312c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003130:	f7ff fff2 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b05      	ldr	r3, [pc, #20]	@ (800314c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4903      	ldr	r1, [pc, #12]	@ (8003150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000
 8003150:	08005070 	.word	0x08005070

08003154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003158:	f7ff ffde 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	0adb      	lsrs	r3, r3, #11
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	@ (8003178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	08005070 	.word	0x08005070

0800317c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003184:	4b0a      	ldr	r3, [pc, #40]	@ (80031b0 <RCC_Delay+0x34>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0a      	ldr	r2, [pc, #40]	@ (80031b4 <RCC_Delay+0x38>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	0a5b      	lsrs	r3, r3, #9
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003198:	bf00      	nop
  }
  while (Delay --);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e5a      	subs	r2, r3, #1
 800319e:	60fa      	str	r2, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f9      	bne.n	8003198 <RCC_Delay+0x1c>
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	20000004 	.word	0x20000004
 80031b4:	10624dd3 	.word	0x10624dd3

080031b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d07d      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80031d4:	2300      	movs	r3, #0
 80031d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10d      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ee:	61d3      	str	r3, [r2, #28]
 80031f0:	4b49      	ldr	r3, [pc, #292]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fc:	2301      	movs	r3, #1
 80031fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	4b46      	ldr	r3, [pc, #280]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d118      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320c:	4b43      	ldr	r3, [pc, #268]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a42      	ldr	r2, [pc, #264]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003216:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003218:	f7fd feb4 	bl	8000f84 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321e:	e008      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003220:	f7fd feb0 	bl	8000f84 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	@ 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e06d      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003232:	4b3a      	ldr	r3, [pc, #232]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800323e:	4b36      	ldr	r3, [pc, #216]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003246:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d02e      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	429a      	cmp	r2, r3
 800325a:	d027      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800325c:	4b2e      	ldr	r3, [pc, #184]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003264:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003266:	4b2e      	ldr	r3, [pc, #184]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003268:	2201      	movs	r2, #1
 800326a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800326c:	4b2c      	ldr	r3, [pc, #176]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003272:	4a29      	ldr	r2, [pc, #164]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d014      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003282:	f7fd fe7f 	bl	8000f84 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003288:	e00a      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fd fe7b 	bl	8000f84 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e036      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ee      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4917      	ldr	r1, [pc, #92]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d105      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c4:	4b14      	ldr	r3, [pc, #80]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	4a13      	ldr	r2, [pc, #76]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	490b      	ldr	r1, [pc, #44]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032fa:	4b07      	ldr	r3, [pc, #28]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4904      	ldr	r1, [pc, #16]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	40007000 	.word	0x40007000
 8003320:	42420440 	.word	0x42420440

08003324 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	2300      	movs	r3, #0
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	2300      	movs	r3, #0
 8003336:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b10      	cmp	r3, #16
 8003344:	d00a      	beq.n	800335c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b10      	cmp	r3, #16
 800334a:	f200 808a 	bhi.w	8003462 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d045      	beq.n	80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d075      	beq.n	8003446 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800335a:	e082      	b.n	8003462 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800335c:	4b46      	ldr	r3, [pc, #280]	@ (8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003362:	4b45      	ldr	r3, [pc, #276]	@ (8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d07b      	beq.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	0c9b      	lsrs	r3, r3, #18
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	4a41      	ldr	r2, [pc, #260]	@ (800347c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003378:	5cd3      	ldrb	r3, [r2, r3]
 800337a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d015      	beq.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003386:	4b3c      	ldr	r3, [pc, #240]	@ (8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	0c5b      	lsrs	r3, r3, #17
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	4a3b      	ldr	r2, [pc, #236]	@ (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003392:	5cd3      	ldrb	r3, [r2, r3]
 8003394:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00d      	beq.n	80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80033a0:	4a38      	ldr	r2, [pc, #224]	@ (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	e004      	b.n	80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4a34      	ldr	r2, [pc, #208]	@ (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80033bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033c8:	d102      	bne.n	80033d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	61bb      	str	r3, [r7, #24]
      break;
 80033ce:	e04a      	b.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	4a2d      	ldr	r2, [pc, #180]	@ (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	61bb      	str	r3, [r7, #24]
      break;
 80033de:	e042      	b.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80033e0:	4b25      	ldr	r3, [pc, #148]	@ (8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033f0:	d108      	bne.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80033fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	e01f      	b.n	8003444 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800340a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800340e:	d109      	bne.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003410:	4b19      	ldr	r3, [pc, #100]	@ (8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800341c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	e00f      	b.n	8003444 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800342a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800342e:	d11c      	bne.n	800346a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003430:	4b11      	ldr	r3, [pc, #68]	@ (8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d016      	beq.n	800346a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800343c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003440:	61bb      	str	r3, [r7, #24]
      break;
 8003442:	e012      	b.n	800346a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003444:	e011      	b.n	800346a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003446:	f7ff fe85 	bl	8003154 <HAL_RCC_GetPCLK2Freq>
 800344a:	4602      	mov	r2, r0
 800344c:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	0b9b      	lsrs	r3, r3, #14
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	3301      	adds	r3, #1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	61bb      	str	r3, [r7, #24]
      break;
 8003460:	e004      	b.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003462:	bf00      	nop
 8003464:	e002      	b.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003466:	bf00      	nop
 8003468:	e000      	b.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800346a:	bf00      	nop
    }
  }
  return (frequency);
 800346c:	69bb      	ldr	r3, [r7, #24]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
 800347c:	0800508c 	.word	0x0800508c
 8003480:	0800509c 	.word	0x0800509c
 8003484:	007a1200 	.word	0x007a1200
 8003488:	003d0900 	.word	0x003d0900
 800348c:	aaaaaaab 	.word	0xaaaaaaab

08003490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e042      	b.n	8003528 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd fc1a 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2224      	movs	r2, #36	@ 0x24
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fe95 	bl	8004204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08c      	sub	sp, #48	@ 0x30
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b20      	cmp	r3, #32
 8003548:	d146      	bne.n	80035d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e03f      	b.n	80035da <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	461a      	mov	r2, r3
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fbed 	bl	8003d4c <UART_Start_Receive_DMA>
 8003572:	4603      	mov	r3, r0
 8003574:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357c:	2b01      	cmp	r3, #1
 800357e:	d125      	bne.n	80035cc <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003580:	2300      	movs	r3, #0
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	617b      	str	r3, [r7, #20]
   return(result);
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f043 0310 	orr.w	r3, r3, #16
 80035ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	330c      	adds	r3, #12
 80035b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80035b8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	6a39      	ldr	r1, [r7, #32]
 80035bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e5      	bne.n	8003596 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 80035ca:	e002      	b.n	80035d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80035d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80035d6:	e000      	b.n	80035da <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 80035d8:	2302      	movs	r3, #2
  }
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3730      	adds	r7, #48	@ 0x30
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b0ba      	sub	sp, #232	@ 0xe8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800360a:	2300      	movs	r3, #0
 800360c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003622:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10f      	bne.n	800364a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_UART_IRQHandler+0x66>
 8003636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fd20 	bl	8004088 <UART_Receive_IT>
      return;
 8003648:	e25b      	b.n	8003b02 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800364a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80de 	beq.w	8003810 <HAL_UART_IRQHandler+0x22c>
 8003654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003664:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80d1 	beq.w	8003810 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800366e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_UART_IRQHandler+0xae>
 800367a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_UART_IRQHandler+0xd2>
 800369e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d005      	beq.n	80036b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ae:	f043 0202 	orr.w	r2, r3, #2
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <HAL_UART_IRQHandler+0xf6>
 80036c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	f043 0204 	orr.w	r2, r3, #4
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d011      	beq.n	800370a <HAL_UART_IRQHandler+0x126>
 80036e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d105      	bne.n	80036fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	f043 0208 	orr.w	r2, r3, #8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 81f2 	beq.w	8003af8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_UART_IRQHandler+0x14e>
 8003720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fcab 	bl	8004088 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <HAL_UART_IRQHandler+0x17a>
 8003756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800375a:	2b00      	cmp	r3, #0
 800375c:	d04f      	beq.n	80037fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fbb5 	bl	8003ece <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d041      	beq.n	80037f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3314      	adds	r3, #20
 8003778:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003788:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800378c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003790:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3314      	adds	r3, #20
 800379a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800379e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1d9      	bne.n	8003772 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d013      	beq.n	80037ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ca:	4a7e      	ldr	r2, [pc, #504]	@ (80039c4 <HAL_UART_IRQHandler+0x3e0>)
 80037cc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe fa3c 	bl	8001c50 <HAL_DMA_Abort_IT>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d016      	beq.n	800380c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037e8:	4610      	mov	r0, r2
 80037ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ec:	e00e      	b.n	800380c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f9a5 	bl	8003b3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f4:	e00a      	b.n	800380c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f9a1 	bl	8003b3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	e006      	b.n	800380c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f99d 	bl	8003b3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800380a:	e175      	b.n	8003af8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	bf00      	nop
    return;
 800380e:	e173      	b.n	8003af8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003814:	2b01      	cmp	r3, #1
 8003816:	f040 814f 	bne.w	8003ab8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800381a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 8148 	beq.w	8003ab8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8141 	beq.w	8003ab8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003836:	2300      	movs	r3, #0
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80b6 	beq.w	80039c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003868:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8145 	beq.w	8003afc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800387a:	429a      	cmp	r2, r3
 800387c:	f080 813e 	bcs.w	8003afc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003886:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b20      	cmp	r3, #32
 8003890:	f000 8088 	beq.w	80039a4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	330c      	adds	r3, #12
 800389a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	330c      	adds	r3, #12
 80038bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038c0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1d9      	bne.n	8003894 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3314      	adds	r3, #20
 80038e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ea:	e853 3f00 	ldrex	r3, [r3]
 80038ee:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3314      	adds	r3, #20
 8003900:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003904:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003908:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800390c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e1      	bne.n	80038e0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3314      	adds	r3, #20
 8003922:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800392c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800392e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003932:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3314      	adds	r3, #20
 800393c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003940:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003942:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003946:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800394e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e3      	bne.n	800391c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	330c      	adds	r3, #12
 8003968:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003974:	f023 0310 	bic.w	r3, r3, #16
 8003978:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	330c      	adds	r3, #12
 8003982:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003986:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003988:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800398c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e3      	bne.n	8003962 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe f91a 	bl	8001bd8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	4619      	mov	r1, r3
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fc fe44 	bl	8000648 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039c0:	e09c      	b.n	8003afc <HAL_UART_IRQHandler+0x518>
 80039c2:	bf00      	nop
 80039c4:	08003f93 	.word	0x08003f93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 808e 	beq.w	8003b00 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8089 	beq.w	8003b00 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	330c      	adds	r3, #12
 80039f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	330c      	adds	r3, #12
 8003a0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a12:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e3      	bne.n	80039ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3314      	adds	r3, #20
 8003a2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	623b      	str	r3, [r7, #32]
   return(result);
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3314      	adds	r3, #20
 8003a46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e3      	bne.n	8003a26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	e853 3f00 	ldrex	r3, [r3]
 8003a7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0310 	bic.w	r3, r3, #16
 8003a82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	330c      	adds	r3, #12
 8003a8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a90:	61fa      	str	r2, [r7, #28]
 8003a92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a94:	69b9      	ldr	r1, [r7, #24]
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	e841 2300 	strex	r3, r2, [r1]
 8003a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e3      	bne.n	8003a6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7fc fdc9 	bl	8000648 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ab6:	e023      	b.n	8003b00 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d009      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x4f4>
 8003ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fa72 	bl	8003fba <UART_Transmit_IT>
    return;
 8003ad6:	e014      	b.n	8003b02 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00e      	beq.n	8003b02 <HAL_UART_IRQHandler+0x51e>
 8003ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fab1 	bl	8004058 <UART_EndTransmit_IT>
    return;
 8003af6:	e004      	b.n	8003b02 <HAL_UART_IRQHandler+0x51e>
    return;
 8003af8:	bf00      	nop
 8003afa:	e002      	b.n	8003b02 <HAL_UART_IRQHandler+0x51e>
      return;
 8003afc:	bf00      	nop
 8003afe:	e000      	b.n	8003b02 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b00:	bf00      	nop
  }
}
 8003b02:	37e8      	adds	r7, #232	@ 0xe8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr

08003b1a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b09c      	sub	sp, #112	@ 0x70
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d172      	bne.n	8003c52 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003b6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b6e:	2200      	movs	r2, #0
 8003b70:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	330c      	adds	r3, #12
 8003b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b7c:	e853 3f00 	ldrex	r3, [r3]
 8003b80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	330c      	adds	r3, #12
 8003b90:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003b92:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b94:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e5      	bne.n	8003b72 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3314      	adds	r3, #20
 8003bac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3314      	adds	r3, #20
 8003bc4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003bc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1e5      	bne.n	8003ba6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3314      	adds	r3, #20
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	623b      	str	r3, [r7, #32]
   return(result);
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3314      	adds	r3, #20
 8003bf8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003bfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e5      	bne.n	8003bda <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d119      	bne.n	8003c52 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f023 0310 	bic.w	r3, r3, #16
 8003c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003c3e:	61fa      	str	r2, [r7, #28]
 8003c40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	69b9      	ldr	r1, [r7, #24]
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	617b      	str	r3, [r7, #20]
   return(result);
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e5      	bne.n	8003c1e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c54:	2200      	movs	r2, #0
 8003c56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d106      	bne.n	8003c6e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c64:	4619      	mov	r1, r3
 8003c66:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c68:	f7fc fcee 	bl	8000648 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c6c:	e002      	b.n	8003c74 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003c6e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c70:	f7ff ff53 	bl	8003b1a <HAL_UART_RxCpltCallback>
}
 8003c74:	bf00      	nop
 8003c76:	3770      	adds	r7, #112	@ 0x70
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d108      	bne.n	8003caa <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f7fc fcd0 	bl	8000648 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ca8:	e002      	b.n	8003cb0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7ff ff3e 	bl	8003b2c <HAL_UART_RxHalfCpltCallback>
}
 8003cb0:	bf00      	nop
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf14      	ite	ne
 8003cd8:	2301      	movne	r3, #1
 8003cda:	2300      	moveq	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b21      	cmp	r3, #33	@ 0x21
 8003cea:	d108      	bne.n	8003cfe <UART_DMAError+0x46>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003cf8:	68b8      	ldr	r0, [r7, #8]
 8003cfa:	f000 f8c1 	bl	8003e80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b22      	cmp	r3, #34	@ 0x22
 8003d1e:	d108      	bne.n	8003d32 <UART_DMAError+0x7a>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003d2c:	68b8      	ldr	r0, [r7, #8]
 8003d2e:	f000 f8ce 	bl	8003ece <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d36:	f043 0210 	orr.w	r2, r3, #16
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d3e:	68b8      	ldr	r0, [r7, #8]
 8003d40:	f7ff fefd 	bl	8003b3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b098      	sub	sp, #96	@ 0x60
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	4613      	mov	r3, r2
 8003d58:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	88fa      	ldrh	r2, [r7, #6]
 8003d64:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2222      	movs	r2, #34	@ 0x22
 8003d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d78:	4a3e      	ldr	r2, [pc, #248]	@ (8003e74 <UART_Start_Receive_DMA+0x128>)
 8003d7a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d80:	4a3d      	ldr	r2, [pc, #244]	@ (8003e78 <UART_Start_Receive_DMA+0x12c>)
 8003d82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d88:	4a3c      	ldr	r2, [pc, #240]	@ (8003e7c <UART_Start_Receive_DMA+0x130>)
 8003d8a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d90:	2200      	movs	r2, #0
 8003d92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003d94:	f107 0308 	add.w	r3, r7, #8
 8003d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	f7fd feb4 	bl	8001b18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003db0:	2300      	movs	r3, #0
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d019      	beq.n	8003e02 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dee:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003df0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003df4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003df6:	e841 2300 	strex	r3, r2, [r1]
 8003dfa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e5      	bne.n	8003dce <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3314      	adds	r3, #20
 8003e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3314      	adds	r3, #20
 8003e20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e22:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003e24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003e28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e5      	bne.n	8003e02 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3314      	adds	r3, #20
 8003e3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	617b      	str	r3, [r7, #20]
   return(result);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3314      	adds	r3, #20
 8003e54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003e56:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6a39      	ldr	r1, [r7, #32]
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e5      	bne.n	8003e36 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3760      	adds	r7, #96	@ 0x60
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	08003b51 	.word	0x08003b51
 8003e78:	08003c7d 	.word	0x08003c7d
 8003e7c:	08003cb9 	.word	0x08003cb9

08003e80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	@ 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	e853 3f00 	ldrex	r3, [r3]
 8003e96:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	61ba      	str	r2, [r7, #24]
 8003eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	6979      	ldr	r1, [r7, #20]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e5      	bne.n	8003e88 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003ec4:	bf00      	nop
 8003ec6:	3724      	adds	r7, #36	@ 0x24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr

08003ece <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b095      	sub	sp, #84	@ 0x54
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ef6:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003efc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e5      	bne.n	8003ed6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3314      	adds	r3, #20
 8003f10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3314      	adds	r3, #20
 8003f28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e5      	bne.n	8003f0a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d119      	bne.n	8003f7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f023 0310 	bic.w	r3, r3, #16
 8003f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
 8003f64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f66:	61ba      	str	r2, [r7, #24]
 8003f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	6979      	ldr	r1, [r7, #20]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	613b      	str	r3, [r7, #16]
   return(result);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e5      	bne.n	8003f46 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f88:	bf00      	nop
 8003f8a:	3754      	adds	r7, #84	@ 0x54
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f7ff fdc6 	bl	8003b3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b085      	sub	sp, #20
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b21      	cmp	r3, #33	@ 0x21
 8003fcc:	d13e      	bne.n	800404c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fd6:	d114      	bne.n	8004002 <UART_Transmit_IT+0x48>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d110      	bne.n	8004002 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	1c9a      	adds	r2, r3, #2
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	621a      	str	r2, [r3, #32]
 8004000:	e008      	b.n	8004014 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	1c59      	adds	r1, r3, #1
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6211      	str	r1, [r2, #32]
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29b      	uxth	r3, r3
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	4619      	mov	r1, r3
 8004022:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10f      	bne.n	8004048 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004036:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004046:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	e000      	b.n	800404e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
  }
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800406e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff fd45 	bl	8003b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08c      	sub	sp, #48	@ 0x30
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b22      	cmp	r3, #34	@ 0x22
 800409a:	f040 80ae 	bne.w	80041fa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a6:	d117      	bne.n	80040d8 <UART_Receive_IT+0x50>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d113      	bne.n	80040d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d0:	1c9a      	adds	r2, r3, #2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80040d6:	e026      	b.n	8004126 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ea:	d007      	beq.n	80040fc <UART_Receive_IT+0x74>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <UART_Receive_IT+0x82>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	b2da      	uxtb	r2, r3
 8004104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e008      	b.n	800411c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004116:	b2da      	uxtb	r2, r3
 8004118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29b      	uxth	r3, r3
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	4619      	mov	r1, r3
 8004134:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004136:	2b00      	cmp	r3, #0
 8004138:	d15d      	bne.n	80041f6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0220 	bic.w	r2, r2, #32
 8004148:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004158:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695a      	ldr	r2, [r3, #20]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0201 	bic.w	r2, r2, #1
 8004168:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417c:	2b01      	cmp	r3, #1
 800417e:	d135      	bne.n	80041ec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	330c      	adds	r3, #12
 800418c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	613b      	str	r3, [r7, #16]
   return(result);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f023 0310 	bic.w	r3, r3, #16
 800419c:	627b      	str	r3, [r7, #36]	@ 0x24
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	330c      	adds	r3, #12
 80041a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a6:	623a      	str	r2, [r7, #32]
 80041a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	69f9      	ldr	r1, [r7, #28]
 80041ac:	6a3a      	ldr	r2, [r7, #32]
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e5      	bne.n	8004186 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d10a      	bne.n	80041de <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7fc fa2f 	bl	8000648 <HAL_UARTEx_RxEventCallback>
 80041ea:	e002      	b.n	80041f2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff fc94 	bl	8003b1a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e002      	b.n	80041fc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	e000      	b.n	80041fc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041fa:	2302      	movs	r3, #2
  }
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3730      	adds	r7, #48	@ 0x30
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800423e:	f023 030c 	bic.w	r3, r3, #12
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	430b      	orrs	r3, r1
 800424a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2c      	ldr	r2, [pc, #176]	@ (8004318 <UART_SetConfig+0x114>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d103      	bne.n	8004274 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800426c:	f7fe ff72 	bl	8003154 <HAL_RCC_GetPCLK2Freq>
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	e002      	b.n	800427a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004274:	f7fe ff5a 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 8004278:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	009a      	lsls	r2, r3, #2
 8004284:	441a      	add	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	4a22      	ldr	r2, [pc, #136]	@ (800431c <UART_SetConfig+0x118>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	0119      	lsls	r1, r3, #4
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	009a      	lsls	r2, r3, #2
 80042a4:	441a      	add	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80042b0:	4b1a      	ldr	r3, [pc, #104]	@ (800431c <UART_SetConfig+0x118>)
 80042b2:	fba3 0302 	umull	r0, r3, r3, r2
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	2064      	movs	r0, #100	@ 0x64
 80042ba:	fb00 f303 	mul.w	r3, r0, r3
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	3332      	adds	r3, #50	@ 0x32
 80042c4:	4a15      	ldr	r2, [pc, #84]	@ (800431c <UART_SetConfig+0x118>)
 80042c6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042d0:	4419      	add	r1, r3
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	009a      	lsls	r2, r3, #2
 80042dc:	441a      	add	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042e8:	4b0c      	ldr	r3, [pc, #48]	@ (800431c <UART_SetConfig+0x118>)
 80042ea:	fba3 0302 	umull	r0, r3, r3, r2
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2064      	movs	r0, #100	@ 0x64
 80042f2:	fb00 f303 	mul.w	r3, r0, r3
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	3332      	adds	r3, #50	@ 0x32
 80042fc:	4a07      	ldr	r2, [pc, #28]	@ (800431c <UART_SetConfig+0x118>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	f003 020f 	and.w	r2, r3, #15
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	440a      	add	r2, r1
 800430e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004310:	bf00      	nop
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40013800 	.word	0x40013800
 800431c:	51eb851f 	.word	0x51eb851f

08004320 <Flash_Read>:
 *      Author: CHINH
 */
#include "EEPROMx.h"

uint16_t Flash_Read(uint32_t Addr)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]

    return *(uint16_t *)(Addr);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	881b      	ldrh	r3, [r3, #0]

}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr

08004336 <Flash_ErasePage>:

HAL_StatusTypeDef Flash_ErasePage(uint8_t Page)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b088      	sub	sp, #32
 800433a:	af00      	add	r7, sp, #0
 800433c:	4603      	mov	r3, r0
 800433e:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	assert_param(IS_FLASH_ADDRESS(Page_Address));

	HAL_FLASH_Unlock();
 8004340:	f7fd fea2 	bl	8002088 <HAL_FLASH_Unlock>
    // Define the page and bank for the erase operation
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PageError = 0x0;
 8004344:	2300      	movs	r3, #0
 8004346:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.Banks = FLASH_BANK_1;
 800434c:	2301      	movs	r3, #1
 800434e:	613b      	str	r3, [r7, #16]
    EraseInitStruct.PageAddress =(FLASH_BASE + ((Page) * FLASH_PAGE_SIZE));
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8004356:	029b      	lsls	r3, r3, #10
 8004358:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbPages = 1;
 800435a:	2301      	movs	r3, #1
 800435c:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800435e:	f107 0208 	add.w	r2, r7, #8
 8004362:	f107 030c 	add.w	r3, r7, #12
 8004366:	4611      	mov	r1, r2
 8004368:	4618      	mov	r0, r3
 800436a:	f7fd ff75 	bl	8002258 <HAL_FLASHEx_Erase>
 800436e:	4603      	mov	r3, r0
 8004370:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 8004372:	f7fd feaf 	bl	80020d4 <HAL_FLASH_Lock>

  	return status;
 8004376:	7ffb      	ldrb	r3, [r7, #31]

}
 8004378:	4618      	mov	r0, r3
 800437a:	3720      	adds	r7, #32
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <Flash_Write>:




HAL_StatusTypeDef Flash_Write(uint32_t TypeProgram,uint32_t WriteAddr, uint16_t data)
{
 8004380:	b5b0      	push	{r4, r5, r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	4613      	mov	r3, r2
 800438c:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef state;

	assert_param((((WriteAddr) >= FLASH_START_ADDR) && ((WriteAddr) <= FLASH_END_ADDR)));

	HAL_FLASH_Unlock();
 800438e:	f7fd fe7b 	bl	8002088 <HAL_FLASH_Unlock>


	state = HAL_FLASH_Program(TypeProgram, WriteAddr,data);
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	2200      	movs	r2, #0
 8004396:	461c      	mov	r4, r3
 8004398:	4615      	mov	r5, r2
 800439a:	4622      	mov	r2, r4
 800439c:	462b      	mov	r3, r5
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f7fd fe01 	bl	8001fa8 <HAL_FLASH_Program>
 80043a6:	4603      	mov	r3, r0
 80043a8:	75fb      	strb	r3, [r7, #23]

    HAL_FLASH_Lock();
 80043aa:	f7fd fe93 	bl	80020d4 <HAL_FLASH_Lock>

    return state;
 80043ae:	7dfb      	ldrb	r3, [r7, #23]

}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bdb0      	pop	{r4, r5, r7, pc}

080043b8 <_ZN5Flags11TurnONFlagsEv>:
 */


#include "Flags.h"

void Flags::TurnONFlags(void) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
	#ifdef _Flag_500ms
		if ((HAL_GetTick() - StartTimer.t1s) >= 500) {
 80043c0:	f7fc fde0 	bl	8000f84 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80043d0:	4293      	cmp	r3, r2
 80043d2:	bf8c      	ite	hi
 80043d4:	2301      	movhi	r3, #1
 80043d6:	2300      	movls	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <_ZN5Flags11TurnONFlagsEv+0x36>
			Flag.t500ms = true;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	741a      	strb	r2, [r3, #16]
			StartTimer.t500ms =HAL_GetTick();
 80043e4:	f7fc fdce 	bl	8000f84 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	601a      	str	r2, [r3, #0]
		}
	#endif
    #ifdef _Flag_1s
        if ((HAL_GetTick() - StartTimer.t1s) >= 1000) {
 80043ee:	f7fc fdc9 	bl	8000f84 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80043fe:	4293      	cmp	r3, r2
 8004400:	bf8c      	ite	hi
 8004402:	2301      	movhi	r3, #1
 8004404:	2300      	movls	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <_ZN5Flags11TurnONFlagsEv+0x64>
            Flag.t1s = true;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	745a      	strb	r2, [r3, #17]
            StartTimer.t1s = HAL_GetTick();
 8004412:	f7fc fdb7 	bl	8000f84 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	605a      	str	r2, [r3, #4]
            Flag.t3s = true;
            StartTimer.t3s = HAL_GetTick();
        }
    #endif
    #ifdef _Flag_4s
        if ((HAL_GetTick() - StartTimer.t4s) >= 4000) {
 800441c:	f7fc fdb2 	bl	8000f84 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800442c:	4293      	cmp	r3, r2
 800442e:	bf8c      	ite	hi
 8004430:	2301      	movhi	r3, #1
 8004432:	2300      	movls	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <_ZN5Flags11TurnONFlagsEv+0x92>
            Flag.t4s = true;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	749a      	strb	r2, [r3, #18]
            StartTimer.t4s = HAL_GetTick();
 8004440:	f7fc fda0 	bl	8000f84 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	609a      	str	r2, [r3, #8]
        }
    #endif
	#ifdef _Flag_10s
		if ((HAL_GetTick() - StartTimer.t10s) >= 10000) {
 800444a:	f7fc fd9b 	bl	8000f84 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f242 720f 	movw	r2, #9999	@ 0x270f
 800445a:	4293      	cmp	r3, r2
 800445c:	bf8c      	ite	hi
 800445e:	2301      	movhi	r3, #1
 8004460:	2300      	movls	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d007      	beq.n	8004478 <_ZN5Flags11TurnONFlagsEv+0xc0>
			Flag.t10s = true;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	74da      	strb	r2, [r3, #19]
			StartTimer.t10s = HAL_GetTick();
 800446e:	f7fc fd89 	bl	8000f84 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	60da      	str	r2, [r3, #12]
		if ((HAL_GetTick() - StartTimer.t1m) >= 60000) {
			Flag.t1m = true;
			StartTimer.t1m = HAL_GetTick();
		}
	#endif
}
 8004478:	bf00      	nop
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <_ZN5Flags12TurnOFFFlagsEv>:



void Flags::TurnOFFFlags(void) {
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	#ifdef _Flag_500ms
		Flag.t500ms  =   false;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	741a      	strb	r2, [r3, #16]
	#endif
    #ifdef _Flag_1s
        Flag.t1s  =   false;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	745a      	strb	r2, [r3, #17]
    #endif
    #ifdef _Flag_3s
        Flag.t3s  =   false;
    #endif
    #ifdef _Flag_4s
        Flag.t4s  =   false;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	749a      	strb	r2, [r3, #18]
    #endif
	#ifdef _Flag_10s
		Flag.t10s  =   false;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	74da      	strb	r2, [r3, #19]
	#endif
	#ifdef _Flag_1m
		Flag.t1m  =   false;
	#endif

}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr
	...

080044ac <GPIOx_Init>:
#include "Gpiox.h"

void GPIOx_Init(GPIO_TypeDef *GPIOx,uint32_t Pin,uint32_t Mode,uint32_t Pull,uint32_t Speed){
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
		//clock enable
		if(GPIOx==GPIOA) RCC->APB2ENR |=(1<<2);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4a39      	ldr	r2, [pc, #228]	@ (80045a4 <GPIOx_Init+0xf8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d106      	bne.n	80044d0 <GPIOx_Init+0x24>
 80044c2:	4b39      	ldr	r3, [pc, #228]	@ (80045a8 <GPIOx_Init+0xfc>)
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	4a38      	ldr	r2, [pc, #224]	@ (80045a8 <GPIOx_Init+0xfc>)
 80044c8:	f043 0304 	orr.w	r3, r3, #4
 80044cc:	6193      	str	r3, [r2, #24]
 80044ce:	e014      	b.n	80044fa <GPIOx_Init+0x4e>
		else if(GPIOx==GPIOB) RCC->APB2ENR |=(1<<3);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a36      	ldr	r2, [pc, #216]	@ (80045ac <GPIOx_Init+0x100>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d106      	bne.n	80044e6 <GPIOx_Init+0x3a>
 80044d8:	4b33      	ldr	r3, [pc, #204]	@ (80045a8 <GPIOx_Init+0xfc>)
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	4a32      	ldr	r2, [pc, #200]	@ (80045a8 <GPIOx_Init+0xfc>)
 80044de:	f043 0308 	orr.w	r3, r3, #8
 80044e2:	6193      	str	r3, [r2, #24]
 80044e4:	e009      	b.n	80044fa <GPIOx_Init+0x4e>
		else if(GPIOx==GPIOC) RCC->APB2ENR |=(1<<4);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a31      	ldr	r2, [pc, #196]	@ (80045b0 <GPIOx_Init+0x104>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d105      	bne.n	80044fa <GPIOx_Init+0x4e>
 80044ee:	4b2e      	ldr	r3, [pc, #184]	@ (80045a8 <GPIOx_Init+0xfc>)
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	4a2d      	ldr	r2, [pc, #180]	@ (80045a8 <GPIOx_Init+0xfc>)
 80044f4:	f043 0310 	orr.w	r3, r3, #16
 80044f8:	6193      	str	r3, [r2, #24]


		if(Pin<8){
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b07      	cmp	r3, #7
 80044fe:	d818      	bhi.n	8004532 <GPIOx_Init+0x86>
			GPIOx->CRL&=~(0xF<<(Pin*4));
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	0092      	lsls	r2, r2, #2
 8004508:	210f      	movs	r1, #15
 800450a:	fa01 f202 	lsl.w	r2, r1, r2
 800450e:	43d2      	mvns	r2, r2
 8004510:	401a      	ands	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	601a      	str	r2, [r3, #0]
			GPIOx->CRL|=((Mode<<2)+Speed)<<(Pin*4);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	0099      	lsls	r1, r3, #2
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	4419      	add	r1, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	fa01 f303 	lsl.w	r3, r1, r3
 800452a:	431a      	orrs	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	e019      	b.n	8004566 <GPIOx_Init+0xba>
		}
		else{
			GPIOx->CRH&=~(0xF<<((Pin-8)*4));
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	3a08      	subs	r2, #8
 800453a:	0092      	lsls	r2, r2, #2
 800453c:	210f      	movs	r1, #15
 800453e:	fa01 f202 	lsl.w	r2, r1, r2
 8004542:	43d2      	mvns	r2, r2
 8004544:	401a      	ands	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	605a      	str	r2, [r3, #4]
			GPIOx->CRH|=((Mode<<2)+Speed)<<((Pin-8)*4);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	0099      	lsls	r1, r3, #2
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	4419      	add	r1, r3
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	3b08      	subs	r3, #8
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	fa01 f303 	lsl.w	r3, r1, r3
 8004560:	431a      	orrs	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	605a      	str	r2, [r3, #4]
		}
		if(Pull==PU) GPIOx->ODR |=(1<<Pin);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d109      	bne.n	8004580 <GPIOx_Init+0xd4>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2101      	movs	r1, #1
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	fa01 f202 	lsl.w	r2, r1, r2
 8004578:	431a      	orrs	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	60da      	str	r2, [r3, #12]
		else if (Pull==PD) GPIOx->ODR &=~(1<<Pin);
}
 800457e:	e00c      	b.n	800459a <GPIOx_Init+0xee>
		else if (Pull==PD) GPIOx->ODR &=~(1<<Pin);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d109      	bne.n	800459a <GPIOx_Init+0xee>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	2101      	movs	r1, #1
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	fa01 f202 	lsl.w	r2, r1, r2
 8004592:	43d2      	mvns	r2, r2
 8004594:	401a      	ands	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	60da      	str	r2, [r3, #12]
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr
 80045a4:	40010800 	.word	0x40010800
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40010c00 	.word	0x40010c00
 80045b0:	40011000 	.word	0x40011000

080045b4 <_ZN12Modbus_SlaveC1Ev>:
#define ILLEGAL_DATA_VALUE     0x03

#define ADD_Flash_Slave_ID 0x0801FCF0


Modbus_Slave::Modbus_Slave(){
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &=~(1<<11);
 80045bc:	4b15      	ldr	r3, [pc, #84]	@ (8004614 <_ZN12Modbus_SlaveC1Ev+0x60>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4a14      	ldr	r2, [pc, #80]	@ (8004614 <_ZN12Modbus_SlaveC1Ev+0x60>)
 80045c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045c6:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR &=~(1<<12);
 80045c8:	4b12      	ldr	r3, [pc, #72]	@ (8004614 <_ZN12Modbus_SlaveC1Ev+0x60>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a11      	ldr	r2, [pc, #68]	@ (8004614 <_ZN12Modbus_SlaveC1Ev+0x60>)
 80045ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045d2:	60d3      	str	r3, [r2, #12]
	this->Slave_id_to_Eeprom=Flash_Read(ADD_Flash_Slave_ID);
 80045d4:	4810      	ldr	r0, [pc, #64]	@ (8004618 <_ZN12Modbus_SlaveC1Ev+0x64>)
 80045d6:	f7ff fea3 	bl	8004320 <Flash_Read>
 80045da:	4603      	mov	r3, r0
 80045dc:	461a      	mov	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	801a      	strh	r2, [r3, #0]
	if ((this->Slave_id_to_Eeprom<255)&&(this->Slave_id_to_Eeprom >0)) this->Slave_id=this->Slave_id_to_Eeprom;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	2bfe      	cmp	r3, #254	@ 0xfe
 80045e8:	d809      	bhi.n	80045fe <_ZN12Modbus_SlaveC1Ev+0x4a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <_ZN12Modbus_SlaveC1Ev+0x4a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	709a      	strb	r2, [r3, #2]
 80045fc:	e005      	b.n	800460a <_ZN12Modbus_SlaveC1Ev+0x56>
	else{
		this->Slave_id=0x01;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	709a      	strb	r2, [r3, #2]
		this->Slave_id_to_Eeprom=0x01;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	801a      	strh	r2, [r3, #0]
	}

}
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4618      	mov	r0, r3
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40010800 	.word	0x40010800
 8004618:	0801fcf0 	.word	0x0801fcf0

0800461c <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh>:
void Modbus_Slave::USARTx_PutS_Size(USART_TypeDef *USARTx, uint8_t *data,uint8_t size){
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	70fb      	strb	r3, [r7, #3]
	uint32_t timeout=0;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
	for (uint8_t i=0;i<size;++i){
 800462e:	2300      	movs	r3, #0
 8004630:	74fb      	strb	r3, [r7, #19]
 8004632:	e01e      	b.n	8004672 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x56>
		while(!(USARTx->SR & (1<<7))){++timeout; if (timeout==0xFFFFFFF) return;};
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	3301      	adds	r3, #1
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8004640:	4293      	cmp	r3, r2
 8004642:	d02f      	beq.n	80046a4 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x88>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1ec      	bne.n	8004634 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x18>
		USARTx->DR =data[i];
 800465a:	7cfb      	ldrb	r3, [r7, #19]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	4413      	add	r3, r2
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	605a      	str	r2, [r3, #4]
		timeout=0;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
	for (uint8_t i=0;i<size;++i){
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	3301      	adds	r3, #1
 8004670:	74fb      	strb	r3, [r7, #19]
 8004672:	7cfa      	ldrb	r2, [r7, #19]
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	429a      	cmp	r2, r3
 8004678:	d3e4      	bcc.n	8004644 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x28>
	}
	while(!(USARTx->SR & (1<<6))) {++timeout; if (timeout==0xFFFF) return;}
 800467a:	e007      	b.n	800468c <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x70>
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	3301      	adds	r3, #1
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004688:	4293      	cmp	r3, r2
 800468a:	d00d      	beq.n	80046a8 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x8c>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1ec      	bne.n	800467c <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x60>
 80046a2:	e002      	b.n	80046aa <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x8e>
		while(!(USARTx->SR & (1<<7))){++timeout; if (timeout==0xFFFFFFF) return;};
 80046a4:	bf00      	nop
 80046a6:	e000      	b.n	80046aa <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x8e>
	while(!(USARTx->SR & (1<<6))) {++timeout; if (timeout==0xFFFF) return;}
 80046a8:	bf00      	nop
}
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr

080046b2 <_Z5CRC16Pht>:


uint16_t CRC16 (uint8_t *nData, uint16_t wLength)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	460b      	mov	r3, r1
 80046bc:	807b      	strh	r3, [r7, #2]
    uint16_t temp, flag;
    temp = 0xFFFF;
 80046be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046c2:	81fb      	strh	r3, [r7, #14]
    for (uint16_t  i = 0; i < wLength; i++)
 80046c4:	2300      	movs	r3, #0
 80046c6:	81bb      	strh	r3, [r7, #12]
 80046c8:	e024      	b.n	8004714 <_Z5CRC16Pht+0x62>
    {
        temp = temp ^ nData[i];
 80046ca:	89bb      	ldrh	r3, [r7, #12]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	4413      	add	r3, r2
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	89fb      	ldrh	r3, [r7, #14]
 80046d6:	4053      	eors	r3, r2
 80046d8:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 1; j <= 8; j++)
 80046da:	2301      	movs	r3, #1
 80046dc:	72fb      	strb	r3, [r7, #11]
 80046de:	e013      	b.n	8004708 <_Z5CRC16Pht+0x56>
        {
            flag = temp & 0x0001;
 80046e0:	89fb      	ldrh	r3, [r7, #14]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	813b      	strh	r3, [r7, #8]
            temp >>=1;
 80046e8:	89fb      	ldrh	r3, [r7, #14]
 80046ea:	085b      	lsrs	r3, r3, #1
 80046ec:	81fb      	strh	r3, [r7, #14]
            if (flag)
 80046ee:	893b      	ldrh	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d006      	beq.n	8004702 <_Z5CRC16Pht+0x50>
                temp ^= 0xA001;
 80046f4:	89fb      	ldrh	r3, [r7, #14]
 80046f6:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 80046fa:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 80046fe:	43db      	mvns	r3, r3
 8004700:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 1; j <= 8; j++)
 8004702:	7afb      	ldrb	r3, [r7, #11]
 8004704:	3301      	adds	r3, #1
 8004706:	72fb      	strb	r3, [r7, #11]
 8004708:	7afb      	ldrb	r3, [r7, #11]
 800470a:	2b08      	cmp	r3, #8
 800470c:	d9e8      	bls.n	80046e0 <_Z5CRC16Pht+0x2e>
    for (uint16_t  i = 0; i < wLength; i++)
 800470e:	89bb      	ldrh	r3, [r7, #12]
 8004710:	3301      	adds	r3, #1
 8004712:	81bb      	strh	r3, [r7, #12]
 8004714:	89ba      	ldrh	r2, [r7, #12]
 8004716:	887b      	ldrh	r3, [r7, #2]
 8004718:	429a      	cmp	r2, r3
 800471a:	d3d6      	bcc.n	80046ca <_Z5CRC16Pht+0x18>
        }
    }
    temp &= 0xFFFF;
    return temp;
 800471c:	89fb      	ldrh	r3, [r7, #14]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr

08004728 <_ZN12Modbus_Slave8sendDataEPhi>:

void Modbus_Slave::sendData(uint8_t *data, int size)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
	// we will calculate the CRC in this function itself
	uint16_t crc = CRC16(data, size);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	b29b      	uxth	r3, r3
 8004738:	4619      	mov	r1, r3
 800473a:	68b8      	ldr	r0, [r7, #8]
 800473c:	f7ff ffb9 	bl	80046b2 <_Z5CRC16Pht>
 8004740:	4603      	mov	r3, r0
 8004742:	82fb      	strh	r3, [r7, #22]
	data[size] = crc&0xFF;   // CRC LOW
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	4413      	add	r3, r2
 800474a:	8afa      	ldrh	r2, [r7, #22]
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8004750:	8afb      	ldrh	r3, [r7, #22]
 8004752:	0a1b      	lsrs	r3, r3, #8
 8004754:	b299      	uxth	r1, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3301      	adds	r3, #1
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	4413      	add	r3, r2
 800475e:	b2ca      	uxtb	r2, r1
 8004760:	701a      	strb	r2, [r3, #0]
	GPIOA->ODR |=(1<<11);
 8004762:	4b12      	ldr	r3, [pc, #72]	@ (80047ac <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	4a11      	ldr	r2, [pc, #68]	@ (80047ac <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8004768:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800476c:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR |=(1<<12);
 800476e:	4b0f      	ldr	r3, [pc, #60]	@ (80047ac <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	4a0e      	ldr	r2, [pc, #56]	@ (80047ac <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8004774:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004778:	60d3      	str	r3, [r2, #12]
	USARTx_PutS_Size(USART1,data,size+2);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	3302      	adds	r3, #2
 8004780:	b2db      	uxtb	r3, r3
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	490a      	ldr	r1, [pc, #40]	@ (80047b0 <_ZN12Modbus_Slave8sendDataEPhi+0x88>)
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7ff ff48 	bl	800461c <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh>
	GPIOA->ODR &=~(1<<11);
 800478c:	4b07      	ldr	r3, [pc, #28]	@ (80047ac <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4a06      	ldr	r2, [pc, #24]	@ (80047ac <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8004792:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004796:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR &=~(1<<12);
 8004798:	4b04      	ldr	r3, [pc, #16]	@ (80047ac <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4a03      	ldr	r2, [pc, #12]	@ (80047ac <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 800479e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047a2:	60d3      	str	r3, [r2, #12]
}
 80047a4:	bf00      	nop
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40010800 	.word	0x40010800
 80047b0:	40013800 	.word	0x40013800

080047b4 <_ZN12Modbus_Slave15modbusExceptionEh>:

void Modbus_Slave::modbusException (uint8_t exceptioncode)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	70fb      	strb	r3, [r7, #3]
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	this->TxData[0] = this->RxData[0];       // slave ID
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	78da      	ldrb	r2, [r3, #3]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	74da      	strb	r2, [r3, #19]
	this->TxData[1] = this->RxData[1]|0x80;  // adding 1 to the MSB of the function code
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	791b      	ldrb	r3, [r3, #4]
 80047cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	751a      	strb	r2, [r3, #20]
	this->TxData[2] = exceptioncode;   // Load the Exception code
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	78fa      	ldrb	r2, [r7, #3]
 80047da:	755a      	strb	r2, [r3, #21]
	sendData(this->TxData, 3);         // send Data... CRC will be calculated in the function
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3313      	adds	r3, #19
 80047e0:	2203      	movs	r2, #3
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff ff9f 	bl	8004728 <_ZN12Modbus_Slave8sendDataEPhi>
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef>:


//10 not function expected
uint8_t Modbus_Slave::Check_Buffer(USART_TypeDef *USARTx){
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
	uint8_t status=0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	73fb      	strb	r3, [r7, #15]
		if (this->RxData[0] == this->Slave_id){
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	78da      	ldrb	r2, [r3, #3]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	789b      	ldrb	r3, [r3, #2]
 8004808:	429a      	cmp	r2, r3
 800480a:	d117      	bne.n	800483c <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x4a>
			switch (this->RxData[1]){
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	791b      	ldrb	r3, [r3, #4]
 8004810:	2b06      	cmp	r3, #6
 8004812:	d00e      	beq.n	8004832 <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x40>
 8004814:	2b06      	cmp	r3, #6
 8004816:	dc10      	bgt.n	800483a <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x48>
 8004818:	2b03      	cmp	r3, #3
 800481a:	d002      	beq.n	8004822 <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x30>
 800481c:	2b04      	cmp	r3, #4
 800481e:	d004      	beq.n	800482a <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x38>
				break;
			case 0x06:
				WriteIDRegs_FC6();
				break;
			default:
				break;
 8004820:	e00b      	b.n	800483a <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x48>
				readHoldingRegs();
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f896 	bl	8004954 <_ZN12Modbus_Slave15readHoldingRegsEv>
				break;
 8004828:	e008      	b.n	800483c <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x4a>
				readInputRegs_FC4();
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f80c 	bl	8004848 <_ZN12Modbus_Slave17readInputRegs_FC4Ev>
				break;
 8004830:	e004      	b.n	800483c <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x4a>
				WriteIDRegs_FC6();
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f898 	bl	8004968 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev>
				break;
 8004838:	e000      	b.n	800483c <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x4a>
				break;
 800483a:	bf00      	nop
			}
	}
	return status;
 800483c:	7bfb      	ldrb	r3, [r7, #15]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <_ZN12Modbus_Slave17readInputRegs_FC4Ev>:

uint8_t Modbus_Slave::readInputRegs_FC4 (void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	uint16_t startAddr = ((this->RxData[2]<<8)|this->RxData[3]);  // start Register Address
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	795b      	ldrb	r3, [r3, #5]
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	b21a      	sxth	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	799b      	ldrb	r3, [r3, #6]
 800485c:	b21b      	sxth	r3, r3
 800485e:	4313      	orrs	r3, r2
 8004860:	b21b      	sxth	r3, r3
 8004862:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((this->RxData[4]<<8)|this->RxData[5]);   // number to registers master has requested
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	79db      	ldrb	r3, [r3, #7]
 8004868:	021b      	lsls	r3, r3, #8
 800486a:	b21a      	sxth	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	7a1b      	ldrb	r3, [r3, #8]
 8004870:	b21b      	sxth	r3, r3
 8004872:	4313      	orrs	r3, r2
 8004874:	b21b      	sxth	r3, r3
 8004876:	817b      	strh	r3, [r7, #10]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8004878:	897b      	ldrh	r3, [r7, #10]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x3c>
 800487e:	897b      	ldrh	r3, [r7, #10]
 8004880:	2b7d      	cmp	r3, #125	@ 0x7d
 8004882:	d905      	bls.n	8004890 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x48>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8004884:	2103      	movs	r1, #3
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ff94 	bl	80047b4 <_ZN12Modbus_Slave15modbusExceptionEh>
		return 0;
 800488c:	2300      	movs	r3, #0
 800488e:	e05b      	b.n	8004948 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x100>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8004890:	8afa      	ldrh	r2, [r7, #22]
 8004892:	897b      	ldrh	r3, [r7, #10]
 8004894:	4413      	add	r3, r2
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	813b      	strh	r3, [r7, #8]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 800489c:	893b      	ldrh	r3, [r7, #8]
 800489e:	2b31      	cmp	r3, #49	@ 0x31
 80048a0:	d905      	bls.n	80048ae <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x66>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80048a2:	2102      	movs	r1, #2
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff ff85 	bl	80047b4 <_ZN12Modbus_Slave15modbusExceptionEh>
		return 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e04c      	b.n	8004948 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x100>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	this->TxData[0] = this->Slave_id;  // slave ID
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	789a      	ldrb	r2, [r3, #2]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	74da      	strb	r2, [r3, #19]
	this->TxData[1] = this->RxData[1];  // function code
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	791a      	ldrb	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	751a      	strb	r2, [r3, #20]
	this->TxData[2] = numRegs*2;  // Byte count
 80048be:	897b      	ldrh	r3, [r7, #10]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	755a      	strb	r2, [r3, #21]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 80048ca:	2303      	movs	r3, #3
 80048cc:	613b      	str	r3, [r7, #16]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	e01f      	b.n	8004914 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0xcc>
	{
		this->TxData[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 80048d4:	8afb      	ldrh	r3, [r7, #22]
 80048d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004950 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x108>)
 80048d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048dc:	0a1b      	lsrs	r3, r3, #8
 80048de:	b299      	uxth	r1, r3
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	613a      	str	r2, [r7, #16]
 80048e6:	b2c9      	uxtb	r1, r1
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	4413      	add	r3, r2
 80048ec:	460a      	mov	r2, r1
 80048ee:	74da      	strb	r2, [r3, #19]
		this->TxData[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 80048f0:	8afb      	ldrh	r3, [r7, #22]
 80048f2:	4a17      	ldr	r2, [pc, #92]	@ (8004950 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x108>)
 80048f4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	613a      	str	r2, [r7, #16]
 80048fe:	b2c9      	uxtb	r1, r1
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	4413      	add	r3, r2
 8004904:	460a      	mov	r2, r1
 8004906:	74da      	strb	r2, [r3, #19]
		startAddr++;  // increment the register address
 8004908:	8afb      	ldrh	r3, [r7, #22]
 800490a:	3301      	adds	r3, #1
 800490c:	82fb      	strh	r3, [r7, #22]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3301      	adds	r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	897b      	ldrh	r3, [r7, #10]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	429a      	cmp	r2, r3
 800491a:	dbdb      	blt.n	80048d4 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x8c>
	}

	sendData(this->TxData, indx);  // send data... CRC will be calculated in the function itself
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3313      	adds	r3, #19
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4619      	mov	r1, r3
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff feff 	bl	8004728 <_ZN12Modbus_Slave8sendDataEPhi>
	memset(RxData, 0, sizeof(Buffer_Size_Rx_Modbus));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3303      	adds	r3, #3
 800492e:	2204      	movs	r2, #4
 8004930:	2100      	movs	r1, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fb5c 	bl	8004ff0 <memset>
	memset(TxData, 0, sizeof(Buffer_Size_Tx_Modbus));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3313      	adds	r3, #19
 800493c:	2204      	movs	r2, #4
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fb55 	bl	8004ff0 <memset>
	return 1;   // success
 8004946:	2301      	movs	r3, #1
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	080050a0 	.word	0x080050a0

08004954 <_ZN12Modbus_Slave15readHoldingRegsEv>:

uint8_t Modbus_Slave::readHoldingRegs(){
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
	return 1;
 800495c:	2301      	movs	r3, #1
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr

08004968 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev>:


// address = 0x01
uint8_t Modbus_Slave::WriteIDRegs_FC6(){
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	uint16_t address=((this->RxData[2]<<8)|this->RxData[3]);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	795b      	ldrb	r3, [r3, #5]
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	b21a      	sxth	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	799b      	ldrb	r3, [r3, #6]
 800497c:	b21b      	sxth	r3, r3
 800497e:	4313      	orrs	r3, r2
 8004980:	b21b      	sxth	r3, r3
 8004982:	81bb      	strh	r3, [r7, #12]
	uint16_t data=((this->RxData[4]<<8)|this->RxData[5]);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	79db      	ldrb	r3, [r3, #7]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	b21a      	sxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	7a1b      	ldrb	r3, [r3, #8]
 8004990:	b21b      	sxth	r3, r3
 8004992:	4313      	orrs	r3, r2
 8004994:	b21b      	sxth	r3, r3
 8004996:	817b      	strh	r3, [r7, #10]
	if (address!=0x01)
 8004998:	89bb      	ldrh	r3, [r7, #12]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d005      	beq.n	80049aa <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0x42>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);
 800499e:	2102      	movs	r1, #2
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff ff07 	bl	80047b4 <_ZN12Modbus_Slave15modbusExceptionEh>
		return 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	e036      	b.n	8004a18 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0xb0>
	}
	if ((data ==0) || (data >247)){
 80049aa:	897b      	ldrh	r3, [r7, #10]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0x4e>
 80049b0:	897b      	ldrh	r3, [r7, #10]
 80049b2:	2bf7      	cmp	r3, #247	@ 0xf7
 80049b4:	d905      	bls.n	80049c2 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0x5a>
		modbusException(ILLEGAL_DATA_VALUE);
 80049b6:	2103      	movs	r1, #3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff fefb 	bl	80047b4 <_ZN12Modbus_Slave15modbusExceptionEh>
		return 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	e02a      	b.n	8004a18 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0xb0>
	}
	this->Slave_id_to_Eeprom=data;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	897a      	ldrh	r2, [r7, #10]
 80049c6:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<6;++i){
 80049c8:	2300      	movs	r3, #0
 80049ca:	73fb      	strb	r3, [r7, #15]
 80049cc:	e00b      	b.n	80049e6 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0x7e>
		this->TxData[i]=this->RxData[i];
 80049ce:	7bfa      	ldrb	r2, [r7, #15]
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	440a      	add	r2, r1
 80049d6:	78d1      	ldrb	r1, [r2, #3]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	4413      	add	r3, r2
 80049dc:	460a      	mov	r2, r1
 80049de:	74da      	strb	r2, [r3, #19]
	for(uint8_t i=0;i<6;++i){
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	3301      	adds	r3, #1
 80049e4:	73fb      	strb	r3, [r7, #15]
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b05      	cmp	r3, #5
 80049ea:	d9f0      	bls.n	80049ce <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0x66>
	}
	sendData(this->TxData,6);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3313      	adds	r3, #19
 80049f0:	2206      	movs	r2, #6
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff fe97 	bl	8004728 <_ZN12Modbus_Slave8sendDataEPhi>
	memset(RxData, 0, sizeof(Buffer_Size_Rx_Modbus));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3303      	adds	r3, #3
 80049fe:	2204      	movs	r2, #4
 8004a00:	2100      	movs	r1, #0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 faf4 	bl	8004ff0 <memset>
	memset(TxData, 0, sizeof(Buffer_Size_Tx_Modbus));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3313      	adds	r3, #19
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 faed 	bl	8004ff0 <memset>
	return 1;
 8004a16:	2301      	movs	r3, #1
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <_ZN6HT1621C1Ev>:
#define WR0 (GPIOC->BSRR = (1 << (14 + 16)))
#define DATA1 (GPIOC->BSRR = (1 << 13))
#define DATA0 (GPIOC->BSRR = (1 << (13 + 16)))


HT1621::HT1621(){
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	6078      	str	r0, [r7, #4]
	GPIOx_Init(GPIOC, 13,OUTPUT_PP,NOPULL,MODE_OUTPUT_50MHZ);
 8004a28:	2303      	movs	r3, #3
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	2200      	movs	r2, #0
 8004a30:	210d      	movs	r1, #13
 8004a32:	481b      	ldr	r0, [pc, #108]	@ (8004aa0 <_ZN6HT1621C1Ev+0x80>)
 8004a34:	f7ff fd3a 	bl	80044ac <GPIOx_Init>
	GPIOx_Init(GPIOC, 14,OUTPUT_PP,NOPULL,MODE_OUTPUT_50MHZ);
 8004a38:	2303      	movs	r3, #3
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2200      	movs	r2, #0
 8004a40:	210e      	movs	r1, #14
 8004a42:	4817      	ldr	r0, [pc, #92]	@ (8004aa0 <_ZN6HT1621C1Ev+0x80>)
 8004a44:	f7ff fd32 	bl	80044ac <GPIOx_Init>
	GPIOx_Init(GPIOC, 15,OUTPUT_PP,NOPULL,MODE_OUTPUT_50MHZ);
 8004a48:	2303      	movs	r3, #3
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	2200      	movs	r2, #0
 8004a50:	210f      	movs	r1, #15
 8004a52:	4813      	ldr	r0, [pc, #76]	@ (8004aa0 <_ZN6HT1621C1Ev+0x80>)
 8004a54:	f7ff fd2a 	bl	80044ac <GPIOx_Init>
	wrCmd(BIAS);
 8004a58:	2152      	movs	r1, #82	@ 0x52
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f84c 	bl	8004af8 <_ZN6HT16215wrCmdEh>
	wrCmd(RC256);
 8004a60:	2130      	movs	r1, #48	@ 0x30
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f848 	bl	8004af8 <_ZN6HT16215wrCmdEh>
	wrCmd(SYSDIS);
 8004a68:	2100      	movs	r1, #0
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f844 	bl	8004af8 <_ZN6HT16215wrCmdEh>
	wrCmd(WDTDIS1);
 8004a70:	210a      	movs	r1, #10
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f840 	bl	8004af8 <_ZN6HT16215wrCmdEh>
	wrCmd(SYSEN);
 8004a78:	2102      	movs	r1, #2
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f83c 	bl	8004af8 <_ZN6HT16215wrCmdEh>
	wrCmd(LCDON);
 8004a80:	2106      	movs	r1, #6
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f838 	bl	8004af8 <_ZN6HT16215wrCmdEh>

	clearAll();
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f8a3 	bl	8004bd4 <_ZN6HT16218clearAllEv>
	ValuesConstructor();
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8bd 	bl	8004c0e <_ZN6HT162117ValuesConstructorEv>
}
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40011000 	.word	0x40011000

08004aa4 <_ZN6HT16217wrBytesEhh>:

void HT1621::wrBytes(uint8_t addr,uint8_t sdata){
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	70fb      	strb	r3, [r7, #3]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	70bb      	strb	r3, [r7, #2]
	  addr<<=2;
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	70fb      	strb	r3, [r7, #3]
	  CS0;
 8004aba:	4b0e      	ldr	r3, [pc, #56]	@ (8004af4 <_ZN6HT16217wrBytesEhh+0x50>)
 8004abc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004ac0:	611a      	str	r2, [r3, #16]
	  sendBits(0xa0,3);     //Write following to data memory
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	21a0      	movs	r1, #160	@ 0xa0
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f836 	bl	8004b38 <_ZN6HT16218sendBitsEhh>
	  sendBits(addr,6);     // at address addr
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	2206      	movs	r2, #6
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f830 	bl	8004b38 <_ZN6HT16218sendBitsEhh>
	  sendBits(sdata,8);    // this is the data to be written.
 8004ad8:	78bb      	ldrb	r3, [r7, #2]
 8004ada:	2208      	movs	r2, #8
 8004adc:	4619      	mov	r1, r3
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f82a 	bl	8004b38 <_ZN6HT16218sendBitsEhh>
	  CS1;
 8004ae4:	4b03      	ldr	r3, [pc, #12]	@ (8004af4 <_ZN6HT16217wrBytesEhh+0x50>)
 8004ae6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004aea:	611a      	str	r2, [r3, #16]
}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40011000 	.word	0x40011000

08004af8 <_ZN6HT16215wrCmdEh>:




void HT1621::wrCmd(uint8_t cmd){
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	70fb      	strb	r3, [r7, #3]
	  CS0;
 8004b04:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <_ZN6HT16215wrCmdEh+0x3c>)
 8004b06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004b0a:	611a      	str	r2, [r3, #16]
	  sendBits(0x80,4);
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	2180      	movs	r1, #128	@ 0x80
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f811 	bl	8004b38 <_ZN6HT16218sendBitsEhh>
	  sendBits(cmd,8);
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	2208      	movs	r2, #8
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f80b 	bl	8004b38 <_ZN6HT16218sendBitsEhh>
	  CS1;
 8004b22:	4b04      	ldr	r3, [pc, #16]	@ (8004b34 <_ZN6HT16215wrCmdEh+0x3c>)
 8004b24:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004b28:	611a      	str	r2, [r3, #16]
}
 8004b2a:	bf00      	nop
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40011000 	.word	0x40011000

08004b38 <_ZN6HT16218sendBitsEhh>:
		 		      HAL_Delay(1000);
		 		      clearAll();
		 		}
}

void HT1621::sendBits(uint8_t sdata,uint8_t size){
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	70fb      	strb	r3, [r7, #3]
 8004b44:	4613      	mov	r3, r2
 8004b46:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for (i=0;i<size;i++){
 8004b48:	2300      	movs	r3, #0
 8004b4a:	73fb      	strb	r3, [r7, #15]
 8004b4c:	e01a      	b.n	8004b84 <_ZN6HT16218sendBitsEhh+0x4c>
		WR0;
 8004b4e:	4b12      	ldr	r3, [pc, #72]	@ (8004b98 <_ZN6HT16218sendBitsEhh+0x60>)
 8004b50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004b54:	611a      	str	r2, [r3, #16]
		//delay_us(1);
		if (sdata & 0x80) DATA1;
 8004b56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	da04      	bge.n	8004b68 <_ZN6HT16218sendBitsEhh+0x30>
 8004b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b98 <_ZN6HT16218sendBitsEhh+0x60>)
 8004b60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b64:	611a      	str	r2, [r3, #16]
 8004b66:	e003      	b.n	8004b70 <_ZN6HT16218sendBitsEhh+0x38>
		else DATA0;
 8004b68:	4b0b      	ldr	r3, [pc, #44]	@ (8004b98 <_ZN6HT16218sendBitsEhh+0x60>)
 8004b6a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004b6e:	611a      	str	r2, [r3, #16]
		//delay_us(1);
		WR1;
 8004b70:	4b09      	ldr	r3, [pc, #36]	@ (8004b98 <_ZN6HT16218sendBitsEhh+0x60>)
 8004b72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004b76:	611a      	str	r2, [r3, #16]
		//delay_us(1);
		sdata <<= 1;
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	70fb      	strb	r3, [r7, #3]
	for (i=0;i<size;i++){
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	3301      	adds	r3, #1
 8004b82:	73fb      	strb	r3, [r7, #15]
 8004b84:	7bfa      	ldrb	r2, [r7, #15]
 8004b86:	78bb      	ldrb	r3, [r7, #2]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d3e0      	bcc.n	8004b4e <_ZN6HT16218sendBitsEhh+0x16>
	}
}
 8004b8c:	bf00      	nop
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr
 8004b98:	40011000 	.word	0x40011000

08004b9c <_ZN6HT16219displayOnEv>:

void HT1621::displayOn()
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	wrBytes(0x0E,0x01<<3);
 8004ba4:	2208      	movs	r2, #8
 8004ba6:	210e      	movs	r1, #14
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff ff7b 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
	wrBytes(0x30,0x8C);
 8004bae:	228c      	movs	r2, #140	@ 0x8c
 8004bb0:	2130      	movs	r1, #48	@ 0x30
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff ff76 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
	wrBytes(0x0A,0x01);
 8004bb8:	2201      	movs	r2, #1
 8004bba:	210a      	movs	r1, #10
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff ff71 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
	wrBytes(0x0E,0x80);
 8004bc2:	2280      	movs	r2, #128	@ 0x80
 8004bc4:	210e      	movs	r1, #14
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff ff6c 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
	//wrBytes(0x18,0x80);
	//wrBytes(0x06,0x10);


}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <_ZN6HT16218clearAllEv>:


void HT1621::clearAll(){
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	uint8_t addr=0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i=0;i<32;++i){
 8004be0:	2300      	movs	r3, #0
 8004be2:	73bb      	strb	r3, [r7, #14]
 8004be4:	e00b      	b.n	8004bfe <_ZN6HT16218clearAllEv+0x2a>
		  wrBytes(addr,0x00);
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	2200      	movs	r2, #0
 8004bea:	4619      	mov	r1, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff ff59 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
	      addr+=2;
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
 8004bf4:	3302      	adds	r3, #2
 8004bf6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i=0;i<32;++i){
 8004bf8:	7bbb      	ldrb	r3, [r7, #14]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	73bb      	strb	r3, [r7, #14]
 8004bfe:	7bbb      	ldrb	r3, [r7, #14]
 8004c00:	2b1f      	cmp	r3, #31
 8004c02:	d9f0      	bls.n	8004be6 <_ZN6HT16218clearAllEv+0x12>
	}
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <_ZN6HT162117ValuesConstructorEv>:

void HT1621::ValuesConstructor(){
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  this->HT1621_data.map2[0]= 0x5F;  //'0'
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	225f      	movs	r2, #95	@ 0x5f
 8004c1a:	731a      	strb	r2, [r3, #12]
  this->HT1621_data.map2[1]= 0x06;  //'1'
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2206      	movs	r2, #6
 8004c20:	735a      	strb	r2, [r3, #13]
  this->HT1621_data.map2[2]= 0x6B;  //'2'
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	226b      	movs	r2, #107	@ 0x6b
 8004c26:	739a      	strb	r2, [r3, #14]
  this->HT1621_data.map2[3]= 0x2F;  //'3'
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	222f      	movs	r2, #47	@ 0x2f
 8004c2c:	73da      	strb	r2, [r3, #15]
  this->HT1621_data.map2[4]= 0x36;  //'4'
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2236      	movs	r2, #54	@ 0x36
 8004c32:	741a      	strb	r2, [r3, #16]
  this->HT1621_data.map2[5]= 0x3D;  //'5'
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	223d      	movs	r2, #61	@ 0x3d
 8004c38:	745a      	strb	r2, [r3, #17]
  this->HT1621_data.map2[6]= 0x7D;  //'6'
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	227d      	movs	r2, #125	@ 0x7d
 8004c3e:	749a      	strb	r2, [r3, #18]
  this->HT1621_data.map2[7]= 0x27;  //'7'
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2227      	movs	r2, #39	@ 0x27
 8004c44:	74da      	strb	r2, [r3, #19]
  this->HT1621_data.map2[8]= 0x7F;  //'8'
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	227f      	movs	r2, #127	@ 0x7f
 8004c4a:	751a      	strb	r2, [r3, #20]
  this->HT1621_data.map2[9]= 0x3F;  //'9'
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	223f      	movs	r2, #63	@ 0x3f
 8004c50:	755a      	strb	r2, [r3, #21]


  this->HT1621_data.map1[0]= 0xAF;  //'0'
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	22af      	movs	r2, #175	@ 0xaf
 8004c56:	709a      	strb	r2, [r3, #2]
  this->HT1621_data.map1[1]= 0x06;  //'1'
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2206      	movs	r2, #6
 8004c5c:	70da      	strb	r2, [r3, #3]
  this->HT1621_data.map1[2]= 0x6D;  //'2'
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	226d      	movs	r2, #109	@ 0x6d
 8004c62:	711a      	strb	r2, [r3, #4]
  this->HT1621_data.map1[3]= 0x4F;  //'3'
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	224f      	movs	r2, #79	@ 0x4f
 8004c68:	715a      	strb	r2, [r3, #5]
  this->HT1621_data.map1[4]= 0xC6;  //'4'
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	22c6      	movs	r2, #198	@ 0xc6
 8004c6e:	719a      	strb	r2, [r3, #6]
  this->HT1621_data.map1[5]= 0xCB;  //'5'
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	22cb      	movs	r2, #203	@ 0xcb
 8004c74:	71da      	strb	r2, [r3, #7]
  this->HT1621_data.map1[6]= 0xEB;  //'6'
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	22eb      	movs	r2, #235	@ 0xeb
 8004c7a:	721a      	strb	r2, [r3, #8]
  this->HT1621_data.map1[7]= 0x4E;  //'7'
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	224e      	movs	r2, #78	@ 0x4e
 8004c80:	725a      	strb	r2, [r3, #9]
  this->HT1621_data.map1[8]= 0xEF;  //'8'
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	22ef      	movs	r2, #239	@ 0xef
 8004c86:	729a      	strb	r2, [r3, #10]
  this->HT1621_data.map1[9]= 0xCF;  //'9'
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	22cf      	movs	r2, #207	@ 0xcf
 8004c8c:	72da      	strb	r2, [r3, #11]

  this->HT1621_data.map[0]= 0x20;  //'-'
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	701a      	strb	r2, [r3, #0]
  this->HT1621_data.map[1]= 0x00;  //' '
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	705a      	strb	r2, [r3, #1]

  this->HT1621_data.digit[0]=0x00;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	759a      	strb	r2, [r3, #22]
  this->HT1621_data.digit[1]=0x00;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	75da      	strb	r2, [r3, #23]
  this->HT1621_data.digit[2]=0x00;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	761a      	strb	r2, [r3, #24]
  this->HT1621_data.digit[3]=0x00;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	765a      	strb	r2, [r3, #25]
  this->HT1621_data.digit[4]=0x00;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	769a      	strb	r2, [r3, #26]
  this->HT1621_data.digit[5]=0x00;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	76da      	strb	r2, [r3, #27]
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr

08004cc8 <_ZN6HT16217ConvertEhhh>:
//convert -> blacking -> refresh.

void HT1621::Convert(uint8_t a,uint8_t line,uint8_t tmp){
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	70fb      	strb	r3, [r7, #3]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	70bb      	strb	r3, [r7, #2]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	707b      	strb	r3, [r7, #1]
		for (uint8_t i=0;i<5;++i) {
			this->HT1621_data.digit[i] =this->HT1621_data.map[10];
		}
		return;
	}
    for(Current_Digit = tmp;a>0; ++Current_Digit){
 8004ce2:	787b      	ldrb	r3, [r7, #1]
 8004ce4:	73fb      	strb	r3, [r7, #15]
 8004ce6:	e034      	b.n	8004d52 <_ZN6HT16217ConvertEhhh+0x8a>
      if (line==1) this->HT1621_data.digit[Current_Digit]=this->HT1621_data.map1[a%10];
 8004ce8:	78bb      	ldrb	r3, [r7, #2]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d114      	bne.n	8004d18 <_ZN6HT16217ConvertEhhh+0x50>
 8004cee:	78fa      	ldrb	r2, [r7, #3]
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d60 <_ZN6HT16217ConvertEhhh+0x98>)
 8004cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf6:	08d9      	lsrs	r1, r3, #3
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	4619      	mov	r1, r3
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	7891      	ldrb	r1, [r2, #2]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	4413      	add	r3, r2
 8004d12:	460a      	mov	r2, r1
 8004d14:	759a      	strb	r2, [r3, #22]
 8004d16:	e013      	b.n	8004d40 <_ZN6HT16217ConvertEhhh+0x78>
      else this->HT1621_data.digit[Current_Digit]=this->HT1621_data.map2[a%10];
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	4b11      	ldr	r3, [pc, #68]	@ (8004d60 <_ZN6HT16217ConvertEhhh+0x98>)
 8004d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d20:	08d9      	lsrs	r1, r3, #3
 8004d22:	460b      	mov	r3, r1
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	4619      	mov	r1, r3
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	440a      	add	r2, r1
 8004d36:	7b11      	ldrb	r1, [r2, #12]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	460a      	mov	r2, r1
 8004d3e:	759a      	strb	r2, [r3, #22]
      a/=10;
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	4a07      	ldr	r2, [pc, #28]	@ (8004d60 <_ZN6HT16217ConvertEhhh+0x98>)
 8004d44:	fba2 2303 	umull	r2, r3, r2, r3
 8004d48:	08db      	lsrs	r3, r3, #3
 8004d4a:	70fb      	strb	r3, [r7, #3]
    for(Current_Digit = tmp;a>0; ++Current_Digit){
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1c7      	bne.n	8004ce8 <_ZN6HT16217ConvertEhhh+0x20>
    }
}
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr
 8004d60:	cccccccd 	.word	0xcccccccd

08004d64 <_ZN6HT162117Write_Float_LinexEfh>:


void HT1621::Write_Float_Linex(float a,uint8_t line){
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	71fb      	strb	r3, [r7, #7]
	uint8_t h1[4]={0x08,0x06,0x04,0x02};
 8004d72:	4b5e      	ldr	r3, [pc, #376]	@ (8004eec <_ZN6HT162117Write_Float_LinexEfh+0x188>)
 8004d74:	617b      	str	r3, [r7, #20]
	uint8_t h2[4]={0x1A,0x18,0x16,0x14};
 8004d76:	4b5e      	ldr	r3, [pc, #376]	@ (8004ef0 <_ZN6HT162117Write_Float_LinexEfh+0x18c>)
 8004d78:	613b      	str	r3, [r7, #16]
	for (uint8_t i=0;i<6;++i) this->HT1621_data.digit[i]=0x00;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e007      	b.n	8004d90 <_ZN6HT162117Write_Float_LinexEfh+0x2c>
 8004d80:	7ffb      	ldrb	r3, [r7, #31]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	2200      	movs	r2, #0
 8004d88:	759a      	strb	r2, [r3, #22]
 8004d8a:	7ffb      	ldrb	r3, [r7, #31]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	77fb      	strb	r3, [r7, #31]
 8004d90:	7ffb      	ldrb	r3, [r7, #31]
 8004d92:	2b05      	cmp	r3, #5
 8004d94:	d9f4      	bls.n	8004d80 <_ZN6HT162117Write_Float_LinexEfh+0x1c>
	if (line ==1 ) {
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d113      	bne.n	8004dc4 <_ZN6HT162117Write_Float_LinexEfh+0x60>
		for (uint8_t i=0;i<4;++i) wrBytes(h1[i],0x00);
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	77bb      	strb	r3, [r7, #30]
 8004da0:	e00c      	b.n	8004dbc <_ZN6HT162117Write_Float_LinexEfh+0x58>
 8004da2:	7fbb      	ldrb	r3, [r7, #30]
 8004da4:	3320      	adds	r3, #32
 8004da6:	443b      	add	r3, r7
 8004da8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	4619      	mov	r1, r3
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff fe77 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
 8004db6:	7fbb      	ldrb	r3, [r7, #30]
 8004db8:	3301      	adds	r3, #1
 8004dba:	77bb      	strb	r3, [r7, #30]
 8004dbc:	7fbb      	ldrb	r3, [r7, #30]
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	d9ef      	bls.n	8004da2 <_ZN6HT162117Write_Float_LinexEfh+0x3e>
 8004dc2:	e012      	b.n	8004dea <_ZN6HT162117Write_Float_LinexEfh+0x86>
	}
	else {
		for (uint8_t i=0;i<4;++i) wrBytes(h2[i],0x00);
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	777b      	strb	r3, [r7, #29]
 8004dc8:	e00c      	b.n	8004de4 <_ZN6HT162117Write_Float_LinexEfh+0x80>
 8004dca:	7f7b      	ldrb	r3, [r7, #29]
 8004dcc:	3320      	adds	r3, #32
 8004dce:	443b      	add	r3, r7
 8004dd0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f7ff fe63 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
 8004dde:	7f7b      	ldrb	r3, [r7, #29]
 8004de0:	3301      	adds	r3, #1
 8004de2:	777b      	strb	r3, [r7, #29]
 8004de4:	7f7b      	ldrb	r3, [r7, #29]
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d9ef      	bls.n	8004dca <_ZN6HT162117Write_Float_LinexEfh+0x66>
	}

	uint8_t x=(a-(uint8_t)a)*10;
 8004dea:	68b8      	ldr	r0, [r7, #8]
 8004dec:	f7fb fc0c 	bl	8000608 <__aeabi_f2uiz>
 8004df0:	4603      	mov	r3, r0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fb fa63 	bl	80002c0 <__aeabi_i2f>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	68b8      	ldr	r0, [r7, #8]
 8004e00:	f7fb f9a8 	bl	8000154 <__aeabi_fsub>
 8004e04:	4603      	mov	r3, r0
 8004e06:	493b      	ldr	r1, [pc, #236]	@ (8004ef4 <_ZN6HT162117Write_Float_LinexEfh+0x190>)
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fb faad 	bl	8000368 <__aeabi_fmul>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fb fbf9 	bl	8000608 <__aeabi_f2uiz>
 8004e16:	4603      	mov	r3, r0
 8004e18:	76fb      	strb	r3, [r7, #27]
	if (line==1){
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d106      	bne.n	8004e2e <_ZN6HT162117Write_Float_LinexEfh+0xca>
		this->HT1621_data.digit[0]=this->HT1621_data.map1[x];
 8004e20:	7efb      	ldrb	r3, [r7, #27]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4413      	add	r3, r2
 8004e26:	789a      	ldrb	r2, [r3, #2]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	759a      	strb	r2, [r3, #22]
 8004e2c:	e005      	b.n	8004e3a <_ZN6HT162117Write_Float_LinexEfh+0xd6>
	}
	else {
		this->HT1621_data.digit[0]=this->HT1621_data.map2[x];
 8004e2e:	7efb      	ldrb	r3, [r7, #27]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	7b1a      	ldrb	r2, [r3, #12]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	759a      	strb	r2, [r3, #22]
	}
	Convert((uint8_t)a,line,1);
 8004e3a:	68b8      	ldr	r0, [r7, #8]
 8004e3c:	f7fb fbe4 	bl	8000608 <__aeabi_f2uiz>
 8004e40:	4603      	mov	r3, r0
 8004e42:	b2d9      	uxtb	r1, r3
 8004e44:	79fa      	ldrb	r2, [r7, #7]
 8004e46:	2301      	movs	r3, #1
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f7ff ff3d 	bl	8004cc8 <_ZN6HT16217ConvertEhhh>
	for(uint8_t i=0;this->HT1621_data.digit[i]!=0x00;++i){
 8004e4e:	2300      	movs	r3, #0
 8004e50:	773b      	strb	r3, [r7, #28]
 8004e52:	e03f      	b.n	8004ed4 <_ZN6HT162117Write_Float_LinexEfh+0x170>
		if (i==1) {
 8004e54:	7f3b      	ldrb	r3, [r7, #28]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d11b      	bne.n	8004e92 <_ZN6HT162117Write_Float_LinexEfh+0x12e>
			if (line==1){
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d10c      	bne.n	8004e7a <_ZN6HT162117Write_Float_LinexEfh+0x116>
				this->HT1621_data.digit[i] |= 0x10;
 8004e60:	7f3b      	ldrb	r3, [r7, #28]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	7d9a      	ldrb	r2, [r3, #22]
 8004e68:	7f3b      	ldrb	r3, [r7, #28]
 8004e6a:	f042 0210 	orr.w	r2, r2, #16
 8004e6e:	b2d1      	uxtb	r1, r2
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	460a      	mov	r2, r1
 8004e76:	759a      	strb	r2, [r3, #22]
 8004e78:	e00b      	b.n	8004e92 <_ZN6HT162117Write_Float_LinexEfh+0x12e>
			}
			else {
				this->HT1621_data.digit[i] |= 0x80;
 8004e7a:	7f3b      	ldrb	r3, [r7, #28]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	7d9a      	ldrb	r2, [r3, #22]
 8004e82:	7f3b      	ldrb	r3, [r7, #28]
 8004e84:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e88:	b2d1      	uxtb	r1, r2
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	460a      	mov	r2, r1
 8004e90:	759a      	strb	r2, [r3, #22]
			}
		}
		if (line==1){
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d10d      	bne.n	8004eb4 <_ZN6HT162117Write_Float_LinexEfh+0x150>
			wrBytes(h1[i],this->HT1621_data.digit[i]);
 8004e98:	7f3b      	ldrb	r3, [r7, #28]
 8004e9a:	3320      	adds	r3, #32
 8004e9c:	443b      	add	r3, r7
 8004e9e:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8004ea2:	7f3b      	ldrb	r3, [r7, #28]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	7d9b      	ldrb	r3, [r3, #22]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f7ff fdf9 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
 8004eb2:	e00c      	b.n	8004ece <_ZN6HT162117Write_Float_LinexEfh+0x16a>
		}
		else {
			wrBytes(h2[i],this->HT1621_data.digit[i]);
 8004eb4:	7f3b      	ldrb	r3, [r7, #28]
 8004eb6:	3320      	adds	r3, #32
 8004eb8:	443b      	add	r3, r7
 8004eba:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8004ebe:	7f3b      	ldrb	r3, [r7, #28]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	7d9b      	ldrb	r3, [r3, #22]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7ff fdeb 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
	for(uint8_t i=0;this->HT1621_data.digit[i]!=0x00;++i){
 8004ece:	7f3b      	ldrb	r3, [r7, #28]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	773b      	strb	r3, [r7, #28]
 8004ed4:	7f3b      	ldrb	r3, [r7, #28]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4413      	add	r3, r2
 8004eda:	7d9b      	ldrb	r3, [r3, #22]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1b9      	bne.n	8004e54 <_ZN6HT162117Write_Float_LinexEfh+0xf0>
		}

	}
}
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	3720      	adds	r7, #32
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	02040608 	.word	0x02040608
 8004ef0:	1416181a 	.word	0x1416181a
 8004ef4:	41200000 	.word	0x41200000

08004ef8 <_ZN6HT16218Write_IdEh>:


void HT1621::Write_Id(uint8_t a){
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	70fb      	strb	r3, [r7, #3]
	uint8_t h1[4]={0x08,0x06,0x04,0x02};
 8004f04:	4b38      	ldr	r3, [pc, #224]	@ (8004fe8 <_ZN6HT16218Write_IdEh+0xf0>)
 8004f06:	613b      	str	r3, [r7, #16]
	uint8_t h2[4]={0x1A,0x18,0x16,0x14};
 8004f08:	4b38      	ldr	r3, [pc, #224]	@ (8004fec <_ZN6HT16218Write_IdEh+0xf4>)
 8004f0a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0;i<6;++i) this->HT1621_data.digit[i]=0x00;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	75fb      	strb	r3, [r7, #23]
 8004f10:	e007      	b.n	8004f22 <_ZN6HT16218Write_IdEh+0x2a>
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	4413      	add	r3, r2
 8004f18:	2200      	movs	r2, #0
 8004f1a:	759a      	strb	r2, [r3, #22]
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
 8004f24:	2b05      	cmp	r3, #5
 8004f26:	d9f4      	bls.n	8004f12 <_ZN6HT16218Write_IdEh+0x1a>
	for (uint8_t i=0;i<4;++i) wrBytes(h1[i],0x00);
 8004f28:	2300      	movs	r3, #0
 8004f2a:	75bb      	strb	r3, [r7, #22]
 8004f2c:	e00c      	b.n	8004f48 <_ZN6HT16218Write_IdEh+0x50>
 8004f2e:	7dbb      	ldrb	r3, [r7, #22]
 8004f30:	3318      	adds	r3, #24
 8004f32:	443b      	add	r3, r7
 8004f34:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fdb1 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
 8004f42:	7dbb      	ldrb	r3, [r7, #22]
 8004f44:	3301      	adds	r3, #1
 8004f46:	75bb      	strb	r3, [r7, #22]
 8004f48:	7dbb      	ldrb	r3, [r7, #22]
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d9ef      	bls.n	8004f2e <_ZN6HT16218Write_IdEh+0x36>
	for (uint8_t i=0;i<4;++i) wrBytes(h2[i],0x00);
 8004f4e:	2300      	movs	r3, #0
 8004f50:	757b      	strb	r3, [r7, #21]
 8004f52:	e00c      	b.n	8004f6e <_ZN6HT16218Write_IdEh+0x76>
 8004f54:	7d7b      	ldrb	r3, [r7, #21]
 8004f56:	3318      	adds	r3, #24
 8004f58:	443b      	add	r3, r7
 8004f5a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fd9e 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
 8004f68:	7d7b      	ldrb	r3, [r7, #21]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	757b      	strb	r3, [r7, #21]
 8004f6e:	7d7b      	ldrb	r3, [r7, #21]
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d9ef      	bls.n	8004f54 <_ZN6HT16218Write_IdEh+0x5c>
	/////phu

	wrBytes(16,0x0C);
 8004f74:	220c      	movs	r2, #12
 8004f76:	2110      	movs	r1, #16
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7ff fd93 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
	wrBytes(14,0x80);
 8004f7e:	2280      	movs	r2, #128	@ 0x80
 8004f80:	210e      	movs	r1, #14
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff fd8e 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
	wrBytes(h1[3],0x06);
 8004f88:	7cfb      	ldrb	r3, [r7, #19]
 8004f8a:	2206      	movs	r2, #6
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff fd88 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
	wrBytes(h1[2],0x67);
 8004f94:	7cbb      	ldrb	r3, [r7, #18]
 8004f96:	2267      	movs	r2, #103	@ 0x67
 8004f98:	4619      	mov	r1, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff fd82 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
	/////////////////////
	Convert((uint8_t)a,2,0);
 8004fa0:	78f9      	ldrb	r1, [r7, #3]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff fe8e 	bl	8004cc8 <_ZN6HT16217ConvertEhhh>
	for(uint8_t i=0;this->HT1621_data.digit[i]!=0x00;++i){
 8004fac:	2300      	movs	r3, #0
 8004fae:	753b      	strb	r3, [r7, #20]
 8004fb0:	e00f      	b.n	8004fd2 <_ZN6HT16218Write_IdEh+0xda>
		wrBytes(h2[i],this->HT1621_data.digit[i]);
 8004fb2:	7d3b      	ldrb	r3, [r7, #20]
 8004fb4:	3318      	adds	r3, #24
 8004fb6:	443b      	add	r3, r7
 8004fb8:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8004fbc:	7d3b      	ldrb	r3, [r7, #20]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	7d9b      	ldrb	r3, [r3, #22]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff fd6c 	bl	8004aa4 <_ZN6HT16217wrBytesEhh>
	for(uint8_t i=0;this->HT1621_data.digit[i]!=0x00;++i){
 8004fcc:	7d3b      	ldrb	r3, [r7, #20]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	753b      	strb	r3, [r7, #20]
 8004fd2:	7d3b      	ldrb	r3, [r7, #20]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	7d9b      	ldrb	r3, [r3, #22]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e9      	bne.n	8004fb2 <_ZN6HT16218Write_IdEh+0xba>
	}
}
 8004fde:	bf00      	nop
 8004fe0:	bf00      	nop
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	02040608 	.word	0x02040608
 8004fec:	1416181a 	.word	0x1416181a

08004ff0 <memset>:
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4402      	add	r2, r0
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d100      	bne.n	8004ffa <memset+0xa>
 8004ff8:	4770      	bx	lr
 8004ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8004ffe:	e7f9      	b.n	8004ff4 <memset+0x4>

08005000 <__libc_init_array>:
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	2600      	movs	r6, #0
 8005004:	4d0c      	ldr	r5, [pc, #48]	@ (8005038 <__libc_init_array+0x38>)
 8005006:	4c0d      	ldr	r4, [pc, #52]	@ (800503c <__libc_init_array+0x3c>)
 8005008:	1b64      	subs	r4, r4, r5
 800500a:	10a4      	asrs	r4, r4, #2
 800500c:	42a6      	cmp	r6, r4
 800500e:	d109      	bne.n	8005024 <__libc_init_array+0x24>
 8005010:	f000 f81a 	bl	8005048 <_init>
 8005014:	2600      	movs	r6, #0
 8005016:	4d0a      	ldr	r5, [pc, #40]	@ (8005040 <__libc_init_array+0x40>)
 8005018:	4c0a      	ldr	r4, [pc, #40]	@ (8005044 <__libc_init_array+0x44>)
 800501a:	1b64      	subs	r4, r4, r5
 800501c:	10a4      	asrs	r4, r4, #2
 800501e:	42a6      	cmp	r6, r4
 8005020:	d105      	bne.n	800502e <__libc_init_array+0x2e>
 8005022:	bd70      	pop	{r4, r5, r6, pc}
 8005024:	f855 3b04 	ldr.w	r3, [r5], #4
 8005028:	4798      	blx	r3
 800502a:	3601      	adds	r6, #1
 800502c:	e7ee      	b.n	800500c <__libc_init_array+0xc>
 800502e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005032:	4798      	blx	r3
 8005034:	3601      	adds	r6, #1
 8005036:	e7f2      	b.n	800501e <__libc_init_array+0x1e>
 8005038:	08005104 	.word	0x08005104
 800503c:	08005104 	.word	0x08005104
 8005040:	08005104 	.word	0x08005104
 8005044:	0800510c 	.word	0x0800510c

08005048 <_init>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	bf00      	nop
 800504c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504e:	bc08      	pop	{r3}
 8005050:	469e      	mov	lr, r3
 8005052:	4770      	bx	lr

08005054 <_fini>:
 8005054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005056:	bf00      	nop
 8005058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505a:	bc08      	pop	{r3}
 800505c:	469e      	mov	lr, r3
 800505e:	4770      	bx	lr
