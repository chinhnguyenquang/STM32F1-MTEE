
Project_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005990  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005a9c  08005a9c  00006a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b8c  08005b8c  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005b8c  08005b8c  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b8c  08005b8c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005b8c  08005b8c  00006b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b94  08005b94  00006b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005b98  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000010  08005ba8  00007010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08005ba8  00007310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f403  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003094  00000000  00000000  0001643c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  000194d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa1  00000000  00000000  0001a290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a808  00000000  00000000  0001ad31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015345  00000000  00000000  00035539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa51  00000000  00000000  0004a87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d52cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036c8  00000000  00000000  000d5314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000d89dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08005a84 	.word	0x08005a84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08005a84 	.word	0x08005a84

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <HAL_UARTEx_RxEventCallback>:




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0b      	ldr	r2, [pc, #44]	@ (8000688 <HAL_UARTEx_RxEventCallback+0x40>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d110      	bne.n	8000680 <HAL_UARTEx_RxEventCallback+0x38>
	{
		_Modbus_Slave.Check_Buffer(USART1);
 800065e:	490a      	ldr	r1, [pc, #40]	@ (8000688 <HAL_UARTEx_RxEventCallback+0x40>)
 8000660:	480a      	ldr	r0, [pc, #40]	@ (800068c <HAL_UARTEx_RxEventCallback+0x44>)
 8000662:	f004 fcbe 	bl	8004fe2 <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef>
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) _Modbus_Slave.RxData, 10);
 8000666:	220a      	movs	r2, #10
 8000668:	4909      	ldr	r1, [pc, #36]	@ (8000690 <HAL_UARTEx_RxEventCallback+0x48>)
 800066a:	480a      	ldr	r0, [pc, #40]	@ (8000694 <HAL_UARTEx_RxEventCallback+0x4c>)
 800066c:	f003 fb58 	bl	8003d20 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000670:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <HAL_UARTEx_RxEventCallback+0x50>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <HAL_UARTEx_RxEventCallback+0x50>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f022 0204 	bic.w	r2, r2, #4
 800067e:	601a      	str	r2, [r3, #0]

	}


}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40013800 	.word	0x40013800
 800068c:	20000048 	.word	0x20000048
 8000690:	2000004b 	.word	0x2000004b
 8000694:	20000258 	.word	0x20000258
 8000698:	200002a0 	.word	0x200002a0

0800069c <HAL_GPIO_EXTI_Callback>:



uint32_t cur_time_ext=0,pre_time_ext=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
 /* Prevent unused argument(s) compilation warning */
 UNUSED(GPIO_Pin);
 	 cur_time_ext=HAL_GetTick();
 80006a6:	f000 fcf5 	bl	8001094 <HAL_GetTick>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a0e      	ldr	r2, [pc, #56]	@ (80006e8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80006ae:	6013      	str	r3, [r2, #0]
	 if ((GPIO_Pin==GPIO_PIN_5)||(cur_time_ext-pre_time_ext>10)){
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	2b20      	cmp	r3, #32
 80006b4:	d006      	beq.n	80006c4 <HAL_GPIO_EXTI_Callback+0x28>
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <HAL_GPIO_EXTI_Callback+0x50>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	2b0a      	cmp	r3, #10
 80006c2:	d90c      	bls.n	80006de <HAL_GPIO_EXTI_Callback+0x42>
		 Status_stm32=(Status_stm32==NORMAL)?SLAVE_ID:NORMAL;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <HAL_GPIO_EXTI_Callback+0x54>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	bf14      	ite	ne
 80006cc:	2301      	movne	r3, #1
 80006ce:	2300      	moveq	r3, #0
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <HAL_GPIO_EXTI_Callback+0x54>)
 80006d6:	701a      	strb	r2, [r3, #0]
		 Status_initial_LCD=true;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <HAL_GPIO_EXTI_Callback+0x58>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
	 }
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000184 	.word	0x20000184
 80006ec:	20000188 	.word	0x20000188
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000001 	.word	0x20000001

080006f8 <Tacvu_HIENTHI>:





void Tacvu_HIENTHI(void){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	id=_Modbus_Slave.Slave_id_to_Eeprom;
 80006fc:	4b13      	ldr	r3, [pc, #76]	@ (800074c <Tacvu_HIENTHI+0x54>)
 80006fe:	881a      	ldrh	r2, [r3, #0]
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <Tacvu_HIENTHI+0x58>)
 8000702:	801a      	strh	r2, [r3, #0]
	if (Status_stm32==NORMAL){
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <Tacvu_HIENTHI+0x5c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d114      	bne.n	8000736 <Tacvu_HIENTHI+0x3e>
		_Ht621b.clearAll();
 800070c:	4812      	ldr	r0, [pc, #72]	@ (8000758 <Tacvu_HIENTHI+0x60>)
 800070e:	f004 ff7f 	bl	8005610 <_ZN6HT16218clearAllEv>
		_Ht621b.displayOn();
 8000712:	4811      	ldr	r0, [pc, #68]	@ (8000758 <Tacvu_HIENTHI+0x60>)
 8000714:	f004 ff60 	bl	80055d8 <_ZN6HT16219displayOnEv>
		_Ht621b.Write_Float_Linex(temperature_Sm9541_cur,2);
 8000718:	4b10      	ldr	r3, [pc, #64]	@ (800075c <Tacvu_HIENTHI+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2202      	movs	r2, #2
 800071e:	4619      	mov	r1, r3
 8000720:	480d      	ldr	r0, [pc, #52]	@ (8000758 <Tacvu_HIENTHI+0x60>)
 8000722:	f005 f83d 	bl	80057a0 <_ZN6HT162117Write_Float_LinexEfh>
		_Ht621b.Write_Float_Linex(pressure_Sm9541_cur,1);
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <Tacvu_HIENTHI+0x68>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2201      	movs	r2, #1
 800072c:	4619      	mov	r1, r3
 800072e:	480a      	ldr	r0, [pc, #40]	@ (8000758 <Tacvu_HIENTHI+0x60>)
 8000730:	f005 f836 	bl	80057a0 <_ZN6HT162117Write_Float_LinexEfh>
		_Ht621b.clearAll();
		_Ht621b.Write_Id(_Modbus_Slave.Slave_id);


	}
}
 8000734:	e008      	b.n	8000748 <Tacvu_HIENTHI+0x50>
		_Ht621b.clearAll();
 8000736:	4808      	ldr	r0, [pc, #32]	@ (8000758 <Tacvu_HIENTHI+0x60>)
 8000738:	f004 ff6a 	bl	8005610 <_ZN6HT16218clearAllEv>
		_Ht621b.Write_Id(_Modbus_Slave.Slave_id);
 800073c:	4b03      	ldr	r3, [pc, #12]	@ (800074c <Tacvu_HIENTHI+0x54>)
 800073e:	789b      	ldrb	r3, [r3, #2]
 8000740:	4619      	mov	r1, r3
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <Tacvu_HIENTHI+0x60>)
 8000744:	f005 f8f6 	bl	8005934 <_ZN6HT16218Write_IdEh>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000048 	.word	0x20000048
 8000750:	2000018c 	.word	0x2000018c
 8000754:	20000000 	.word	0x20000000
 8000758:	2000002c 	.word	0x2000002c
 800075c:	20000178 	.word	0x20000178
 8000760:	2000017c 	.word	0x2000017c

08000764 <_Z20ThucThiTacVuTheoFlagv>:


extern Switch_Range Status_Switch_Cur;
/////         THUC THI TAC VU THEO FLAG //////////
void ThucThiTacVuTheoFlag(){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	if (_Flags.Flag.t500ms){

	}
    if (_Flags.Flag.t1s) {
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <_Z20ThucThiTacVuTheoFlagv+0x8c>)
 800076a:	7c5b      	ldrb	r3, [r3, #17]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d01d      	beq.n	80007ac <_Z20ThucThiTacVuTheoFlagv+0x48>
    	Status_Current_Switch(); //UPDATE CURRENT SWITCH
 8000770:	f004 fe26 	bl	80053c0 <Status_Current_Switch>
    	if (Status_Switch_Cur.response==1){
 8000774:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <_Z20ThucThiTacVuTheoFlagv+0x90>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d117      	bne.n	80007ac <_Z20ThucThiTacVuTheoFlagv+0x48>
    		p_sensor_range();
 800077c:	f004 fd48 	bl	8005210 <p_sensor_range>
        	if (Get_Tempe_Press(&temperature_Sm9541, &pressure_Sm9541)){
 8000780:	491d      	ldr	r1, [pc, #116]	@ (80007f8 <_Z20ThucThiTacVuTheoFlagv+0x94>)
 8000782:	481e      	ldr	r0, [pc, #120]	@ (80007fc <_Z20ThucThiTacVuTheoFlagv+0x98>)
 8000784:	f004 fd96 	bl	80052b4 <Get_Tempe_Press>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf14      	ite	ne
 800078e:	2301      	movne	r3, #1
 8000790:	2300      	moveq	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d007      	beq.n	80007a8 <_Z20ThucThiTacVuTheoFlagv+0x44>
        		temperature_Sm9541_cur=temperature_Sm9541,
 8000798:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <_Z20ThucThiTacVuTheoFlagv+0x98>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a18      	ldr	r2, [pc, #96]	@ (8000800 <_Z20ThucThiTacVuTheoFlagv+0x9c>)
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <_Z20ThucThiTacVuTheoFlagv+0x94>)
 80007a2:	681b      	ldr	r3, [r3, #0]
        		pressure_Sm9541_cur=pressure_Sm9541;
 80007a4:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <_Z20ThucThiTacVuTheoFlagv+0xa0>)
 80007a6:	6013      	str	r3, [r2, #0]
        	}
        	Tacvu_HIENTHI();
 80007a8:	f7ff ffa6 	bl	80006f8 <Tacvu_HIENTHI>
    	}

    }
    if (_Flags.Flag.t4s){
 80007ac:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <_Z20ThucThiTacVuTheoFlagv+0x8c>)
 80007ae:	7c9b      	ldrb	r3, [r3, #18]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d01b      	beq.n	80007ec <_Z20ThucThiTacVuTheoFlagv+0x88>
    	if (Status_Switch_Cur.response==4){
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <_Z20ThucThiTacVuTheoFlagv+0x90>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	d117      	bne.n	80007ec <_Z20ThucThiTacVuTheoFlagv+0x88>
    		p_sensor_range();
 80007bc:	f004 fd28 	bl	8005210 <p_sensor_range>
        	if (Get_Tempe_Press(&temperature_Sm9541, &pressure_Sm9541)){
 80007c0:	490d      	ldr	r1, [pc, #52]	@ (80007f8 <_Z20ThucThiTacVuTheoFlagv+0x94>)
 80007c2:	480e      	ldr	r0, [pc, #56]	@ (80007fc <_Z20ThucThiTacVuTheoFlagv+0x98>)
 80007c4:	f004 fd76 	bl	80052b4 <Get_Tempe_Press>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bf14      	ite	ne
 80007ce:	2301      	movne	r3, #1
 80007d0:	2300      	moveq	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d007      	beq.n	80007e8 <_Z20ThucThiTacVuTheoFlagv+0x84>
        		temperature_Sm9541_cur=temperature_Sm9541,
 80007d8:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <_Z20ThucThiTacVuTheoFlagv+0x98>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a08      	ldr	r2, [pc, #32]	@ (8000800 <_Z20ThucThiTacVuTheoFlagv+0x9c>)
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <_Z20ThucThiTacVuTheoFlagv+0x94>)
 80007e2:	681b      	ldr	r3, [r3, #0]
        		pressure_Sm9541_cur=pressure_Sm9541;
 80007e4:	4a07      	ldr	r2, [pc, #28]	@ (8000804 <_Z20ThucThiTacVuTheoFlagv+0xa0>)
 80007e6:	6013      	str	r3, [r2, #0]
        	}
        	Tacvu_HIENTHI();
 80007e8:	f7ff ff86 	bl	80006f8 <Tacvu_HIENTHI>
    	}
    }
    if (_Flags.Flag.t10s){

    }
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000015c 	.word	0x2000015c
 80007f4:	2000030c 	.word	0x2000030c
 80007f8:	20000174 	.word	0x20000174
 80007fc:	20000170 	.word	0x20000170
 8000800:	20000178 	.word	0x20000178
 8000804:	2000017c 	.word	0x2000017c

08000808 <Check_Slaveid>:


#define ADD_Flash_Slave_ID 0x0801FCF0
///////////          LUU ID VAO FLASH (EEPROM)  /////////////////
void Check_Slaveid(){
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	id=_Modbus_Slave.Slave_id;
 800080c:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <Check_Slaveid+0x40>)
 800080e:	789b      	ldrb	r3, [r3, #2]
 8000810:	461a      	mov	r2, r3
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <Check_Slaveid+0x44>)
 8000814:	801a      	strh	r2, [r3, #0]
	if(_Modbus_Slave.Slave_id!=_Modbus_Slave.Slave_id_to_Eeprom){
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <Check_Slaveid+0x40>)
 8000818:	789b      	ldrb	r3, [r3, #2]
 800081a:	461a      	mov	r2, r3
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <Check_Slaveid+0x40>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	429a      	cmp	r2, r3
 8000822:	d00e      	beq.n	8000842 <Check_Slaveid+0x3a>
		Flash_ErasePage(127);
 8000824:	207f      	movs	r0, #127	@ 0x7f
 8000826:	f004 f97e 	bl	8004b26 <Flash_ErasePage>
		Flash_Write(FLASH_TYPEPROGRAM_WORD,ADD_Flash_Slave_ID,_Modbus_Slave.Slave_id_to_Eeprom);
 800082a:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <Check_Slaveid+0x40>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	461a      	mov	r2, r3
 8000830:	4907      	ldr	r1, [pc, #28]	@ (8000850 <Check_Slaveid+0x48>)
 8000832:	2002      	movs	r0, #2
 8000834:	f004 f99c 	bl	8004b70 <Flash_Write>
		_Modbus_Slave.Slave_id=_Modbus_Slave.Slave_id_to_Eeprom;
 8000838:	4b03      	ldr	r3, [pc, #12]	@ (8000848 <Check_Slaveid+0x40>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b02      	ldr	r3, [pc, #8]	@ (8000848 <Check_Slaveid+0x40>)
 8000840:	709a      	strb	r2, [r3, #2]
	}

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000048 	.word	0x20000048
 800084c:	2000018c 	.word	0x2000018c
 8000850:	0801fcf0 	.word	0x0801fcf0

08000854 <initial_UART_DMA>:

void initial_UART_DMA(){
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, _Modbus_Slave.RxData, 10);
 8000858:	220a      	movs	r2, #10
 800085a:	4907      	ldr	r1, [pc, #28]	@ (8000878 <initial_UART_DMA+0x24>)
 800085c:	4807      	ldr	r0, [pc, #28]	@ (800087c <initial_UART_DMA+0x28>)
 800085e:	f003 fa5f 	bl	8003d20 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000862:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <initial_UART_DMA+0x2c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <initial_UART_DMA+0x2c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f022 0204 	bic.w	r2, r2, #4
 8000870:	601a      	str	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000004b 	.word	0x2000004b
 800087c:	20000258 	.word	0x20000258
 8000880:	200002a0 	.word	0x200002a0

08000884 <alt_main>:
/////////////////////////////////////////////////////////////////////////////
void alt_main()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	/* Initialization */

	initial_UART_DMA();
 8000888:	f7ff ffe4 	bl	8000854 <initial_UART_DMA>
	 // _Ht621b.All_on();
	HAL_ADC_Start_DMA(&hadc1, &data_adc, 1);
 800088c:	2201      	movs	r2, #1
 800088e:	490d      	ldr	r1, [pc, #52]	@ (80008c4 <alt_main+0x40>)
 8000890:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <alt_main+0x44>)
 8000892:	f000 fce1 	bl	8001258 <HAL_ADC_Start_DMA>

	Status_Current_Switch();
 8000896:	f004 fd93 	bl	80053c0 <Status_Current_Switch>
	while (1)
	{
		/* Super loop */
		_Flags.TurnONFlags();
 800089a:	480c      	ldr	r0, [pc, #48]	@ (80008cc <alt_main+0x48>)
 800089c:	f004 f984 	bl	8004ba8 <_ZN5Flags11TurnONFlagsEv>
		if (Status_initial_LCD){Status_initial_LCD=false;Tacvu_HIENTHI();}
 80008a0:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <alt_main+0x4c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d004      	beq.n	80008b2 <alt_main+0x2e>
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <alt_main+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	f7ff ff23 	bl	80006f8 <Tacvu_HIENTHI>
		Check_Slaveid();
 80008b2:	f7ff ffa9 	bl	8000808 <Check_Slaveid>
		ThucThiTacVuTheoFlag();
 80008b6:	f7ff ff55 	bl	8000764 <_Z20ThucThiTacVuTheoFlagv>
		_Flags.TurnOFFFlags();
 80008ba:	4804      	ldr	r0, [pc, #16]	@ (80008cc <alt_main+0x48>)
 80008bc:	f004 f9d8 	bl	8004c70 <_ZN5Flags12TurnOFFFlagsEv>
		_Flags.TurnONFlags();
 80008c0:	e7eb      	b.n	800089a <alt_main+0x16>
 80008c2:	bf00      	nop
 80008c4:	20000180 	.word	0x20000180
 80008c8:	20000190 	.word	0x20000190
 80008cc:	2000015c 	.word	0x2000015c
 80008d0:	20000001 	.word	0x20000001

080008d4 <_Z41__static_initialization_and_destruction_0ii>:

	}
}
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d10a      	bne.n	80008fa <_Z41__static_initialization_and_destruction_0ii+0x26>
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d105      	bne.n	80008fa <_Z41__static_initialization_and_destruction_0ii+0x26>
HT1621 _Ht621b;
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80008f0:	f004 fdb4 	bl	800545c <_ZN6HT1621C1Ev>
Modbus_Slave _Modbus_Slave;
 80008f4:	4804      	ldr	r0, [pc, #16]	@ (8000908 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80008f6:	f004 fa55 	bl	8004da4 <_ZN12Modbus_SlaveC1Ev>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000002c 	.word	0x2000002c
 8000908:	20000048 	.word	0x20000048

0800090c <_GLOBAL__sub_I__Ht621b>:
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
 8000910:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff ffdd 	bl	80008d4 <_Z41__static_initialization_and_destruction_0ii>
 800091a:	bd80      	pop	{r7, pc}

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000920:	f000 fb60 	bl	8000fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000924:	f000 f80e 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000928:	f000 f918 	bl	8000b5c <MX_GPIO_Init>
  MX_DMA_Init();
 800092c:	f000 f8f0 	bl	8000b10 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000930:	f000 f8c4 	bl	8000abc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000934:	f000 f894 	bl	8000a60 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000938:	f000 f854 	bl	80009e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  alt_main();
 800093c:	f7ff ffa2 	bl	8000884 <alt_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <main+0x24>

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	@ 0x50
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800094e:	2228      	movs	r2, #40	@ 0x28
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f005 f86a 	bl	8005a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000974:	2302      	movs	r3, #2
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000978:	2301      	movs	r3, #1
 800097a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097c:	2310      	movs	r3, #16
 800097e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000980:	2300      	movs	r3, #0
 8000982:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000984:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000988:	4618      	mov	r0, r3
 800098a:	f002 fcb3 	bl	80032f4 <HAL_RCC_OscConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000994:	f000 f93a 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000998:	230f      	movs	r3, #15
 800099a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 ff20 	bl	80037f8 <HAL_RCC_ClockConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009be:	f000 f925 	bl	8000c0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009c2:	2302      	movs	r3, #2
 80009c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 f8a1 	bl	8003b14 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009d8:	f000 f918 	bl	8000c0c <Error_Handler>
  }
}
 80009dc:	bf00      	nop
 80009de:	3750      	adds	r7, #80	@ 0x50
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_ADC1_Init+0x74>)
 80009f6:	4a19      	ldr	r2, [pc, #100]	@ (8000a5c <MX_ADC1_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_ADC1_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_ADC1_Init+0x74>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_ADC1_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_ADC1_Init+0x74>)
 8000a0e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a14:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <MX_ADC1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_ADC1_Init+0x74>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a20:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <MX_ADC1_Init+0x74>)
 8000a22:	f000 fb41 	bl	80010a8 <HAL_ADC_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a2c:	f000 f8ee 	bl	8000c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_ADC1_Init+0x74>)
 8000a42:	f000 fd03 	bl	800144c <HAL_ADC_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a4c:	f000 f8de 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000190 	.word	0x20000190
 8000a5c:	40012400 	.word	0x40012400

08000a60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a66:	4a13      	ldr	r2, [pc, #76]	@ (8000ab4 <MX_I2C1_Init+0x54>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a6c:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <MX_I2C1_Init+0x58>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a9e:	f001 fe33 	bl	8002708 <HAL_I2C_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aa8:	f000 f8b0 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000204 	.word	0x20000204
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	000186a0 	.word	0x000186a0

08000abc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <MX_USART1_UART_Init+0x50>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000af4:	f003 f8c4 	bl	8003c80 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000afe:	f000 f885 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000258 	.word	0x20000258
 8000b0c:	40013800 	.word	0x40013800

08000b10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <MX_DMA_Init+0x48>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b58 <MX_DMA_Init+0x48>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6153      	str	r3, [r2, #20]
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <MX_DMA_Init+0x48>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	200b      	movs	r0, #11
 8000b34:	f000 ff5b 	bl	80019ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b38:	200b      	movs	r0, #11
 8000b3a:	f000 ff74 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	200f      	movs	r0, #15
 8000b44:	f000 ff53 	bl	80019ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000b48:	200f      	movs	r0, #15
 8000b4a:	f000 ff6c 	bl	8001a26 <HAL_NVIC_EnableIRQ>

}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b22      	ldr	r3, [pc, #136]	@ (8000bfc <MX_GPIO_Init+0xa0>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a21      	ldr	r2, [pc, #132]	@ (8000bfc <MX_GPIO_Init+0xa0>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <MX_GPIO_Init+0xa0>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b88:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_GPIO_Init+0xa0>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bfc <MX_GPIO_Init+0xa0>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_GPIO_Init+0xa0>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0308 	and.w	r3, r3, #8
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000ba6:	4816      	ldr	r0, [pc, #88]	@ (8000c00 <MX_GPIO_Init+0xa4>)
 8000ba8:	f001 fd7e 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bac:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000bb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480e      	ldr	r0, [pc, #56]	@ (8000c00 <MX_GPIO_Init+0xa4>)
 8000bc6:	f001 fbeb 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bca:	2320      	movs	r3, #32
 8000bcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bce:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <MX_GPIO_Init+0xa8>)
 8000bd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480a      	ldr	r0, [pc, #40]	@ (8000c08 <MX_GPIO_Init+0xac>)
 8000bde:	f001 fbdf 	bl	80023a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2017      	movs	r0, #23
 8000be8:	f000 ff01 	bl	80019ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bec:	2017      	movs	r0, #23
 8000bee:	f000 ff1a 	bl	8001a26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010800 	.word	0x40010800
 8000c04:	10210000 	.word	0x10210000
 8000c08:	40010c00 	.word	0x40010c00

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <Error_Handler+0x8>

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <HAL_MspInit+0x5c>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	4a14      	ldr	r2, [pc, #80]	@ (8000c74 <HAL_MspInit+0x5c>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6193      	str	r3, [r2, #24]
 8000c2a:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <HAL_MspInit+0x5c>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <HAL_MspInit+0x5c>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c74 <HAL_MspInit+0x5c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <HAL_MspInit+0x5c>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <HAL_MspInit+0x60>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <HAL_MspInit+0x60>)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010000 	.word	0x40010000

08000c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a28      	ldr	r2, [pc, #160]	@ (8000d38 <HAL_ADC_MspInit+0xbc>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d149      	bne.n	8000d30 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c9c:	4b27      	ldr	r3, [pc, #156]	@ (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a26      	ldr	r2, [pc, #152]	@ (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b24      	ldr	r3, [pc, #144]	@ (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a20      	ldr	r2, [pc, #128]	@ (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4819      	ldr	r0, [pc, #100]	@ (8000d40 <HAL_ADC_MspInit+0xc4>)
 8000cdc:	f001 fb60 	bl	80023a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <HAL_ADC_MspInit+0xc8>)
 8000ce2:	4a19      	ldr	r2, [pc, #100]	@ (8000d48 <HAL_ADC_MspInit+0xcc>)
 8000ce4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <HAL_ADC_MspInit+0xc8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cec:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <HAL_ADC_MspInit+0xc8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <HAL_ADC_MspInit+0xc8>)
 8000cf4:	2280      	movs	r2, #128	@ 0x80
 8000cf6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_ADC_MspInit+0xc8>)
 8000cfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cfe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d00:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <HAL_ADC_MspInit+0xc8>)
 8000d02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d06:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_ADC_MspInit+0xc8>)
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <HAL_ADC_MspInit+0xc8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d14:	480b      	ldr	r0, [pc, #44]	@ (8000d44 <HAL_ADC_MspInit+0xc8>)
 8000d16:	f000 fea1 	bl	8001a5c <HAL_DMA_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000d20:	f7ff ff74 	bl	8000c0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a07      	ldr	r2, [pc, #28]	@ (8000d44 <HAL_ADC_MspInit+0xc8>)
 8000d28:	621a      	str	r2, [r3, #32]
 8000d2a:	4a06      	ldr	r2, [pc, #24]	@ (8000d44 <HAL_ADC_MspInit+0xc8>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d30:	bf00      	nop
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40012400 	.word	0x40012400
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010800 	.word	0x40010800
 8000d44:	200001c0 	.word	0x200001c0
 8000d48:	40020008 	.word	0x40020008

08000d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a1d      	ldr	r2, [pc, #116]	@ (8000ddc <HAL_I2C_MspInit+0x90>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d132      	bne.n	8000dd2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <HAL_I2C_MspInit+0x94>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a1b      	ldr	r2, [pc, #108]	@ (8000de0 <HAL_I2C_MspInit+0x94>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <HAL_I2C_MspInit+0x94>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d84:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8a:	2312      	movs	r3, #18
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4812      	ldr	r0, [pc, #72]	@ (8000de4 <HAL_I2C_MspInit+0x98>)
 8000d9a:	f001 fb01 	bl	80023a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000d9e:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_I2C_MspInit+0x9c>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000db4:	4a0c      	ldr	r2, [pc, #48]	@ (8000de8 <HAL_I2C_MspInit+0x9c>)
 8000db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <HAL_I2C_MspInit+0x94>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a08      	ldr	r2, [pc, #32]	@ (8000de0 <HAL_I2C_MspInit+0x94>)
 8000dc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_I2C_MspInit+0x94>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	@ 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010c00 	.word	0x40010c00
 8000de8:	40010000 	.word	0x40010000

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a33      	ldr	r2, [pc, #204]	@ (8000ed4 <HAL_UART_MspInit+0xe8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d15f      	bne.n	8000ecc <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e0c:	4b32      	ldr	r3, [pc, #200]	@ (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a31      	ldr	r2, [pc, #196]	@ (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a2b      	ldr	r2, [pc, #172]	@ (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b29      	ldr	r3, [pc, #164]	@ (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4822      	ldr	r0, [pc, #136]	@ (8000edc <HAL_UART_MspInit+0xf0>)
 8000e52:	f001 faa5 	bl	80023a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481c      	ldr	r0, [pc, #112]	@ (8000edc <HAL_UART_MspInit+0xf0>)
 8000e6c:	f001 fa98 	bl	80023a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee0 <HAL_UART_MspInit+0xf4>)
 8000e72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee4 <HAL_UART_MspInit+0xf8>)
 8000e74:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <HAL_UART_MspInit+0xf4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ee0 <HAL_UART_MspInit+0xf4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <HAL_UART_MspInit+0xf4>)
 8000e84:	2280      	movs	r2, #128	@ 0x80
 8000e86:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <HAL_UART_MspInit+0xf4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <HAL_UART_MspInit+0xf4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_UART_MspInit+0xf4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <HAL_UART_MspInit+0xf4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ea0:	480f      	ldr	r0, [pc, #60]	@ (8000ee0 <HAL_UART_MspInit+0xf4>)
 8000ea2:	f000 fddb 	bl	8001a5c <HAL_DMA_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000eac:	f7ff feae 	bl	8000c0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee0 <HAL_UART_MspInit+0xf4>)
 8000eb4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <HAL_UART_MspInit+0xf4>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2025      	movs	r0, #37	@ 0x25
 8000ec2:	f000 fd94 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ec6:	2025      	movs	r0, #37	@ 0x25
 8000ec8:	f000 fdad 	bl	8001a26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ecc:	bf00      	nop
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40013800 	.word	0x40013800
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010800 	.word	0x40010800
 8000ee0:	200002a0 	.word	0x200002a0
 8000ee4:	40020058 	.word	0x40020058

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <NMI_Handler+0x4>

08000ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <MemManage_Handler+0x4>

08000f00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f38:	f000 f89a 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <DMA1_Channel1_IRQHandler+0x10>)
 8000f46:	f000 fef7 	bl	8001d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200001c0 	.word	0x200001c0

08000f54 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <DMA1_Channel5_IRQHandler+0x10>)
 8000f5a:	f000 feed 	bl	8001d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200002a0 	.word	0x200002a0

08000f68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000f6c:	2020      	movs	r0, #32
 8000f6e:	f001 fbb3 	bl	80026d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <USART1_IRQHandler+0x10>)
 8000f7e:	f002 ff29 	bl	8003dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000258 	.word	0x20000258

08000f8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f98:	f7ff fff8 	bl	8000f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f9c:	480b      	ldr	r0, [pc, #44]	@ (8000fcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f9e:	490c      	ldr	r1, [pc, #48]	@ (8000fd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a09      	ldr	r2, [pc, #36]	@ (8000fd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fb4:	4c09      	ldr	r4, [pc, #36]	@ (8000fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f004 fd3b 	bl	8005a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fc6:	f7ff fca9 	bl	800091c <main>
  bx lr
 8000fca:	4770      	bx	lr
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fd4:	08005b98 	.word	0x08005b98
  ldr r2, =_sbss
 8000fd8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fdc:	20000310 	.word	0x20000310

08000fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_2_IRQHandler>
	...

08000fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <HAL_Init+0x28>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a07      	ldr	r2, [pc, #28]	@ (800100c <HAL_Init+0x28>)
 8000fee:	f043 0310 	orr.w	r3, r3, #16
 8000ff2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 fcef 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	200f      	movs	r0, #15
 8000ffc:	f000 f808 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001000:	f7ff fe0a 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40022000 	.word	0x40022000

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <HAL_InitTick+0x54>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <HAL_InitTick+0x58>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fd07 	bl	8001a42 <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00e      	b.n	800105c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d80a      	bhi.n	800105a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f000 fccf 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4a06      	ldr	r2, [pc, #24]	@ (800106c <HAL_InitTick+0x5c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000004 	.word	0x20000004
 8001068:	2000000c 	.word	0x2000000c
 800106c:	20000008 	.word	0x20000008

08001070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <HAL_IncTick+0x1c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <HAL_IncTick+0x20>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a03      	ldr	r2, [pc, #12]	@ (8001090 <HAL_IncTick+0x20>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	2000000c 	.word	0x2000000c
 8001090:	200002e4 	.word	0x200002e4

08001094 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b02      	ldr	r3, [pc, #8]	@ (80010a4 <HAL_GetTick+0x10>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	200002e4 	.word	0x200002e4

080010a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e0be      	b.n	8001248 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d109      	bne.n	80010ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fdc8 	bl	8000c7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 faff 	bl	80016f0 <ADC_ConversionStop_Disable>
 80010f2:	4603      	mov	r3, r0
 80010f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f040 8099 	bne.w	8001236 <HAL_ADC_Init+0x18e>
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 8095 	bne.w	8001236 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001110:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001114:	f023 0302 	bic.w	r3, r3, #2
 8001118:	f043 0202 	orr.w	r2, r3, #2
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001128:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7b1b      	ldrb	r3, [r3, #12]
 800112e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001130:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	4313      	orrs	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001140:	d003      	beq.n	800114a <HAL_ADC_Init+0xa2>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d102      	bne.n	8001150 <HAL_ADC_Init+0xa8>
 800114a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800114e:	e000      	b.n	8001152 <HAL_ADC_Init+0xaa>
 8001150:	2300      	movs	r3, #0
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7d1b      	ldrb	r3, [r3, #20]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d119      	bne.n	8001194 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7b1b      	ldrb	r3, [r3, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d109      	bne.n	800117c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	3b01      	subs	r3, #1
 800116e:	035a      	lsls	r2, r3, #13
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	e00b      	b.n	8001194 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001180:	f043 0220 	orr.w	r2, r3, #32
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800118c:	f043 0201 	orr.w	r2, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	4b28      	ldr	r3, [pc, #160]	@ (8001250 <HAL_ADC_Init+0x1a8>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	68b9      	ldr	r1, [r7, #8]
 80011b8:	430b      	orrs	r3, r1
 80011ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011c4:	d003      	beq.n	80011ce <HAL_ADC_Init+0x126>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d104      	bne.n	80011d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	051b      	lsls	r3, r3, #20
 80011d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011de:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <HAL_ADC_Init+0x1ac>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d10b      	bne.n	8001214 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001206:	f023 0303 	bic.w	r3, r3, #3
 800120a:	f043 0201 	orr.w	r2, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001212:	e018      	b.n	8001246 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001218:	f023 0312 	bic.w	r3, r3, #18
 800121c:	f043 0210 	orr.w	r2, r3, #16
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001228:	f043 0201 	orr.w	r2, r3, #1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001234:	e007      	b.n	8001246 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123a:	f043 0210 	orr.w	r2, r3, #16
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001246:	7dfb      	ldrb	r3, [r7, #23]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	ffe1f7fd 	.word	0xffe1f7fd
 8001254:	ff1f0efe 	.word	0xff1f0efe

08001258 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a64      	ldr	r2, [pc, #400]	@ (8001400 <HAL_ADC_Start_DMA+0x1a8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d004      	beq.n	800127c <HAL_ADC_Start_DMA+0x24>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a63      	ldr	r2, [pc, #396]	@ (8001404 <HAL_ADC_Start_DMA+0x1ac>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d106      	bne.n	800128a <HAL_ADC_Start_DMA+0x32>
 800127c:	4b60      	ldr	r3, [pc, #384]	@ (8001400 <HAL_ADC_Start_DMA+0x1a8>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f040 80b3 	bne.w	80013f0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_ADC_Start_DMA+0x40>
 8001294:	2302      	movs	r3, #2
 8001296:	e0ae      	b.n	80013f6 <HAL_ADC_Start_DMA+0x19e>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f000 f9cb 	bl	800163c <ADC_Enable>
 80012a6:	4603      	mov	r3, r0
 80012a8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f040 809a 	bne.w	80013e6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a4e      	ldr	r2, [pc, #312]	@ (8001404 <HAL_ADC_Start_DMA+0x1ac>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d105      	bne.n	80012dc <HAL_ADC_Start_DMA+0x84>
 80012d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001400 <HAL_ADC_Start_DMA+0x1a8>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d115      	bne.n	8001308 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d026      	beq.n	8001344 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001306:	e01d      	b.n	8001344 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a39      	ldr	r2, [pc, #228]	@ (8001400 <HAL_ADC_Start_DMA+0x1a8>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d004      	beq.n	8001328 <HAL_ADC_Start_DMA+0xd0>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a38      	ldr	r2, [pc, #224]	@ (8001404 <HAL_ADC_Start_DMA+0x1ac>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d10d      	bne.n	8001344 <HAL_ADC_Start_DMA+0xec>
 8001328:	4b35      	ldr	r3, [pc, #212]	@ (8001400 <HAL_ADC_Start_DMA+0x1a8>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001330:	2b00      	cmp	r3, #0
 8001332:	d007      	beq.n	8001344 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001338:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800133c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001354:	f023 0206 	bic.w	r2, r3, #6
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800135c:	e002      	b.n	8001364 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	4a25      	ldr	r2, [pc, #148]	@ (8001408 <HAL_ADC_Start_DMA+0x1b0>)
 8001372:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4a24      	ldr	r2, [pc, #144]	@ (800140c <HAL_ADC_Start_DMA+0x1b4>)
 800137a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	4a23      	ldr	r2, [pc, #140]	@ (8001410 <HAL_ADC_Start_DMA+0x1b8>)
 8001382:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f06f 0202 	mvn.w	r2, #2
 800138c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800139c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6a18      	ldr	r0, [r3, #32]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	334c      	adds	r3, #76	@ 0x4c
 80013a8:	4619      	mov	r1, r3
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f000 fbaf 	bl	8001b10 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013bc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013c0:	d108      	bne.n	80013d4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80013d0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013d2:	e00f      	b.n	80013f4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80013e2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013e4:	e006      	b.n	80013f4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80013ee:	e001      	b.n	80013f4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40012400 	.word	0x40012400
 8001404:	40012800 	.word	0x40012800
 8001408:	08001773 	.word	0x08001773
 800140c:	080017ef 	.word	0x080017ef
 8001410:	0800180b 	.word	0x0800180b

08001414 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
	...

0800144c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_ADC_ConfigChannel+0x20>
 8001468:	2302      	movs	r3, #2
 800146a:	e0dc      	b.n	8001626 <HAL_ADC_ConfigChannel+0x1da>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b06      	cmp	r3, #6
 800147a:	d81c      	bhi.n	80014b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	3b05      	subs	r3, #5
 800148e:	221f      	movs	r2, #31
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	4019      	ands	r1, r3
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	3b05      	subs	r3, #5
 80014a8:	fa00 f203 	lsl.w	r2, r0, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80014b4:	e03c      	b.n	8001530 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b0c      	cmp	r3, #12
 80014bc:	d81c      	bhi.n	80014f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	3b23      	subs	r3, #35	@ 0x23
 80014d0:	221f      	movs	r2, #31
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	4019      	ands	r1, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	3b23      	subs	r3, #35	@ 0x23
 80014ea:	fa00 f203 	lsl.w	r2, r0, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80014f6:	e01b      	b.n	8001530 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	3b41      	subs	r3, #65	@ 0x41
 800150a:	221f      	movs	r2, #31
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	4019      	ands	r1, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	3b41      	subs	r3, #65	@ 0x41
 8001524:	fa00 f203 	lsl.w	r2, r0, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b09      	cmp	r3, #9
 8001536:	d91c      	bls.n	8001572 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68d9      	ldr	r1, [r3, #12]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	3b1e      	subs	r3, #30
 800154a:	2207      	movs	r2, #7
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	4019      	ands	r1, r3
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	6898      	ldr	r0, [r3, #8]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	3b1e      	subs	r3, #30
 8001564:	fa00 f203 	lsl.w	r2, r0, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	e019      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6919      	ldr	r1, [r3, #16]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4613      	mov	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	2207      	movs	r2, #7
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	4019      	ands	r1, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	6898      	ldr	r0, [r3, #8]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	fa00 f203 	lsl.w	r2, r0, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	d003      	beq.n	80015b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015b2:	2b11      	cmp	r3, #17
 80015b4:	d132      	bne.n	800161c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001630 <HAL_ADC_ConfigChannel+0x1e4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d125      	bne.n	800160c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d126      	bne.n	800161c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80015dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b10      	cmp	r3, #16
 80015e4:	d11a      	bne.n	800161c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015e6:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <HAL_ADC_ConfigChannel+0x1e8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a13      	ldr	r2, [pc, #76]	@ (8001638 <HAL_ADC_ConfigChannel+0x1ec>)
 80015ec:	fba2 2303 	umull	r2, r3, r2, r3
 80015f0:	0c9a      	lsrs	r2, r3, #18
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015fc:	e002      	b.n	8001604 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	3b01      	subs	r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f9      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x1b2>
 800160a:	e007      	b.n	800161c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001610:	f043 0220 	orr.w	r2, r3, #32
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	40012400 	.word	0x40012400
 8001634:	20000004 	.word	0x20000004
 8001638:	431bde83 	.word	0x431bde83

0800163c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b01      	cmp	r3, #1
 8001658:	d040      	beq.n	80016dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0201 	orr.w	r2, r2, #1
 8001668:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800166a:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <ADC_Enable+0xac>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1f      	ldr	r2, [pc, #124]	@ (80016ec <ADC_Enable+0xb0>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	0c9b      	lsrs	r3, r3, #18
 8001676:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001678:	e002      	b.n	8001680 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	3b01      	subs	r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f9      	bne.n	800167a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001686:	f7ff fd05 	bl	8001094 <HAL_GetTick>
 800168a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800168c:	e01f      	b.n	80016ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800168e:	f7ff fd01 	bl	8001094 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d918      	bls.n	80016ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d011      	beq.n	80016ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ae:	f043 0210 	orr.w	r2, r3, #16
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ba:	f043 0201 	orr.w	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e007      	b.n	80016de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d1d8      	bne.n	800168e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000004 	.word	0x20000004
 80016ec:	431bde83 	.word	0x431bde83

080016f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b01      	cmp	r3, #1
 8001708:	d12e      	bne.n	8001768 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0201 	bic.w	r2, r2, #1
 8001718:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800171a:	f7ff fcbb 	bl	8001094 <HAL_GetTick>
 800171e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001720:	e01b      	b.n	800175a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001722:	f7ff fcb7 	bl	8001094 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d914      	bls.n	800175a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b01      	cmp	r3, #1
 800173c:	d10d      	bne.n	800175a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001742:	f043 0210 	orr.w	r2, r3, #16
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174e:	f043 0201 	orr.w	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e007      	b.n	800176a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b01      	cmp	r3, #1
 8001766:	d0dc      	beq.n	8001722 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001784:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001788:	2b00      	cmp	r3, #0
 800178a:	d127      	bne.n	80017dc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001790:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80017a2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80017a6:	d115      	bne.n	80017d4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d111      	bne.n	80017d4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d105      	bne.n	80017d4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	f043 0201 	orr.w	r2, r3, #1
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f7ff fe1d 	bl	8001414 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80017da:	e004      	b.n	80017e6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	4798      	blx	r3
}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f7ff fe12 	bl	8001426 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b084      	sub	sp, #16
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001816:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001828:	f043 0204 	orr.w	r2, r3, #4
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f7ff fe01 	bl	8001438 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001868:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800186c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	@ (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <__NVIC_GetPriorityGrouping+0x18>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0307 	and.w	r3, r3, #7
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db0b      	blt.n	80018ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	4906      	ldr	r1, [pc, #24]	@ (80018d8 <__NVIC_EnableIRQ+0x34>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	2001      	movs	r0, #1
 80018c6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	@ (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	@ (800192c <__NVIC_SetPriority+0x50>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	@ 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	@ 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff90 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff2d 	bl	8001840 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff42 	bl	8001888 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff90 	bl	8001930 <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5f 	bl	80018dc <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff35 	bl	80018a4 <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e043      	b.n	8001afa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <HAL_DMA_Init+0xa8>)
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a22      	ldr	r2, [pc, #136]	@ (8001b08 <HAL_DMA_Init+0xac>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	009a      	lsls	r2, r3, #2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001b0c <HAL_DMA_Init+0xb0>)
 8001a8e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2202      	movs	r2, #2
 8001a94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001aa6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001aaa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001acc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	bffdfff8 	.word	0xbffdfff8
 8001b08:	cccccccd 	.word	0xcccccccd
 8001b0c:	40020000 	.word	0x40020000

08001b10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_DMA_Start_IT+0x20>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e04b      	b.n	8001bc8 <HAL_DMA_Start_IT+0xb8>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d13a      	bne.n	8001bba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0201 	bic.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	68b9      	ldr	r1, [r7, #8]
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 f9eb 	bl	8001f44 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d008      	beq.n	8001b88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 020e 	orr.w	r2, r2, #14
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	e00f      	b.n	8001ba8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0204 	bic.w	r2, r2, #4
 8001b96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 020a 	orr.w	r2, r2, #10
 8001ba6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e005      	b.n	8001bc6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d008      	beq.n	8001bfa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2204      	movs	r2, #4
 8001bec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e020      	b.n	8001c3c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 020e 	bic.w	r2, r2, #14
 8001c08:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c22:	2101      	movs	r1, #1
 8001c24:	fa01 f202 	lsl.w	r2, r1, r2
 8001c28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d005      	beq.n	8001c6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2204      	movs	r2, #4
 8001c64:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	73fb      	strb	r3, [r7, #15]
 8001c6a:	e051      	b.n	8001d10 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 020e 	bic.w	r2, r2, #14
 8001c7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a22      	ldr	r2, [pc, #136]	@ (8001d1c <HAL_DMA_Abort_IT+0xd4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d029      	beq.n	8001cea <HAL_DMA_Abort_IT+0xa2>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a21      	ldr	r2, [pc, #132]	@ (8001d20 <HAL_DMA_Abort_IT+0xd8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d022      	beq.n	8001ce6 <HAL_DMA_Abort_IT+0x9e>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d24 <HAL_DMA_Abort_IT+0xdc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d01a      	beq.n	8001ce0 <HAL_DMA_Abort_IT+0x98>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1e      	ldr	r2, [pc, #120]	@ (8001d28 <HAL_DMA_Abort_IT+0xe0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d012      	beq.n	8001cda <HAL_DMA_Abort_IT+0x92>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d2c <HAL_DMA_Abort_IT+0xe4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00a      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x8c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d30 <HAL_DMA_Abort_IT+0xe8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d102      	bne.n	8001cce <HAL_DMA_Abort_IT+0x86>
 8001cc8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001ccc:	e00e      	b.n	8001cec <HAL_DMA_Abort_IT+0xa4>
 8001cce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cd2:	e00b      	b.n	8001cec <HAL_DMA_Abort_IT+0xa4>
 8001cd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cd8:	e008      	b.n	8001cec <HAL_DMA_Abort_IT+0xa4>
 8001cda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cde:	e005      	b.n	8001cec <HAL_DMA_Abort_IT+0xa4>
 8001ce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ce4:	e002      	b.n	8001cec <HAL_DMA_Abort_IT+0xa4>
 8001ce6:	2310      	movs	r3, #16
 8001ce8:	e000      	b.n	8001cec <HAL_DMA_Abort_IT+0xa4>
 8001cea:	2301      	movs	r3, #1
 8001cec:	4a11      	ldr	r2, [pc, #68]	@ (8001d34 <HAL_DMA_Abort_IT+0xec>)
 8001cee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	4798      	blx	r3
    } 
  }
  return status;
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40020008 	.word	0x40020008
 8001d20:	4002001c 	.word	0x4002001c
 8001d24:	40020030 	.word	0x40020030
 8001d28:	40020044 	.word	0x40020044
 8001d2c:	40020058 	.word	0x40020058
 8001d30:	4002006c 	.word	0x4002006c
 8001d34:	40020000 	.word	0x40020000

08001d38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	2204      	movs	r2, #4
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d04f      	beq.n	8001e00 <HAL_DMA_IRQHandler+0xc8>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d04a      	beq.n	8001e00 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d107      	bne.n	8001d88 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0204 	bic.w	r2, r2, #4
 8001d86:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a66      	ldr	r2, [pc, #408]	@ (8001f28 <HAL_DMA_IRQHandler+0x1f0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d029      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xae>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a65      	ldr	r2, [pc, #404]	@ (8001f2c <HAL_DMA_IRQHandler+0x1f4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d022      	beq.n	8001de2 <HAL_DMA_IRQHandler+0xaa>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a63      	ldr	r2, [pc, #396]	@ (8001f30 <HAL_DMA_IRQHandler+0x1f8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d01a      	beq.n	8001ddc <HAL_DMA_IRQHandler+0xa4>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a62      	ldr	r2, [pc, #392]	@ (8001f34 <HAL_DMA_IRQHandler+0x1fc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d012      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x9e>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a60      	ldr	r2, [pc, #384]	@ (8001f38 <HAL_DMA_IRQHandler+0x200>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00a      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x98>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a5f      	ldr	r2, [pc, #380]	@ (8001f3c <HAL_DMA_IRQHandler+0x204>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d102      	bne.n	8001dca <HAL_DMA_IRQHandler+0x92>
 8001dc4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001dc8:	e00e      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001dca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001dce:	e00b      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001dd0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001dd4:	e008      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001dd6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001dda:	e005      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001ddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001de0:	e002      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001de2:	2340      	movs	r3, #64	@ 0x40
 8001de4:	e000      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001de6:	2304      	movs	r3, #4
 8001de8:	4a55      	ldr	r2, [pc, #340]	@ (8001f40 <HAL_DMA_IRQHandler+0x208>)
 8001dea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8094 	beq.w	8001f1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001dfe:	e08e      	b.n	8001f1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	2202      	movs	r2, #2
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d056      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x186>
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d051      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10b      	bne.n	8001e40 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 020a 	bic.w	r2, r2, #10
 8001e36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a38      	ldr	r2, [pc, #224]	@ (8001f28 <HAL_DMA_IRQHandler+0x1f0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d029      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x166>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a37      	ldr	r2, [pc, #220]	@ (8001f2c <HAL_DMA_IRQHandler+0x1f4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d022      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x162>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a35      	ldr	r2, [pc, #212]	@ (8001f30 <HAL_DMA_IRQHandler+0x1f8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01a      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x15c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a34      	ldr	r2, [pc, #208]	@ (8001f34 <HAL_DMA_IRQHandler+0x1fc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d012      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x156>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a32      	ldr	r2, [pc, #200]	@ (8001f38 <HAL_DMA_IRQHandler+0x200>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00a      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x150>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a31      	ldr	r2, [pc, #196]	@ (8001f3c <HAL_DMA_IRQHandler+0x204>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d102      	bne.n	8001e82 <HAL_DMA_IRQHandler+0x14a>
 8001e7c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e80:	e00e      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e86:	e00b      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e8c:	e008      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e92:	e005      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e98:	e002      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	e000      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	4a27      	ldr	r2, [pc, #156]	@ (8001f40 <HAL_DMA_IRQHandler+0x208>)
 8001ea2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d034      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ebc:	e02f      	b.n	8001f1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d028      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x1e8>
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d023      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 020e 	bic.w	r2, r2, #14
 8001ee6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d004      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	4798      	blx	r3
    }
  }
  return;
 8001f1e:	bf00      	nop
 8001f20:	bf00      	nop
}
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40020008 	.word	0x40020008
 8001f2c:	4002001c 	.word	0x4002001c
 8001f30:	40020030 	.word	0x40020030
 8001f34:	40020044 	.word	0x40020044
 8001f38:	40020058 	.word	0x40020058
 8001f3c:	4002006c 	.word	0x4002006c
 8001f40:	40020000 	.word	0x40020000

08001f44 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	d108      	bne.n	8001f84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f82:	e007      	b.n	8001f94 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	60da      	str	r2, [r3, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001fba:	4b2f      	ldr	r3, [pc, #188]	@ (8002078 <HAL_FLASH_Program+0xd8>)
 8001fbc:	7e1b      	ldrb	r3, [r3, #24]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_FLASH_Program+0x26>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e054      	b.n	8002070 <HAL_FLASH_Program+0xd0>
 8001fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8002078 <HAL_FLASH_Program+0xd8>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001fcc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001fd0:	f000 f8a8 	bl	8002124 <FLASH_WaitForLastOperation>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d144      	bne.n	8002068 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d102      	bne.n	8001fea <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	757b      	strb	r3, [r7, #21]
 8001fe8:	e007      	b.n	8001ffa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d102      	bne.n	8001ff6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	757b      	strb	r3, [r7, #21]
 8001ff4:	e001      	b.n	8001ffa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	75bb      	strb	r3, [r7, #22]
 8001ffe:	e02d      	b.n	800205c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002000:	7dbb      	ldrb	r3, [r7, #22]
 8002002:	005a      	lsls	r2, r3, #1
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	eb02 0c03 	add.w	ip, r2, r3
 800200a:	7dbb      	ldrb	r3, [r7, #22]
 800200c:	0119      	lsls	r1, r3, #4
 800200e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002012:	f1c1 0620 	rsb	r6, r1, #32
 8002016:	f1a1 0020 	sub.w	r0, r1, #32
 800201a:	fa22 f401 	lsr.w	r4, r2, r1
 800201e:	fa03 f606 	lsl.w	r6, r3, r6
 8002022:	4334      	orrs	r4, r6
 8002024:	fa23 f000 	lsr.w	r0, r3, r0
 8002028:	4304      	orrs	r4, r0
 800202a:	fa23 f501 	lsr.w	r5, r3, r1
 800202e:	b2a3      	uxth	r3, r4
 8002030:	4619      	mov	r1, r3
 8002032:	4660      	mov	r0, ip
 8002034:	f000 f85a 	bl	80020ec <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002038:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800203c:	f000 f872 	bl	8002124 <FLASH_WaitForLastOperation>
 8002040:	4603      	mov	r3, r0
 8002042:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002044:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <HAL_FLASH_Program+0xdc>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a0c      	ldr	r2, [pc, #48]	@ (800207c <HAL_FLASH_Program+0xdc>)
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d107      	bne.n	8002066 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002056:	7dbb      	ldrb	r3, [r7, #22]
 8002058:	3301      	adds	r3, #1
 800205a:	75bb      	strb	r3, [r7, #22]
 800205c:	7dba      	ldrb	r2, [r7, #22]
 800205e:	7d7b      	ldrb	r3, [r7, #21]
 8002060:	429a      	cmp	r2, r3
 8002062:	d3cd      	bcc.n	8002000 <HAL_FLASH_Program+0x60>
 8002064:	e000      	b.n	8002068 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002066:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002068:	4b03      	ldr	r3, [pc, #12]	@ (8002078 <HAL_FLASH_Program+0xd8>)
 800206a:	2200      	movs	r2, #0
 800206c:	761a      	strb	r2, [r3, #24]

  return status;
 800206e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002070:	4618      	mov	r0, r3
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002078:	200002e8 	.word	0x200002e8
 800207c:	40022000 	.word	0x40022000

08002080 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800208a:	4b0d      	ldr	r3, [pc, #52]	@ (80020c0 <HAL_FLASH_Unlock+0x40>)
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00d      	beq.n	80020b2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002096:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <HAL_FLASH_Unlock+0x40>)
 8002098:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <HAL_FLASH_Unlock+0x44>)
 800209a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800209c:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <HAL_FLASH_Unlock+0x40>)
 800209e:	4a0a      	ldr	r2, [pc, #40]	@ (80020c8 <HAL_FLASH_Unlock+0x48>)
 80020a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80020a2:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <HAL_FLASH_Unlock+0x40>)
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80020b2:	79fb      	ldrb	r3, [r7, #7]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40022000 	.word	0x40022000
 80020c4:	45670123 	.word	0x45670123
 80020c8:	cdef89ab 	.word	0xcdef89ab

080020cc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80020d0:	4b05      	ldr	r3, [pc, #20]	@ (80020e8 <HAL_FLASH_Lock+0x1c>)
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	4a04      	ldr	r2, [pc, #16]	@ (80020e8 <HAL_FLASH_Lock+0x1c>)
 80020d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020da:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40022000 	.word	0x40022000

080020ec <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020f8:	4b08      	ldr	r3, [pc, #32]	@ (800211c <FLASH_Program_HalfWord+0x30>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80020fe:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <FLASH_Program_HalfWord+0x34>)
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	4a07      	ldr	r2, [pc, #28]	@ (8002120 <FLASH_Program_HalfWord+0x34>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	887a      	ldrh	r2, [r7, #2]
 800210e:	801a      	strh	r2, [r3, #0]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	200002e8 	.word	0x200002e8
 8002120:	40022000 	.word	0x40022000

08002124 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7fe ffb2 	bl	8001094 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002132:	e010      	b.n	8002156 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213a:	d00c      	beq.n	8002156 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <FLASH_WaitForLastOperation+0x2e>
 8002142:	f7fe ffa7 	bl	8001094 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	429a      	cmp	r2, r3
 8002150:	d201      	bcs.n	8002156 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e025      	b.n	80021a2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <FLASH_WaitForLastOperation+0x88>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1e8      	bne.n	8002134 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002162:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <FLASH_WaitForLastOperation+0x88>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800216e:	4b0f      	ldr	r3, [pc, #60]	@ (80021ac <FLASH_WaitForLastOperation+0x88>)
 8002170:	2220      	movs	r2, #32
 8002172:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002174:	4b0d      	ldr	r3, [pc, #52]	@ (80021ac <FLASH_WaitForLastOperation+0x88>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10b      	bne.n	8002198 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002180:	4b0a      	ldr	r3, [pc, #40]	@ (80021ac <FLASH_WaitForLastOperation+0x88>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800218c:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <FLASH_WaitForLastOperation+0x88>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002198:	f000 f80a 	bl	80021b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40022000 	.word	0x40022000

080021b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80021ba:	4b23      	ldr	r3, [pc, #140]	@ (8002248 <FLASH_SetErrorCode+0x98>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80021c6:	4b21      	ldr	r3, [pc, #132]	@ (800224c <FLASH_SetErrorCode+0x9c>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f043 0302 	orr.w	r3, r3, #2
 80021ce:	4a1f      	ldr	r2, [pc, #124]	@ (800224c <FLASH_SetErrorCode+0x9c>)
 80021d0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f043 0310 	orr.w	r3, r3, #16
 80021d8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80021da:	4b1b      	ldr	r3, [pc, #108]	@ (8002248 <FLASH_SetErrorCode+0x98>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80021e6:	4b19      	ldr	r3, [pc, #100]	@ (800224c <FLASH_SetErrorCode+0x9c>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	4a17      	ldr	r2, [pc, #92]	@ (800224c <FLASH_SetErrorCode+0x9c>)
 80021f0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80021fa:	4b13      	ldr	r3, [pc, #76]	@ (8002248 <FLASH_SetErrorCode+0x98>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002206:	4b11      	ldr	r3, [pc, #68]	@ (800224c <FLASH_SetErrorCode+0x9c>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f043 0304 	orr.w	r3, r3, #4
 800220e:	4a0f      	ldr	r2, [pc, #60]	@ (800224c <FLASH_SetErrorCode+0x9c>)
 8002210:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002212:	4b0d      	ldr	r3, [pc, #52]	@ (8002248 <FLASH_SetErrorCode+0x98>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	4a0c      	ldr	r2, [pc, #48]	@ (8002248 <FLASH_SetErrorCode+0x98>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f240 1201 	movw	r2, #257	@ 0x101
 8002224:	4293      	cmp	r3, r2
 8002226:	d106      	bne.n	8002236 <FLASH_SetErrorCode+0x86>
 8002228:	4b07      	ldr	r3, [pc, #28]	@ (8002248 <FLASH_SetErrorCode+0x98>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	4a06      	ldr	r2, [pc, #24]	@ (8002248 <FLASH_SetErrorCode+0x98>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	61d3      	str	r3, [r2, #28]
}  
 8002234:	e002      	b.n	800223c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002236:	4a04      	ldr	r2, [pc, #16]	@ (8002248 <FLASH_SetErrorCode+0x98>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	60d3      	str	r3, [r2, #12]
}  
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40022000 	.word	0x40022000
 800224c:	200002e8 	.word	0x200002e8

08002250 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002262:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <HAL_FLASHEx_Erase+0xd0>)
 8002264:	7e1b      	ldrb	r3, [r3, #24]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_FLASHEx_Erase+0x1e>
 800226a:	2302      	movs	r3, #2
 800226c:	e053      	b.n	8002316 <HAL_FLASHEx_Erase+0xc6>
 800226e:	4b2c      	ldr	r3, [pc, #176]	@ (8002320 <HAL_FLASHEx_Erase+0xd0>)
 8002270:	2201      	movs	r2, #1
 8002272:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d116      	bne.n	80022aa <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800227c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002280:	f7ff ff50 	bl	8002124 <FLASH_WaitForLastOperation>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d141      	bne.n	800230e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800228a:	2001      	movs	r0, #1
 800228c:	f000 f84c 	bl	8002328 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002290:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002294:	f7ff ff46 	bl	8002124 <FLASH_WaitForLastOperation>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800229c:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <HAL_FLASHEx_Erase+0xd4>)
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	4a20      	ldr	r2, [pc, #128]	@ (8002324 <HAL_FLASHEx_Erase+0xd4>)
 80022a2:	f023 0304 	bic.w	r3, r3, #4
 80022a6:	6113      	str	r3, [r2, #16]
 80022a8:	e031      	b.n	800230e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80022aa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022ae:	f7ff ff39 	bl	8002124 <FLASH_WaitForLastOperation>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d12a      	bne.n	800230e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f04f 32ff 	mov.w	r2, #4294967295
 80022be:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	e019      	b.n	80022fc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80022c8:	68b8      	ldr	r0, [r7, #8]
 80022ca:	f000 f849 	bl	8002360 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022ce:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022d2:	f7ff ff27 	bl	8002124 <FLASH_WaitForLastOperation>
 80022d6:	4603      	mov	r3, r0
 80022d8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80022da:	4b12      	ldr	r3, [pc, #72]	@ (8002324 <HAL_FLASHEx_Erase+0xd4>)
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	4a11      	ldr	r2, [pc, #68]	@ (8002324 <HAL_FLASHEx_Erase+0xd4>)
 80022e0:	f023 0302 	bic.w	r3, r3, #2
 80022e4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	601a      	str	r2, [r3, #0]
            break;
 80022f2:	e00c      	b.n	800230e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022fa:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	029a      	lsls	r2, r3, #10
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	4413      	add	r3, r2
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	429a      	cmp	r2, r3
 800230c:	d3dc      	bcc.n	80022c8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800230e:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <HAL_FLASHEx_Erase+0xd0>)
 8002310:	2200      	movs	r2, #0
 8002312:	761a      	strb	r2, [r3, #24]

  return status;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200002e8 	.word	0x200002e8
 8002324:	40022000 	.word	0x40022000

08002328 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002330:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <FLASH_MassErase+0x30>)
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002336:	4b09      	ldr	r3, [pc, #36]	@ (800235c <FLASH_MassErase+0x34>)
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	4a08      	ldr	r2, [pc, #32]	@ (800235c <FLASH_MassErase+0x34>)
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <FLASH_MassErase+0x34>)
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	4a05      	ldr	r2, [pc, #20]	@ (800235c <FLASH_MassErase+0x34>)
 8002348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800234c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	200002e8 	.word	0x200002e8
 800235c:	40022000 	.word	0x40022000

08002360 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002368:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <FLASH_PageErase+0x38>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800236e:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <FLASH_PageErase+0x3c>)
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <FLASH_PageErase+0x3c>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800237a:	4a08      	ldr	r2, [pc, #32]	@ (800239c <FLASH_PageErase+0x3c>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <FLASH_PageErase+0x3c>)
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	4a05      	ldr	r2, [pc, #20]	@ (800239c <FLASH_PageErase+0x3c>)
 8002386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800238a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	200002e8 	.word	0x200002e8
 800239c:	40022000 	.word	0x40022000

080023a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b08b      	sub	sp, #44	@ 0x2c
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b2:	e169      	b.n	8002688 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023b4:	2201      	movs	r2, #1
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	f040 8158 	bne.w	8002682 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4a9a      	ldr	r2, [pc, #616]	@ (8002640 <HAL_GPIO_Init+0x2a0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d05e      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 80023dc:	4a98      	ldr	r2, [pc, #608]	@ (8002640 <HAL_GPIO_Init+0x2a0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d875      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 80023e2:	4a98      	ldr	r2, [pc, #608]	@ (8002644 <HAL_GPIO_Init+0x2a4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d058      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 80023e8:	4a96      	ldr	r2, [pc, #600]	@ (8002644 <HAL_GPIO_Init+0x2a4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d86f      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 80023ee:	4a96      	ldr	r2, [pc, #600]	@ (8002648 <HAL_GPIO_Init+0x2a8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d052      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 80023f4:	4a94      	ldr	r2, [pc, #592]	@ (8002648 <HAL_GPIO_Init+0x2a8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d869      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 80023fa:	4a94      	ldr	r2, [pc, #592]	@ (800264c <HAL_GPIO_Init+0x2ac>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d04c      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 8002400:	4a92      	ldr	r2, [pc, #584]	@ (800264c <HAL_GPIO_Init+0x2ac>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d863      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 8002406:	4a92      	ldr	r2, [pc, #584]	@ (8002650 <HAL_GPIO_Init+0x2b0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d046      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 800240c:	4a90      	ldr	r2, [pc, #576]	@ (8002650 <HAL_GPIO_Init+0x2b0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d85d      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 8002412:	2b12      	cmp	r3, #18
 8002414:	d82a      	bhi.n	800246c <HAL_GPIO_Init+0xcc>
 8002416:	2b12      	cmp	r3, #18
 8002418:	d859      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 800241a:	a201      	add	r2, pc, #4	@ (adr r2, 8002420 <HAL_GPIO_Init+0x80>)
 800241c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002420:	0800249b 	.word	0x0800249b
 8002424:	08002475 	.word	0x08002475
 8002428:	08002487 	.word	0x08002487
 800242c:	080024c9 	.word	0x080024c9
 8002430:	080024cf 	.word	0x080024cf
 8002434:	080024cf 	.word	0x080024cf
 8002438:	080024cf 	.word	0x080024cf
 800243c:	080024cf 	.word	0x080024cf
 8002440:	080024cf 	.word	0x080024cf
 8002444:	080024cf 	.word	0x080024cf
 8002448:	080024cf 	.word	0x080024cf
 800244c:	080024cf 	.word	0x080024cf
 8002450:	080024cf 	.word	0x080024cf
 8002454:	080024cf 	.word	0x080024cf
 8002458:	080024cf 	.word	0x080024cf
 800245c:	080024cf 	.word	0x080024cf
 8002460:	080024cf 	.word	0x080024cf
 8002464:	0800247d 	.word	0x0800247d
 8002468:	08002491 	.word	0x08002491
 800246c:	4a79      	ldr	r2, [pc, #484]	@ (8002654 <HAL_GPIO_Init+0x2b4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002472:	e02c      	b.n	80024ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	623b      	str	r3, [r7, #32]
          break;
 800247a:	e029      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	3304      	adds	r3, #4
 8002482:	623b      	str	r3, [r7, #32]
          break;
 8002484:	e024      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	3308      	adds	r3, #8
 800248c:	623b      	str	r3, [r7, #32]
          break;
 800248e:	e01f      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	330c      	adds	r3, #12
 8002496:	623b      	str	r3, [r7, #32]
          break;
 8002498:	e01a      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024a2:	2304      	movs	r3, #4
 80024a4:	623b      	str	r3, [r7, #32]
          break;
 80024a6:	e013      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d105      	bne.n	80024bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b0:	2308      	movs	r3, #8
 80024b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	611a      	str	r2, [r3, #16]
          break;
 80024ba:	e009      	b.n	80024d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024bc:	2308      	movs	r3, #8
 80024be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	615a      	str	r2, [r3, #20]
          break;
 80024c6:	e003      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
          break;
 80024cc:	e000      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          break;
 80024ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2bff      	cmp	r3, #255	@ 0xff
 80024d4:	d801      	bhi.n	80024da <HAL_GPIO_Init+0x13a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	e001      	b.n	80024de <HAL_GPIO_Init+0x13e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3304      	adds	r3, #4
 80024de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2bff      	cmp	r3, #255	@ 0xff
 80024e4:	d802      	bhi.n	80024ec <HAL_GPIO_Init+0x14c>
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	e002      	b.n	80024f2 <HAL_GPIO_Init+0x152>
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	3b08      	subs	r3, #8
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	210f      	movs	r1, #15
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	401a      	ands	r2, r3
 8002504:	6a39      	ldr	r1, [r7, #32]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	431a      	orrs	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80b1 	beq.w	8002682 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002520:	4b4d      	ldr	r3, [pc, #308]	@ (8002658 <HAL_GPIO_Init+0x2b8>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	4a4c      	ldr	r2, [pc, #304]	@ (8002658 <HAL_GPIO_Init+0x2b8>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6193      	str	r3, [r2, #24]
 800252c:	4b4a      	ldr	r3, [pc, #296]	@ (8002658 <HAL_GPIO_Init+0x2b8>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002538:	4a48      	ldr	r2, [pc, #288]	@ (800265c <HAL_GPIO_Init+0x2bc>)
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4013      	ands	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a40      	ldr	r2, [pc, #256]	@ (8002660 <HAL_GPIO_Init+0x2c0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d013      	beq.n	800258c <HAL_GPIO_Init+0x1ec>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a3f      	ldr	r2, [pc, #252]	@ (8002664 <HAL_GPIO_Init+0x2c4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00d      	beq.n	8002588 <HAL_GPIO_Init+0x1e8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a3e      	ldr	r2, [pc, #248]	@ (8002668 <HAL_GPIO_Init+0x2c8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d007      	beq.n	8002584 <HAL_GPIO_Init+0x1e4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a3d      	ldr	r2, [pc, #244]	@ (800266c <HAL_GPIO_Init+0x2cc>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d101      	bne.n	8002580 <HAL_GPIO_Init+0x1e0>
 800257c:	2303      	movs	r3, #3
 800257e:	e006      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 8002580:	2304      	movs	r3, #4
 8002582:	e004      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 8002584:	2302      	movs	r3, #2
 8002586:	e002      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 800258c:	2300      	movs	r3, #0
 800258e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002590:	f002 0203 	and.w	r2, r2, #3
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	4093      	lsls	r3, r2
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800259e:	492f      	ldr	r1, [pc, #188]	@ (800265c <HAL_GPIO_Init+0x2bc>)
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	3302      	adds	r3, #2
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	492c      	ldr	r1, [pc, #176]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	608b      	str	r3, [r1, #8]
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	4928      	ldr	r1, [pc, #160]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d006      	beq.n	80025ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025e0:	4b23      	ldr	r3, [pc, #140]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	4922      	ldr	r1, [pc, #136]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60cb      	str	r3, [r1, #12]
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025ee:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	491e      	ldr	r1, [pc, #120]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002608:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	4918      	ldr	r1, [pc, #96]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002616:	4b16      	ldr	r3, [pc, #88]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	43db      	mvns	r3, r3
 800261e:	4914      	ldr	r1, [pc, #80]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 8002620:	4013      	ands	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d021      	beq.n	8002674 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002630:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	490e      	ldr	r1, [pc, #56]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]
 800263c:	e021      	b.n	8002682 <HAL_GPIO_Init+0x2e2>
 800263e:	bf00      	nop
 8002640:	10320000 	.word	0x10320000
 8002644:	10310000 	.word	0x10310000
 8002648:	10220000 	.word	0x10220000
 800264c:	10210000 	.word	0x10210000
 8002650:	10120000 	.word	0x10120000
 8002654:	10110000 	.word	0x10110000
 8002658:	40021000 	.word	0x40021000
 800265c:	40010000 	.word	0x40010000
 8002660:	40010800 	.word	0x40010800
 8002664:	40010c00 	.word	0x40010c00
 8002668:	40011000 	.word	0x40011000
 800266c:	40011400 	.word	0x40011400
 8002670:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_GPIO_Init+0x304>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	43db      	mvns	r3, r3
 800267c:	4909      	ldr	r1, [pc, #36]	@ (80026a4 <HAL_GPIO_Init+0x304>)
 800267e:	4013      	ands	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	3301      	adds	r3, #1
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	fa22 f303 	lsr.w	r3, r2, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	f47f ae8e 	bne.w	80023b4 <HAL_GPIO_Init+0x14>
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	372c      	adds	r7, #44	@ 0x2c
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	40010400 	.word	0x40010400

080026a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026c4:	e003      	b.n	80026ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026c6:	887b      	ldrh	r3, [r7, #2]
 80026c8:	041a      	lsls	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	611a      	str	r2, [r3, #16]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026e2:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ee:	4a05      	ldr	r2, [pc, #20]	@ (8002704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd ffd0 	bl	800069c <HAL_GPIO_EXTI_Callback>
  }
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40010400 	.word	0x40010400

08002708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e12b      	b.n	8002972 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7fe fb0c 	bl	8000d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2224      	movs	r2, #36	@ 0x24
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800275a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800276a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800276c:	f001 f98c 	bl	8003a88 <HAL_RCC_GetPCLK1Freq>
 8002770:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4a81      	ldr	r2, [pc, #516]	@ (800297c <HAL_I2C_Init+0x274>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d807      	bhi.n	800278c <HAL_I2C_Init+0x84>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4a80      	ldr	r2, [pc, #512]	@ (8002980 <HAL_I2C_Init+0x278>)
 8002780:	4293      	cmp	r3, r2
 8002782:	bf94      	ite	ls
 8002784:	2301      	movls	r3, #1
 8002786:	2300      	movhi	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	e006      	b.n	800279a <HAL_I2C_Init+0x92>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a7d      	ldr	r2, [pc, #500]	@ (8002984 <HAL_I2C_Init+0x27c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	bf94      	ite	ls
 8002794:	2301      	movls	r3, #1
 8002796:	2300      	movhi	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0e7      	b.n	8002972 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a78      	ldr	r2, [pc, #480]	@ (8002988 <HAL_I2C_Init+0x280>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	0c9b      	lsrs	r3, r3, #18
 80027ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a6a      	ldr	r2, [pc, #424]	@ (800297c <HAL_I2C_Init+0x274>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d802      	bhi.n	80027dc <HAL_I2C_Init+0xd4>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	3301      	adds	r3, #1
 80027da:	e009      	b.n	80027f0 <HAL_I2C_Init+0xe8>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	4a69      	ldr	r2, [pc, #420]	@ (800298c <HAL_I2C_Init+0x284>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	099b      	lsrs	r3, r3, #6
 80027ee:	3301      	adds	r3, #1
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	430b      	orrs	r3, r1
 80027f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002802:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	495c      	ldr	r1, [pc, #368]	@ (800297c <HAL_I2C_Init+0x274>)
 800280c:	428b      	cmp	r3, r1
 800280e:	d819      	bhi.n	8002844 <HAL_I2C_Init+0x13c>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e59      	subs	r1, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fbb1 f3f3 	udiv	r3, r1, r3
 800281e:	1c59      	adds	r1, r3, #1
 8002820:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002824:	400b      	ands	r3, r1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_I2C_Init+0x138>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1e59      	subs	r1, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fbb1 f3f3 	udiv	r3, r1, r3
 8002838:	3301      	adds	r3, #1
 800283a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283e:	e051      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 8002840:	2304      	movs	r3, #4
 8002842:	e04f      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d111      	bne.n	8002870 <HAL_I2C_Init+0x168>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e58      	subs	r0, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	440b      	add	r3, r1
 800285a:	fbb0 f3f3 	udiv	r3, r0, r3
 800285e:	3301      	adds	r3, #1
 8002860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	e012      	b.n	8002896 <HAL_I2C_Init+0x18e>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1e58      	subs	r0, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	0099      	lsls	r1, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	fbb0 f3f3 	udiv	r3, r0, r3
 8002886:	3301      	adds	r3, #1
 8002888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Init+0x196>
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10e      	bne.n	80028c4 <HAL_I2C_Init+0x1bc>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1e58      	subs	r0, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	440b      	add	r3, r1
 80028b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b8:	3301      	adds	r3, #1
 80028ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028c2:	e00f      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1e58      	subs	r0, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	0099      	lsls	r1, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	6809      	ldr	r1, [r1, #0]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69da      	ldr	r2, [r3, #28]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002912:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6911      	ldr	r1, [r2, #16]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68d2      	ldr	r2, [r2, #12]
 800291e:	4311      	orrs	r1, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	430b      	orrs	r3, r1
 8002926:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	000186a0 	.word	0x000186a0
 8002980:	001e847f 	.word	0x001e847f
 8002984:	003d08ff 	.word	0x003d08ff
 8002988:	431bde83 	.word	0x431bde83
 800298c:	10624dd3 	.word	0x10624dd3

08002990 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08c      	sub	sp, #48	@ 0x30
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	461a      	mov	r2, r3
 800299c:	460b      	mov	r3, r1
 800299e:	817b      	strh	r3, [r7, #10]
 80029a0:	4613      	mov	r3, r2
 80029a2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029a8:	f7fe fb74 	bl	8001094 <HAL_GetTick>
 80029ac:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	f040 824b 	bne.w	8002e52 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2319      	movs	r3, #25
 80029c2:	2201      	movs	r2, #1
 80029c4:	497f      	ldr	r1, [pc, #508]	@ (8002bc4 <HAL_I2C_Master_Receive+0x234>)
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fb1c 	bl	8003004 <I2C_WaitOnFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80029d2:	2302      	movs	r3, #2
 80029d4:	e23e      	b.n	8002e54 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_I2C_Master_Receive+0x54>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e237      	b.n	8002e54 <HAL_I2C_Master_Receive+0x4c4>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d007      	beq.n	8002a0a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2222      	movs	r2, #34	@ 0x22
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2210      	movs	r2, #16
 8002a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	893a      	ldrh	r2, [r7, #8]
 8002a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4a5f      	ldr	r2, [pc, #380]	@ (8002bc8 <HAL_I2C_Master_Receive+0x238>)
 8002a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a4c:	8979      	ldrh	r1, [r7, #10]
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 fa08 	bl	8002e68 <I2C_MasterRequestRead>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e1f8      	b.n	8002e54 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d113      	bne.n	8002a92 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	e1cc      	b.n	8002e2c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d11e      	bne.n	8002ad8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aa8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002aaa:	b672      	cpsid	i
}
 8002aac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ad4:	b662      	cpsie	i
}
 8002ad6:	e035      	b.n	8002b44 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d11e      	bne.n	8002b1e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002af0:	b672      	cpsid	i
}
 8002af2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b1a:	b662      	cpsie	i
}
 8002b1c:	e012      	b.n	8002b44 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b44:	e172      	b.n	8002e2c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	f200 811f 	bhi.w	8002d8e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d123      	bne.n	8002ba0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fb6b 	bl	8003238 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e173      	b.n	8002e54 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b9e:	e145      	b.n	8002e2c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d152      	bne.n	8002c4e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bae:	2200      	movs	r2, #0
 8002bb0:	4906      	ldr	r1, [pc, #24]	@ (8002bcc <HAL_I2C_Master_Receive+0x23c>)
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fa26 	bl	8003004 <I2C_WaitOnFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e148      	b.n	8002e54 <HAL_I2C_Master_Receive+0x4c4>
 8002bc2:	bf00      	nop
 8002bc4:	00100002 	.word	0x00100002
 8002bc8:	ffff0000 	.word	0xffff0000
 8002bcc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd0:	b672      	cpsid	i
}
 8002bd2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c16:	b662      	cpsie	i
}
 8002c18:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c4c:	e0ee      	b.n	8002e2c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c54:	2200      	movs	r2, #0
 8002c56:	4981      	ldr	r1, [pc, #516]	@ (8002e5c <HAL_I2C_Master_Receive+0x4cc>)
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f9d3 	bl	8003004 <I2C_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0f5      	b.n	8002e54 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c78:	b672      	cpsid	i
}
 8002c7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cae:	4b6c      	ldr	r3, [pc, #432]	@ (8002e60 <HAL_I2C_Master_Receive+0x4d0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	08db      	lsrs	r3, r3, #3
 8002cb4:	4a6b      	ldr	r2, [pc, #428]	@ (8002e64 <HAL_I2C_Master_Receive+0x4d4>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	0a1a      	lsrs	r2, r3, #8
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00da      	lsls	r2, r3, #3
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d118      	bne.n	8002d06 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	f043 0220 	orr.w	r2, r3, #32
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002cf6:	b662      	cpsie	i
}
 8002cf8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e0a6      	b.n	8002e54 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d1d9      	bne.n	8002cc8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d56:	b662      	cpsie	i
}
 8002d58:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d8c:	e04e      	b.n	8002e2c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fa50 	bl	8003238 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e058      	b.n	8002e54 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d124      	bne.n	8002e2c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d107      	bne.n	8002dfa <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002df8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f47f ae88 	bne.w	8002b46 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e000      	b.n	8002e54 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002e52:	2302      	movs	r3, #2
  }
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3728      	adds	r7, #40	@ 0x28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	00010004 	.word	0x00010004
 8002e60:	20000004 	.word	0x20000004
 8002e64:	14f8b589 	.word	0x14f8b589

08002e68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	460b      	mov	r3, r1
 8002e76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d006      	beq.n	8002ea2 <I2C_MasterRequestRead+0x3a>
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d003      	beq.n	8002ea2 <I2C_MasterRequestRead+0x3a>
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ea0:	d108      	bne.n	8002eb4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	e00b      	b.n	8002ecc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	2b11      	cmp	r3, #17
 8002eba:	d107      	bne.n	8002ecc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f893 	bl	8003004 <I2C_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00d      	beq.n	8002f00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ef2:	d103      	bne.n	8002efc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002efa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e079      	b.n	8002ff4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f08:	d108      	bne.n	8002f1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f0a:	897b      	ldrh	r3, [r7, #10]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	611a      	str	r2, [r3, #16]
 8002f1a:	e05f      	b.n	8002fdc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f1c:	897b      	ldrh	r3, [r7, #10]
 8002f1e:	11db      	asrs	r3, r3, #7
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f003 0306 	and.w	r3, r3, #6
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	f063 030f 	orn	r3, r3, #15
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4930      	ldr	r1, [pc, #192]	@ (8002ffc <I2C_MasterRequestRead+0x194>)
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f8dc 	bl	80030f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e054      	b.n	8002ff4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f4a:	897b      	ldrh	r3, [r7, #10]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4929      	ldr	r1, [pc, #164]	@ (8003000 <I2C_MasterRequestRead+0x198>)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f8cc 	bl	80030f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e044      	b.n	8002ff4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f831 	bl	8003004 <I2C_WaitOnFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00d      	beq.n	8002fc4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fb6:	d103      	bne.n	8002fc0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fbe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e017      	b.n	8002ff4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002fc4:	897b      	ldrh	r3, [r7, #10]
 8002fc6:	11db      	asrs	r3, r3, #7
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f003 0306 	and.w	r3, r3, #6
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f063 030e 	orn	r3, r3, #14
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4907      	ldr	r1, [pc, #28]	@ (8003000 <I2C_MasterRequestRead+0x198>)
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f888 	bl	80030f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	00010008 	.word	0x00010008
 8003000:	00010002 	.word	0x00010002

08003004 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003014:	e048      	b.n	80030a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d044      	beq.n	80030a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301e:	f7fe f839 	bl	8001094 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d302      	bcc.n	8003034 <I2C_WaitOnFlagUntilTimeout+0x30>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d139      	bne.n	80030a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	0c1b      	lsrs	r3, r3, #16
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b01      	cmp	r3, #1
 800303c:	d10d      	bne.n	800305a <I2C_WaitOnFlagUntilTimeout+0x56>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	43da      	mvns	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4013      	ands	r3, r2
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	e00c      	b.n	8003074 <I2C_WaitOnFlagUntilTimeout+0x70>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	43da      	mvns	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	4013      	ands	r3, r2
 8003066:	b29b      	uxth	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	429a      	cmp	r2, r3
 8003078:	d116      	bne.n	80030a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	f043 0220 	orr.w	r2, r3, #32
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e023      	b.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	0c1b      	lsrs	r3, r3, #16
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d10d      	bne.n	80030ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	43da      	mvns	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4013      	ands	r3, r2
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	e00c      	b.n	80030e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	43da      	mvns	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	4013      	ands	r3, r2
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d093      	beq.n	8003016 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003106:	e071      	b.n	80031ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003116:	d123      	bne.n	8003160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003126:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003130:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	f043 0204 	orr.w	r2, r3, #4
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e067      	b.n	8003230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	d041      	beq.n	80031ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003168:	f7fd ff94 	bl	8001094 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	d302      	bcc.n	800317e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d136      	bne.n	80031ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d10c      	bne.n	80031a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	43da      	mvns	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4013      	ands	r3, r2
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	bf14      	ite	ne
 800319a:	2301      	movne	r3, #1
 800319c:	2300      	moveq	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	e00b      	b.n	80031ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	43da      	mvns	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4013      	ands	r3, r2
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d016      	beq.n	80031ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e021      	b.n	8003230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	0c1b      	lsrs	r3, r3, #16
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d10c      	bne.n	8003210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	43da      	mvns	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4013      	ands	r3, r2
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf14      	ite	ne
 8003208:	2301      	movne	r3, #1
 800320a:	2300      	moveq	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	e00b      	b.n	8003228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	43da      	mvns	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4013      	ands	r3, r2
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	bf14      	ite	ne
 8003222:	2301      	movne	r3, #1
 8003224:	2300      	moveq	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	f47f af6d 	bne.w	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003244:	e049      	b.n	80032da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b10      	cmp	r3, #16
 8003252:	d119      	bne.n	8003288 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0210 	mvn.w	r2, #16
 800325c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e030      	b.n	80032ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003288:	f7fd ff04 	bl	8001094 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	429a      	cmp	r2, r3
 8003296:	d302      	bcc.n	800329e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d11d      	bne.n	80032da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a8:	2b40      	cmp	r3, #64	@ 0x40
 80032aa:	d016      	beq.n	80032da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	f043 0220 	orr.w	r2, r3, #32
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e007      	b.n	80032ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e4:	2b40      	cmp	r3, #64	@ 0x40
 80032e6:	d1ae      	bne.n	8003246 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e272      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8087 	beq.w	8003422 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003314:	4b92      	ldr	r3, [pc, #584]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b04      	cmp	r3, #4
 800331e:	d00c      	beq.n	800333a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003320:	4b8f      	ldr	r3, [pc, #572]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 030c 	and.w	r3, r3, #12
 8003328:	2b08      	cmp	r3, #8
 800332a:	d112      	bne.n	8003352 <HAL_RCC_OscConfig+0x5e>
 800332c:	4b8c      	ldr	r3, [pc, #560]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003338:	d10b      	bne.n	8003352 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333a:	4b89      	ldr	r3, [pc, #548]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d06c      	beq.n	8003420 <HAL_RCC_OscConfig+0x12c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d168      	bne.n	8003420 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e24c      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x76>
 800335c:	4b80      	ldr	r3, [pc, #512]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a7f      	ldr	r2, [pc, #508]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 8003362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	e02e      	b.n	80033c8 <HAL_RCC_OscConfig+0xd4>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x98>
 8003372:	4b7b      	ldr	r3, [pc, #492]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a7a      	ldr	r2, [pc, #488]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 8003378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b78      	ldr	r3, [pc, #480]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a77      	ldr	r2, [pc, #476]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 8003384:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e01d      	b.n	80033c8 <HAL_RCC_OscConfig+0xd4>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0xbc>
 8003396:	4b72      	ldr	r3, [pc, #456]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a71      	ldr	r2, [pc, #452]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 800339c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b6f      	ldr	r3, [pc, #444]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6e      	ldr	r2, [pc, #440]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0xd4>
 80033b0:	4b6b      	ldr	r3, [pc, #428]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a6a      	ldr	r2, [pc, #424]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b68      	ldr	r3, [pc, #416]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a67      	ldr	r2, [pc, #412]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 80033c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d013      	beq.n	80033f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fd fe60 	bl	8001094 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d8:	f7fd fe5c 	bl	8001094 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	@ 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e200      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0xe4>
 80033f6:	e014      	b.n	8003422 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fd fe4c 	bl	8001094 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003400:	f7fd fe48 	bl	8001094 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	@ 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e1ec      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	4b53      	ldr	r3, [pc, #332]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x10c>
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d063      	beq.n	80034f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800342e:	4b4c      	ldr	r3, [pc, #304]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800343a:	4b49      	ldr	r3, [pc, #292]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b08      	cmp	r3, #8
 8003444:	d11c      	bne.n	8003480 <HAL_RCC_OscConfig+0x18c>
 8003446:	4b46      	ldr	r3, [pc, #280]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d116      	bne.n	8003480 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	4b43      	ldr	r3, [pc, #268]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_RCC_OscConfig+0x176>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d001      	beq.n	800346a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e1c0      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346a:	4b3d      	ldr	r3, [pc, #244]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4939      	ldr	r1, [pc, #228]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	e03a      	b.n	80034f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d020      	beq.n	80034ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003488:	4b36      	ldr	r3, [pc, #216]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7fd fe01 	bl	8001094 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003496:	f7fd fdfd 	bl	8001094 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e1a1      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4927      	ldr	r1, [pc, #156]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
 80034c8:	e015      	b.n	80034f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ca:	4b26      	ldr	r3, [pc, #152]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d0:	f7fd fde0 	bl	8001094 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d8:	f7fd fddc 	bl	8001094 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e180      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d03a      	beq.n	8003578 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d019      	beq.n	800353e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800350a:	4b17      	ldr	r3, [pc, #92]	@ (8003568 <HAL_RCC_OscConfig+0x274>)
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003510:	f7fd fdc0 	bl	8001094 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003518:	f7fd fdbc 	bl	8001094 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e160      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352a:	4b0d      	ldr	r3, [pc, #52]	@ (8003560 <HAL_RCC_OscConfig+0x26c>)
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003536:	2001      	movs	r0, #1
 8003538:	f000 face 	bl	8003ad8 <RCC_Delay>
 800353c:	e01c      	b.n	8003578 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <HAL_RCC_OscConfig+0x274>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003544:	f7fd fda6 	bl	8001094 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800354a:	e00f      	b.n	800356c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354c:	f7fd fda2 	bl	8001094 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d908      	bls.n	800356c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e146      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000
 8003564:	42420000 	.word	0x42420000
 8003568:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356c:	4b92      	ldr	r3, [pc, #584]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e9      	bne.n	800354c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80a6 	beq.w	80036d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003586:	2300      	movs	r3, #0
 8003588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358a:	4b8b      	ldr	r3, [pc, #556]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10d      	bne.n	80035b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003596:	4b88      	ldr	r3, [pc, #544]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	4a87      	ldr	r2, [pc, #540]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a0:	61d3      	str	r3, [r2, #28]
 80035a2:	4b85      	ldr	r3, [pc, #532]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ae:	2301      	movs	r3, #1
 80035b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b2:	4b82      	ldr	r3, [pc, #520]	@ (80037bc <HAL_RCC_OscConfig+0x4c8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d118      	bne.n	80035f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035be:	4b7f      	ldr	r3, [pc, #508]	@ (80037bc <HAL_RCC_OscConfig+0x4c8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a7e      	ldr	r2, [pc, #504]	@ (80037bc <HAL_RCC_OscConfig+0x4c8>)
 80035c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ca:	f7fd fd63 	bl	8001094 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d2:	f7fd fd5f 	bl	8001094 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b64      	cmp	r3, #100	@ 0x64
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e103      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e4:	4b75      	ldr	r3, [pc, #468]	@ (80037bc <HAL_RCC_OscConfig+0x4c8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d106      	bne.n	8003606 <HAL_RCC_OscConfig+0x312>
 80035f8:	4b6f      	ldr	r3, [pc, #444]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	4a6e      	ldr	r2, [pc, #440]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	6213      	str	r3, [r2, #32]
 8003604:	e02d      	b.n	8003662 <HAL_RCC_OscConfig+0x36e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0x334>
 800360e:	4b6a      	ldr	r3, [pc, #424]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	4a69      	ldr	r2, [pc, #420]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	6213      	str	r3, [r2, #32]
 800361a:	4b67      	ldr	r3, [pc, #412]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4a66      	ldr	r2, [pc, #408]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 8003620:	f023 0304 	bic.w	r3, r3, #4
 8003624:	6213      	str	r3, [r2, #32]
 8003626:	e01c      	b.n	8003662 <HAL_RCC_OscConfig+0x36e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b05      	cmp	r3, #5
 800362e:	d10c      	bne.n	800364a <HAL_RCC_OscConfig+0x356>
 8003630:	4b61      	ldr	r3, [pc, #388]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	4a60      	ldr	r2, [pc, #384]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 8003636:	f043 0304 	orr.w	r3, r3, #4
 800363a:	6213      	str	r3, [r2, #32]
 800363c:	4b5e      	ldr	r3, [pc, #376]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4a5d      	ldr	r2, [pc, #372]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6213      	str	r3, [r2, #32]
 8003648:	e00b      	b.n	8003662 <HAL_RCC_OscConfig+0x36e>
 800364a:	4b5b      	ldr	r3, [pc, #364]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	4a5a      	ldr	r2, [pc, #360]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	6213      	str	r3, [r2, #32]
 8003656:	4b58      	ldr	r3, [pc, #352]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	4a57      	ldr	r2, [pc, #348]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	f023 0304 	bic.w	r3, r3, #4
 8003660:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d015      	beq.n	8003696 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366a:	f7fd fd13 	bl	8001094 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fd fd0f 	bl	8001094 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e0b1      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003688:	4b4b      	ldr	r3, [pc, #300]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0ee      	beq.n	8003672 <HAL_RCC_OscConfig+0x37e>
 8003694:	e014      	b.n	80036c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003696:	f7fd fcfd 	bl	8001094 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369c:	e00a      	b.n	80036b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369e:	f7fd fcf9 	bl	8001094 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e09b      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b4:	4b40      	ldr	r3, [pc, #256]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ee      	bne.n	800369e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d105      	bne.n	80036d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c6:	4b3c      	ldr	r3, [pc, #240]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	4a3b      	ldr	r2, [pc, #236]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 8087 	beq.w	80037ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036dc:	4b36      	ldr	r3, [pc, #216]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d061      	beq.n	80037ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d146      	bne.n	800377e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f0:	4b33      	ldr	r3, [pc, #204]	@ (80037c0 <HAL_RCC_OscConfig+0x4cc>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f6:	f7fd fccd 	bl	8001094 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fe:	f7fd fcc9 	bl	8001094 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e06d      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003710:	4b29      	ldr	r3, [pc, #164]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f0      	bne.n	80036fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003724:	d108      	bne.n	8003738 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003726:	4b24      	ldr	r3, [pc, #144]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	4921      	ldr	r1, [pc, #132]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003738:	4b1f      	ldr	r3, [pc, #124]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a19      	ldr	r1, [r3, #32]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	430b      	orrs	r3, r1
 800374a:	491b      	ldr	r1, [pc, #108]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003750:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <HAL_RCC_OscConfig+0x4cc>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7fd fc9d 	bl	8001094 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375e:	f7fd fc99 	bl	8001094 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e03d      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003770:	4b11      	ldr	r3, [pc, #68]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x46a>
 800377c:	e035      	b.n	80037ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377e:	4b10      	ldr	r3, [pc, #64]	@ (80037c0 <HAL_RCC_OscConfig+0x4cc>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fd fc86 	bl	8001094 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7fd fc82 	bl	8001094 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e026      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x498>
 80037aa:	e01e      	b.n	80037ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d107      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e019      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40007000 	.word	0x40007000
 80037c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037c4:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <HAL_RCC_OscConfig+0x500>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d106      	bne.n	80037e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d001      	beq.n	80037ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000

080037f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0d0      	b.n	80039ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b6a      	ldr	r3, [pc, #424]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d910      	bls.n	800383c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b67      	ldr	r3, [pc, #412]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 0207 	bic.w	r2, r3, #7
 8003822:	4965      	ldr	r1, [pc, #404]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b63      	ldr	r3, [pc, #396]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0b8      	b.n	80039ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d020      	beq.n	800388a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003854:	4b59      	ldr	r3, [pc, #356]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a58      	ldr	r2, [pc, #352]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800385e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800386c:	4b53      	ldr	r3, [pc, #332]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4a52      	ldr	r2, [pc, #328]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003876:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003878:	4b50      	ldr	r3, [pc, #320]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	494d      	ldr	r1, [pc, #308]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d040      	beq.n	8003918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d107      	bne.n	80038ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389e:	4b47      	ldr	r3, [pc, #284]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d115      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e07f      	b.n	80039ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b41      	ldr	r3, [pc, #260]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e073      	b.n	80039ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	4b3d      	ldr	r3, [pc, #244]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e06b      	b.n	80039ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	4b39      	ldr	r3, [pc, #228]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f023 0203 	bic.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4936      	ldr	r1, [pc, #216]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e8:	f7fd fbd4 	bl	8001094 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fd fbd0 	bl	8001094 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e053      	b.n	80039ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	4b2d      	ldr	r3, [pc, #180]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 020c 	and.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	429a      	cmp	r2, r3
 8003916:	d1eb      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4b27      	ldr	r3, [pc, #156]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d210      	bcs.n	8003948 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b24      	ldr	r3, [pc, #144]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 0207 	bic.w	r2, r3, #7
 800392e:	4922      	ldr	r1, [pc, #136]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b20      	ldr	r3, [pc, #128]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e032      	b.n	80039ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003954:	4b19      	ldr	r3, [pc, #100]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4916      	ldr	r1, [pc, #88]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003962:	4313      	orrs	r3, r2
 8003964:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003972:	4b12      	ldr	r3, [pc, #72]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	490e      	ldr	r1, [pc, #56]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	4313      	orrs	r3, r2
 8003984:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003986:	f000 f821 	bl	80039cc <HAL_RCC_GetSysClockFreq>
 800398a:	4602      	mov	r2, r0
 800398c:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	490a      	ldr	r1, [pc, #40]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003998:	5ccb      	ldrb	r3, [r1, r3]
 800399a:	fa22 f303 	lsr.w	r3, r2, r3
 800399e:	4a09      	ldr	r2, [pc, #36]	@ (80039c4 <HAL_RCC_ClockConfig+0x1cc>)
 80039a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039a2:	4b09      	ldr	r3, [pc, #36]	@ (80039c8 <HAL_RCC_ClockConfig+0x1d0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fd fb32 	bl	8001010 <HAL_InitTick>

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40022000 	.word	0x40022000
 80039bc:	40021000 	.word	0x40021000
 80039c0:	08005a9c 	.word	0x08005a9c
 80039c4:	20000004 	.word	0x20000004
 80039c8:	20000008 	.word	0x20000008

080039cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	2300      	movs	r3, #0
 80039e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x94>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d002      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x30>
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d003      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0x36>
 80039fa:	e027      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039fc:	4b19      	ldr	r3, [pc, #100]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x98>)
 80039fe:	613b      	str	r3, [r7, #16]
      break;
 8003a00:	e027      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	0c9b      	lsrs	r3, r3, #18
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	4a17      	ldr	r2, [pc, #92]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a0c:	5cd3      	ldrb	r3, [r2, r3]
 8003a0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d010      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a1a:	4b11      	ldr	r3, [pc, #68]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	0c5b      	lsrs	r3, r3, #17
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	4a11      	ldr	r2, [pc, #68]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a26:	5cd3      	ldrb	r3, [r2, r3]
 8003a28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a2e:	fb03 f202 	mul.w	r2, r3, r2
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	e004      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a40:	fb02 f303 	mul.w	r3, r2, r3
 8003a44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	613b      	str	r3, [r7, #16]
      break;
 8003a4a:	e002      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a4c:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a4e:	613b      	str	r3, [r7, #16]
      break;
 8003a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a52:	693b      	ldr	r3, [r7, #16]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000
 8003a64:	007a1200 	.word	0x007a1200
 8003a68:	08005ab4 	.word	0x08005ab4
 8003a6c:	08005ac4 	.word	0x08005ac4
 8003a70:	003d0900 	.word	0x003d0900

08003a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a78:	4b02      	ldr	r3, [pc, #8]	@ (8003a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	20000004 	.word	0x20000004

08003a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a8c:	f7ff fff2 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b05      	ldr	r3, [pc, #20]	@ (8003aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	4903      	ldr	r1, [pc, #12]	@ (8003aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	08005aac 	.word	0x08005aac

08003ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ab4:	f7ff ffde 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b05      	ldr	r3, [pc, #20]	@ (8003ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	0adb      	lsrs	r3, r3, #11
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	4903      	ldr	r1, [pc, #12]	@ (8003ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	08005aac 	.word	0x08005aac

08003ad8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8003b0c <RCC_Delay+0x34>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8003b10 <RCC_Delay+0x38>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	0a5b      	lsrs	r3, r3, #9
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	fb02 f303 	mul.w	r3, r2, r3
 8003af2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003af4:	bf00      	nop
  }
  while (Delay --);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1e5a      	subs	r2, r3, #1
 8003afa:	60fa      	str	r2, [r7, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1f9      	bne.n	8003af4 <RCC_Delay+0x1c>
}
 8003b00:	bf00      	nop
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	20000004 	.word	0x20000004
 8003b10:	10624dd3 	.word	0x10624dd3

08003b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d07d      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b30:	2300      	movs	r3, #0
 8003b32:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b34:	4b4f      	ldr	r3, [pc, #316]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10d      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b40:	4b4c      	ldr	r3, [pc, #304]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	4a4b      	ldr	r2, [pc, #300]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b4a:	61d3      	str	r3, [r2, #28]
 8003b4c:	4b49      	ldr	r3, [pc, #292]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b54:	60bb      	str	r3, [r7, #8]
 8003b56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5c:	4b46      	ldr	r3, [pc, #280]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d118      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b68:	4b43      	ldr	r3, [pc, #268]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a42      	ldr	r2, [pc, #264]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b74:	f7fd fa8e 	bl	8001094 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7a:	e008      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7c:	f7fd fa8a 	bl	8001094 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	@ 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e06d      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b9a:	4b36      	ldr	r3, [pc, #216]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d02e      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d027      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bce:	4a29      	ldr	r2, [pc, #164]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d014      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bde:	f7fd fa59 	bl	8001094 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fd fa55 	bl	8001094 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e036      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0ee      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c08:	4b1a      	ldr	r3, [pc, #104]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4917      	ldr	r1, [pc, #92]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d105      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c20:	4b14      	ldr	r3, [pc, #80]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	4a13      	ldr	r2, [pc, #76]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c38:	4b0e      	ldr	r3, [pc, #56]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	490b      	ldr	r1, [pc, #44]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c56:	4b07      	ldr	r3, [pc, #28]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	4904      	ldr	r1, [pc, #16]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40007000 	.word	0x40007000
 8003c7c:	42420440 	.word	0x42420440

08003c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e042      	b.n	8003d18 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fd f8a0 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2224      	movs	r2, #36	@ 0x24
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fe95 	bl	80049f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08c      	sub	sp, #48	@ 0x30
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d146      	bne.n	8003dc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e03f      	b.n	8003dca <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fbed 	bl	800453c <UART_Start_Receive_DMA>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d125      	bne.n	8003dbc <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d70:	2300      	movs	r3, #0
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	617b      	str	r3, [r7, #20]
   return(result);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f043 0310 	orr.w	r3, r3, #16
 8003d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003da6:	627a      	str	r2, [r7, #36]	@ 0x24
 8003da8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6a39      	ldr	r1, [r7, #32]
 8003dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e5      	bne.n	8003d86 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8003dba:	e002      	b.n	8003dc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8003dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003dc6:	e000      	b.n	8003dca <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3730      	adds	r7, #48	@ 0x30
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b0ba      	sub	sp, #232	@ 0xe8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_UART_IRQHandler+0x66>
 8003e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fd20 	bl	8004878 <UART_Receive_IT>
      return;
 8003e38:	e25b      	b.n	80042f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80de 	beq.w	8004000 <HAL_UART_IRQHandler+0x22c>
 8003e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e54:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80d1 	beq.w	8004000 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <HAL_UART_IRQHandler+0xae>
 8003e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7a:	f043 0201 	orr.w	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_UART_IRQHandler+0xd2>
 8003e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	f043 0202 	orr.w	r2, r3, #2
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <HAL_UART_IRQHandler+0xf6>
 8003eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	f043 0204 	orr.w	r2, r3, #4
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d011      	beq.n	8003efa <HAL_UART_IRQHandler+0x126>
 8003ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	f043 0208 	orr.w	r2, r3, #8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 81f2 	beq.w	80042e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_UART_IRQHandler+0x14e>
 8003f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fcab 	bl	8004878 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <HAL_UART_IRQHandler+0x17a>
 8003f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d04f      	beq.n	8003fee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fbb5 	bl	80046be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d041      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3314      	adds	r3, #20
 8003f68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3314      	adds	r3, #20
 8003f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1d9      	bne.n	8003f62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d013      	beq.n	8003fde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fba:	4a7e      	ldr	r2, [pc, #504]	@ (80041b4 <HAL_UART_IRQHandler+0x3e0>)
 8003fbc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fd fe40 	bl	8001c48 <HAL_DMA_Abort_IT>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d016      	beq.n	8003ffc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fdc:	e00e      	b.n	8003ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f9a5 	bl	800432e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe4:	e00a      	b.n	8003ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f9a1 	bl	800432e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fec:	e006      	b.n	8003ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f99d 	bl	800432e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ffa:	e175      	b.n	80042e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffc:	bf00      	nop
    return;
 8003ffe:	e173      	b.n	80042e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	2b01      	cmp	r3, #1
 8004006:	f040 814f 	bne.w	80042a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800400a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8148 	beq.w	80042a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8141 	beq.w	80042a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80b6 	beq.w	80041b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8145 	beq.w	80042ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800406a:	429a      	cmp	r2, r3
 800406c:	f080 813e 	bcs.w	80042ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004076:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b20      	cmp	r3, #32
 8004080:	f000 8088 	beq.w	8004194 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800409a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800409e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	330c      	adds	r3, #12
 80040ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80040b0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80040bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80040c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1d9      	bne.n	8004084 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3314      	adds	r3, #20
 80040d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80040e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3314      	adds	r3, #20
 80040f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040f4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80040f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80040fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004100:	e841 2300 	strex	r3, r2, [r1]
 8004104:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004106:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e1      	bne.n	80040d0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3314      	adds	r3, #20
 8004112:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800411c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800411e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004122:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3314      	adds	r3, #20
 800412c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004130:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004132:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004136:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800413e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e3      	bne.n	800410c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004164:	f023 0310 	bic.w	r3, r3, #16
 8004168:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004176:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004178:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800417c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e3      	bne.n	8004152 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418e:	4618      	mov	r0, r3
 8004190:	f7fd fd1e 	bl	8001bd0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	4619      	mov	r1, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fc fa4c 	bl	8000648 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041b0:	e09c      	b.n	80042ec <HAL_UART_IRQHandler+0x518>
 80041b2:	bf00      	nop
 80041b4:	08004783 	.word	0x08004783
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 808e 	beq.w	80042f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80041d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8089 	beq.w	80042f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004202:	647a      	str	r2, [r7, #68]	@ 0x44
 8004204:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004208:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e3      	bne.n	80041de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3314      	adds	r3, #20
 800421c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	623b      	str	r3, [r7, #32]
   return(result);
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3314      	adds	r3, #20
 8004236:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800423a:	633a      	str	r2, [r7, #48]	@ 0x30
 800423c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e3      	bne.n	8004216 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	60fb      	str	r3, [r7, #12]
   return(result);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0310 	bic.w	r3, r3, #16
 8004272:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004280:	61fa      	str	r2, [r7, #28]
 8004282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	69b9      	ldr	r1, [r7, #24]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	617b      	str	r3, [r7, #20]
   return(result);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e3      	bne.n	800425c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800429a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7fc f9d1 	bl	8000648 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042a6:	e023      	b.n	80042f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d009      	beq.n	80042c8 <HAL_UART_IRQHandler+0x4f4>
 80042b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fa72 	bl	80047aa <UART_Transmit_IT>
    return;
 80042c6:	e014      	b.n	80042f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00e      	beq.n	80042f2 <HAL_UART_IRQHandler+0x51e>
 80042d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fab1 	bl	8004848 <UART_EndTransmit_IT>
    return;
 80042e6:	e004      	b.n	80042f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80042e8:	bf00      	nop
 80042ea:	e002      	b.n	80042f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80042ec:	bf00      	nop
 80042ee:	e000      	b.n	80042f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80042f0:	bf00      	nop
  }
}
 80042f2:	37e8      	adds	r7, #232	@ 0xe8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr

0800430a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b09c      	sub	sp, #112	@ 0x70
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d172      	bne.n	8004442 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800435c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800435e:	2200      	movs	r2, #0
 8004360:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	330c      	adds	r3, #12
 8004368:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800437a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	330c      	adds	r3, #12
 8004380:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004382:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004384:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004388:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e5      	bne.n	8004362 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004396:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3314      	adds	r3, #20
 800439c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80043ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3314      	adds	r3, #20
 80043b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80043b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80043b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e5      	bne.n	8004396 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3314      	adds	r3, #20
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	623b      	str	r3, [r7, #32]
   return(result);
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80043e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3314      	adds	r3, #20
 80043e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80043ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80043ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e5      	bne.n	80043ca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004400:	2220      	movs	r2, #32
 8004402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004406:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	2b01      	cmp	r3, #1
 800440c:	d119      	bne.n	8004442 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800440e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	330c      	adds	r3, #12
 8004414:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	e853 3f00 	ldrex	r3, [r3]
 800441c:	60fb      	str	r3, [r7, #12]
   return(result);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f023 0310 	bic.w	r3, r3, #16
 8004424:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	330c      	adds	r3, #12
 800442c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800442e:	61fa      	str	r2, [r7, #28]
 8004430:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	69b9      	ldr	r1, [r7, #24]
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	617b      	str	r3, [r7, #20]
   return(result);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e5      	bne.n	800440e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004444:	2200      	movs	r2, #0
 8004446:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800444a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444c:	2b01      	cmp	r3, #1
 800444e:	d106      	bne.n	800445e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004452:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004454:	4619      	mov	r1, r3
 8004456:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004458:	f7fc f8f6 	bl	8000648 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800445c:	e002      	b.n	8004464 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800445e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004460:	f7ff ff53 	bl	800430a <HAL_UART_RxCpltCallback>
}
 8004464:	bf00      	nop
 8004466:	3770      	adds	r7, #112	@ 0x70
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004484:	2b01      	cmp	r3, #1
 8004486:	d108      	bne.n	800449a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800448c:	085b      	lsrs	r3, r3, #1
 800448e:	b29b      	uxth	r3, r3
 8004490:	4619      	mov	r1, r3
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7fc f8d8 	bl	8000648 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004498:	e002      	b.n	80044a0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff ff3e 	bl	800431c <HAL_UART_RxHalfCpltCallback>
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b21      	cmp	r3, #33	@ 0x21
 80044da:	d108      	bne.n	80044ee <UART_DMAError+0x46>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2200      	movs	r2, #0
 80044e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80044e8:	68b8      	ldr	r0, [r7, #8]
 80044ea:	f000 f8c1 	bl	8004670 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b22      	cmp	r3, #34	@ 0x22
 800450e:	d108      	bne.n	8004522 <UART_DMAError+0x7a>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2200      	movs	r2, #0
 800451a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800451c:	68b8      	ldr	r0, [r7, #8]
 800451e:	f000 f8ce 	bl	80046be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004526:	f043 0210 	orr.w	r2, r3, #16
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800452e:	68b8      	ldr	r0, [r7, #8]
 8004530:	f7ff fefd 	bl	800432e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004534:	bf00      	nop
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b098      	sub	sp, #96	@ 0x60
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	4613      	mov	r3, r2
 8004548:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2222      	movs	r2, #34	@ 0x22
 8004560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004568:	4a3e      	ldr	r2, [pc, #248]	@ (8004664 <UART_Start_Receive_DMA+0x128>)
 800456a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004570:	4a3d      	ldr	r2, [pc, #244]	@ (8004668 <UART_Start_Receive_DMA+0x12c>)
 8004572:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004578:	4a3c      	ldr	r2, [pc, #240]	@ (800466c <UART_Start_Receive_DMA+0x130>)
 800457a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004580:	2200      	movs	r2, #0
 8004582:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004584:	f107 0308 	add.w	r3, r7, #8
 8004588:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	f7fd fab8 	bl	8001b10 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d019      	beq.n	80045f2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	330c      	adds	r3, #12
 80045c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	330c      	adds	r3, #12
 80045dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045de:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80045e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80045e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80045ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e5      	bne.n	80045be <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3314      	adds	r3, #20
 80045f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	657b      	str	r3, [r7, #84]	@ 0x54
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3314      	adds	r3, #20
 8004610:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004612:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004614:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004618:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e5      	bne.n	80045f2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3314      	adds	r3, #20
 800462c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	617b      	str	r3, [r7, #20]
   return(result);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800463c:	653b      	str	r3, [r7, #80]	@ 0x50
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3314      	adds	r3, #20
 8004644:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004646:	627a      	str	r2, [r7, #36]	@ 0x24
 8004648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6a39      	ldr	r1, [r7, #32]
 800464c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	61fb      	str	r3, [r7, #28]
   return(result);
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e5      	bne.n	8004626 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3760      	adds	r7, #96	@ 0x60
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	08004341 	.word	0x08004341
 8004668:	0800446d 	.word	0x0800446d
 800466c:	080044a9 	.word	0x080044a9

08004670 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004670:	b480      	push	{r7}
 8004672:	b089      	sub	sp, #36	@ 0x24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	60bb      	str	r3, [r7, #8]
   return(result);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800468e:	61fb      	str	r3, [r7, #28]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	330c      	adds	r3, #12
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	61ba      	str	r2, [r7, #24]
 800469a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6979      	ldr	r1, [r7, #20]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	613b      	str	r3, [r7, #16]
   return(result);
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e5      	bne.n	8004678 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80046b4:	bf00      	nop
 80046b6:	3724      	adds	r7, #36	@ 0x24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr

080046be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046be:	b480      	push	{r7}
 80046c0:	b095      	sub	sp, #84	@ 0x54
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	330c      	adds	r3, #12
 80046cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80046e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e5      	bne.n	80046c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3314      	adds	r3, #20
 8004700:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	61fb      	str	r3, [r7, #28]
   return(result);
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	f023 0301 	bic.w	r3, r3, #1
 8004710:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3314      	adds	r3, #20
 8004718:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800471a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800471c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e5      	bne.n	80046fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004732:	2b01      	cmp	r3, #1
 8004734:	d119      	bne.n	800476a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	60bb      	str	r3, [r7, #8]
   return(result);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f023 0310 	bic.w	r3, r3, #16
 800474c:	647b      	str	r3, [r7, #68]	@ 0x44
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	330c      	adds	r3, #12
 8004754:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004756:	61ba      	str	r2, [r7, #24]
 8004758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	6979      	ldr	r1, [r7, #20]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	613b      	str	r3, [r7, #16]
   return(result);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e5      	bne.n	8004736 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004778:	bf00      	nop
 800477a:	3754      	adds	r7, #84	@ 0x54
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr

08004782 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7ff fdc6 	bl	800432e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b085      	sub	sp, #20
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b21      	cmp	r3, #33	@ 0x21
 80047bc:	d13e      	bne.n	800483c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c6:	d114      	bne.n	80047f2 <UART_Transmit_IT+0x48>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d110      	bne.n	80047f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	1c9a      	adds	r2, r3, #2
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	621a      	str	r2, [r3, #32]
 80047f0:	e008      	b.n	8004804 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	1c59      	adds	r1, r3, #1
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6211      	str	r1, [r2, #32]
 80047fc:	781a      	ldrb	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29b      	uxth	r3, r3
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	4619      	mov	r1, r3
 8004812:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10f      	bne.n	8004838 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004826:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004836:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	e000      	b.n	800483e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800483c:	2302      	movs	r3, #2
  }
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800485e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff fd45 	bl	80042f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08c      	sub	sp, #48	@ 0x30
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b22      	cmp	r3, #34	@ 0x22
 800488a:	f040 80ae 	bne.w	80049ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004896:	d117      	bne.n	80048c8 <UART_Receive_IT+0x50>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d113      	bne.n	80048c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c0:	1c9a      	adds	r2, r3, #2
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80048c6:	e026      	b.n	8004916 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048da:	d007      	beq.n	80048ec <UART_Receive_IT+0x74>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <UART_Receive_IT+0x82>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d106      	bne.n	80048fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f6:	701a      	strb	r2, [r3, #0]
 80048f8:	e008      	b.n	800490c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004906:	b2da      	uxtb	r2, r3
 8004908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800490a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29b      	uxth	r3, r3
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	4619      	mov	r1, r3
 8004924:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004926:	2b00      	cmp	r3, #0
 8004928:	d15d      	bne.n	80049e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0220 	bic.w	r2, r2, #32
 8004938:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004948:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0201 	bic.w	r2, r2, #1
 8004958:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496c:	2b01      	cmp	r3, #1
 800496e:	d135      	bne.n	80049dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	613b      	str	r3, [r7, #16]
   return(result);
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f023 0310 	bic.w	r3, r3, #16
 800498c:	627b      	str	r3, [r7, #36]	@ 0x24
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004996:	623a      	str	r2, [r7, #32]
 8004998:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	69f9      	ldr	r1, [r7, #28]
 800499c:	6a3a      	ldr	r2, [r7, #32]
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e5      	bne.n	8004976 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d10a      	bne.n	80049ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049d2:	4619      	mov	r1, r3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7fb fe37 	bl	8000648 <HAL_UARTEx_RxEventCallback>
 80049da:	e002      	b.n	80049e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff fc94 	bl	800430a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e002      	b.n	80049ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e000      	b.n	80049ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049ea:	2302      	movs	r3, #2
  }
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3730      	adds	r7, #48	@ 0x30
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004a2e:	f023 030c 	bic.w	r3, r3, #12
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2c      	ldr	r2, [pc, #176]	@ (8004b08 <UART_SetConfig+0x114>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d103      	bne.n	8004a64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a5c:	f7ff f828 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 8004a60:	60f8      	str	r0, [r7, #12]
 8004a62:	e002      	b.n	8004a6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a64:	f7ff f810 	bl	8003a88 <HAL_RCC_GetPCLK1Freq>
 8004a68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009a      	lsls	r2, r3, #2
 8004a74:	441a      	add	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a80:	4a22      	ldr	r2, [pc, #136]	@ (8004b0c <UART_SetConfig+0x118>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	0119      	lsls	r1, r3, #4
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009a      	lsls	r2, r3, #2
 8004a94:	441a      	add	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b0c <UART_SetConfig+0x118>)
 8004aa2:	fba3 0302 	umull	r0, r3, r3, r2
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	2064      	movs	r0, #100	@ 0x64
 8004aaa:	fb00 f303 	mul.w	r3, r0, r3
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	3332      	adds	r3, #50	@ 0x32
 8004ab4:	4a15      	ldr	r2, [pc, #84]	@ (8004b0c <UART_SetConfig+0x118>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ac0:	4419      	add	r1, r3
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009a      	lsls	r2, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b0c <UART_SetConfig+0x118>)
 8004ada:	fba3 0302 	umull	r0, r3, r3, r2
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	2064      	movs	r0, #100	@ 0x64
 8004ae2:	fb00 f303 	mul.w	r3, r0, r3
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	3332      	adds	r3, #50	@ 0x32
 8004aec:	4a07      	ldr	r2, [pc, #28]	@ (8004b0c <UART_SetConfig+0x118>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	f003 020f 	and.w	r2, r3, #15
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	440a      	add	r2, r1
 8004afe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b00:	bf00      	nop
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40013800 	.word	0x40013800
 8004b0c:	51eb851f 	.word	0x51eb851f

08004b10 <Flash_Read>:
 *      Author: CHINH
 */
#include "EEPROMx.h"

uint16_t Flash_Read(uint32_t Addr)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

    return *(uint16_t *)(Addr);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	881b      	ldrh	r3, [r3, #0]

}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bc80      	pop	{r7}
 8004b24:	4770      	bx	lr

08004b26 <Flash_ErasePage>:

HAL_StatusTypeDef Flash_ErasePage(uint8_t Page)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b088      	sub	sp, #32
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	assert_param(IS_FLASH_ADDRESS(Page_Address));

	HAL_FLASH_Unlock();
 8004b30:	f7fd faa6 	bl	8002080 <HAL_FLASH_Unlock>
    // Define the page and bank for the erase operation
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PageError = 0x0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.Banks = FLASH_BANK_1;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	613b      	str	r3, [r7, #16]
    EraseInitStruct.PageAddress =(FLASH_BASE + ((Page) * FLASH_PAGE_SIZE));
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8004b46:	029b      	lsls	r3, r3, #10
 8004b48:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbPages = 1;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8004b4e:	f107 0208 	add.w	r2, r7, #8
 8004b52:	f107 030c 	add.w	r3, r7, #12
 8004b56:	4611      	mov	r1, r2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fd fb79 	bl	8002250 <HAL_FLASHEx_Erase>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 8004b62:	f7fd fab3 	bl	80020cc <HAL_FLASH_Lock>

  	return status;
 8004b66:	7ffb      	ldrb	r3, [r7, #31]

}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <Flash_Write>:




HAL_StatusTypeDef Flash_Write(uint32_t TypeProgram,uint32_t WriteAddr, uint16_t data)
{
 8004b70:	b5b0      	push	{r4, r5, r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef state;

	assert_param((((WriteAddr) >= FLASH_START_ADDR) && ((WriteAddr) <= FLASH_END_ADDR)));

	HAL_FLASH_Unlock();
 8004b7e:	f7fd fa7f 	bl	8002080 <HAL_FLASH_Unlock>


	state = HAL_FLASH_Program(TypeProgram, WriteAddr,data);
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	2200      	movs	r2, #0
 8004b86:	461c      	mov	r4, r3
 8004b88:	4615      	mov	r5, r2
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	462b      	mov	r3, r5
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f7fd fa05 	bl	8001fa0 <HAL_FLASH_Program>
 8004b96:	4603      	mov	r3, r0
 8004b98:	75fb      	strb	r3, [r7, #23]

    HAL_FLASH_Lock();
 8004b9a:	f7fd fa97 	bl	80020cc <HAL_FLASH_Lock>

    return state;
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]

}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bdb0      	pop	{r4, r5, r7, pc}

08004ba8 <_ZN5Flags11TurnONFlagsEv>:
 */


#include "Flags.h"

void Flags::TurnONFlags(void) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
	#ifdef _Flag_500ms
		if ((HAL_GetTick() - StartTimer.t1s) >= 500) {
 8004bb0:	f7fc fa70 	bl	8001094 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	bf8c      	ite	hi
 8004bc4:	2301      	movhi	r3, #1
 8004bc6:	2300      	movls	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <_ZN5Flags11TurnONFlagsEv+0x36>
			Flag.t500ms = true;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	741a      	strb	r2, [r3, #16]
			StartTimer.t500ms =HAL_GetTick();
 8004bd4:	f7fc fa5e 	bl	8001094 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	601a      	str	r2, [r3, #0]
		}
	#endif
    #ifdef _Flag_1s
        if ((HAL_GetTick() - StartTimer.t1s) >= 1000) {
 8004bde:	f7fc fa59 	bl	8001094 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	bf8c      	ite	hi
 8004bf2:	2301      	movhi	r3, #1
 8004bf4:	2300      	movls	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d007      	beq.n	8004c0c <_ZN5Flags11TurnONFlagsEv+0x64>
            Flag.t1s = true;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	745a      	strb	r2, [r3, #17]
            StartTimer.t1s = HAL_GetTick();
 8004c02:	f7fc fa47 	bl	8001094 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	605a      	str	r2, [r3, #4]
            Flag.t3s = true;
            StartTimer.t3s = HAL_GetTick();
        }
    #endif
    #ifdef _Flag_4s
        if ((HAL_GetTick() - StartTimer.t4s) >= 4000) {
 8004c0c:	f7fc fa42 	bl	8001094 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	bf8c      	ite	hi
 8004c20:	2301      	movhi	r3, #1
 8004c22:	2300      	movls	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <_ZN5Flags11TurnONFlagsEv+0x92>
            Flag.t4s = true;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	749a      	strb	r2, [r3, #18]
            StartTimer.t4s = HAL_GetTick();
 8004c30:	f7fc fa30 	bl	8001094 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	609a      	str	r2, [r3, #8]
        }
    #endif
	#ifdef _Flag_10s
		if ((HAL_GetTick() - StartTimer.t10s) >= 10000) {
 8004c3a:	f7fc fa2b 	bl	8001094 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	bf8c      	ite	hi
 8004c4e:	2301      	movhi	r3, #1
 8004c50:	2300      	movls	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d007      	beq.n	8004c68 <_ZN5Flags11TurnONFlagsEv+0xc0>
			Flag.t10s = true;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	74da      	strb	r2, [r3, #19]
			StartTimer.t10s = HAL_GetTick();
 8004c5e:	f7fc fa19 	bl	8001094 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	60da      	str	r2, [r3, #12]
		if ((HAL_GetTick() - StartTimer.t1m) >= 60000) {
			Flag.t1m = true;
			StartTimer.t1m = HAL_GetTick();
		}
	#endif
}
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <_ZN5Flags12TurnOFFFlagsEv>:



void Flags::TurnOFFFlags(void) {
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
	#ifdef _Flag_500ms
		Flag.t500ms  =   false;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	741a      	strb	r2, [r3, #16]
	#endif
    #ifdef _Flag_1s
        Flag.t1s  =   false;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	745a      	strb	r2, [r3, #17]
    #endif
    #ifdef _Flag_3s
        Flag.t3s  =   false;
    #endif
    #ifdef _Flag_4s
        Flag.t4s  =   false;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	749a      	strb	r2, [r3, #18]
    #endif
	#ifdef _Flag_10s
		Flag.t10s  =   false;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	74da      	strb	r2, [r3, #19]
	#endif
	#ifdef _Flag_1m
		Flag.t1m  =   false;
	#endif

}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr
	...

08004c9c <GPIOx_Init>:
#include "Gpiox.h"

void GPIOx_Init(GPIO_TypeDef *GPIOx,uint32_t Pin,uint32_t Mode,uint32_t Pull,uint32_t Speed){
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
		//clock enable
		if(GPIOx==GPIOA) RCC->APB2ENR |=(1<<2);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4a39      	ldr	r2, [pc, #228]	@ (8004d94 <GPIOx_Init+0xf8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d106      	bne.n	8004cc0 <GPIOx_Init+0x24>
 8004cb2:	4b39      	ldr	r3, [pc, #228]	@ (8004d98 <GPIOx_Init+0xfc>)
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	4a38      	ldr	r2, [pc, #224]	@ (8004d98 <GPIOx_Init+0xfc>)
 8004cb8:	f043 0304 	orr.w	r3, r3, #4
 8004cbc:	6193      	str	r3, [r2, #24]
 8004cbe:	e014      	b.n	8004cea <GPIOx_Init+0x4e>
		else if(GPIOx==GPIOB) RCC->APB2ENR |=(1<<3);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4a36      	ldr	r2, [pc, #216]	@ (8004d9c <GPIOx_Init+0x100>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d106      	bne.n	8004cd6 <GPIOx_Init+0x3a>
 8004cc8:	4b33      	ldr	r3, [pc, #204]	@ (8004d98 <GPIOx_Init+0xfc>)
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	4a32      	ldr	r2, [pc, #200]	@ (8004d98 <GPIOx_Init+0xfc>)
 8004cce:	f043 0308 	orr.w	r3, r3, #8
 8004cd2:	6193      	str	r3, [r2, #24]
 8004cd4:	e009      	b.n	8004cea <GPIOx_Init+0x4e>
		else if(GPIOx==GPIOC) RCC->APB2ENR |=(1<<4);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4a31      	ldr	r2, [pc, #196]	@ (8004da0 <GPIOx_Init+0x104>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d105      	bne.n	8004cea <GPIOx_Init+0x4e>
 8004cde:	4b2e      	ldr	r3, [pc, #184]	@ (8004d98 <GPIOx_Init+0xfc>)
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8004d98 <GPIOx_Init+0xfc>)
 8004ce4:	f043 0310 	orr.w	r3, r3, #16
 8004ce8:	6193      	str	r3, [r2, #24]


		if(Pin<8){
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b07      	cmp	r3, #7
 8004cee:	d818      	bhi.n	8004d22 <GPIOx_Init+0x86>
			GPIOx->CRL&=~(0xF<<(Pin*4));
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	0092      	lsls	r2, r2, #2
 8004cf8:	210f      	movs	r1, #15
 8004cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8004cfe:	43d2      	mvns	r2, r2
 8004d00:	401a      	ands	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	601a      	str	r2, [r3, #0]
			GPIOx->CRL|=((Mode<<2)+Speed)<<(Pin*4);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	0099      	lsls	r1, r3, #2
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	4419      	add	r1, r3
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	e019      	b.n	8004d56 <GPIOx_Init+0xba>
		}
		else{
			GPIOx->CRH&=~(0xF<<((Pin-8)*4));
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	3a08      	subs	r2, #8
 8004d2a:	0092      	lsls	r2, r2, #2
 8004d2c:	210f      	movs	r1, #15
 8004d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d32:	43d2      	mvns	r2, r2
 8004d34:	401a      	ands	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	605a      	str	r2, [r3, #4]
			GPIOx->CRH|=((Mode<<2)+Speed)<<((Pin-8)*4);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	0099      	lsls	r1, r3, #2
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	4419      	add	r1, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	3b08      	subs	r3, #8
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d50:	431a      	orrs	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	605a      	str	r2, [r3, #4]
		}
		if(Pull==PU) GPIOx->ODR |=(1<<Pin);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d109      	bne.n	8004d70 <GPIOx_Init+0xd4>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	2101      	movs	r1, #1
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	fa01 f202 	lsl.w	r2, r1, r2
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	60da      	str	r2, [r3, #12]
		else if (Pull==PD) GPIOx->ODR &=~(1<<Pin);
}
 8004d6e:	e00c      	b.n	8004d8a <GPIOx_Init+0xee>
		else if (Pull==PD) GPIOx->ODR &=~(1<<Pin);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d109      	bne.n	8004d8a <GPIOx_Init+0xee>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d82:	43d2      	mvns	r2, r2
 8004d84:	401a      	ands	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	60da      	str	r2, [r3, #12]
}
 8004d8a:	bf00      	nop
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr
 8004d94:	40010800 	.word	0x40010800
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40010c00 	.word	0x40010c00
 8004da0:	40011000 	.word	0x40011000

08004da4 <_ZN12Modbus_SlaveC1Ev>:
#define ILLEGAL_DATA_VALUE     0x03

#define ADD_Flash_Slave_ID 0x0801FCF0


Modbus_Slave::Modbus_Slave(){
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &=~(1<<11);
 8004dac:	4b15      	ldr	r3, [pc, #84]	@ (8004e04 <_ZN12Modbus_SlaveC1Ev+0x60>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4a14      	ldr	r2, [pc, #80]	@ (8004e04 <_ZN12Modbus_SlaveC1Ev+0x60>)
 8004db2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004db6:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR &=~(1<<12);
 8004db8:	4b12      	ldr	r3, [pc, #72]	@ (8004e04 <_ZN12Modbus_SlaveC1Ev+0x60>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	4a11      	ldr	r2, [pc, #68]	@ (8004e04 <_ZN12Modbus_SlaveC1Ev+0x60>)
 8004dbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dc2:	60d3      	str	r3, [r2, #12]
	this->Slave_id_to_Eeprom=Flash_Read(ADD_Flash_Slave_ID);
 8004dc4:	4810      	ldr	r0, [pc, #64]	@ (8004e08 <_ZN12Modbus_SlaveC1Ev+0x64>)
 8004dc6:	f7ff fea3 	bl	8004b10 <Flash_Read>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	461a      	mov	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	801a      	strh	r2, [r3, #0]
	if ((this->Slave_id_to_Eeprom<255)&&(this->Slave_id_to_Eeprom >0)) this->Slave_id=this->Slave_id_to_Eeprom;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	2bfe      	cmp	r3, #254	@ 0xfe
 8004dd8:	d809      	bhi.n	8004dee <_ZN12Modbus_SlaveC1Ev+0x4a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <_ZN12Modbus_SlaveC1Ev+0x4a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	709a      	strb	r2, [r3, #2]
 8004dec:	e005      	b.n	8004dfa <_ZN12Modbus_SlaveC1Ev+0x56>
	else{
		this->Slave_id=0x01;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	709a      	strb	r2, [r3, #2]
		this->Slave_id_to_Eeprom=0x01;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	801a      	strh	r2, [r3, #0]
	}

}
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40010800 	.word	0x40010800
 8004e08:	0801fcf0 	.word	0x0801fcf0

08004e0c <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh>:
void Modbus_Slave::USARTx_PutS_Size(USART_TypeDef *USARTx, uint8_t *data,uint8_t size){
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	70fb      	strb	r3, [r7, #3]
	uint32_t timeout=0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
	for (uint8_t i=0;i<size;++i){
 8004e1e:	2300      	movs	r3, #0
 8004e20:	74fb      	strb	r3, [r7, #19]
 8004e22:	e01e      	b.n	8004e62 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x56>
		while(!(USARTx->SR & (1<<7))){++timeout; if (timeout==0xFFFFFFF) return;};
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	3301      	adds	r3, #1
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d02f      	beq.n	8004e94 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x88>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bf0c      	ite	eq
 8004e40:	2301      	moveq	r3, #1
 8004e42:	2300      	movne	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1ec      	bne.n	8004e24 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x18>
		USARTx->DR =data[i];
 8004e4a:	7cfb      	ldrb	r3, [r7, #19]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	4413      	add	r3, r2
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	605a      	str	r2, [r3, #4]
		timeout=0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
	for (uint8_t i=0;i<size;++i){
 8004e5c:	7cfb      	ldrb	r3, [r7, #19]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	74fb      	strb	r3, [r7, #19]
 8004e62:	7cfa      	ldrb	r2, [r7, #19]
 8004e64:	78fb      	ldrb	r3, [r7, #3]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d3e4      	bcc.n	8004e34 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x28>
	}
	while(!(USARTx->SR & (1<<6))) {++timeout; if (timeout==0xFFFF) return;}
 8004e6a:	e007      	b.n	8004e7c <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x70>
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00d      	beq.n	8004e98 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x8c>
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1ec      	bne.n	8004e6c <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x60>
 8004e92:	e002      	b.n	8004e9a <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x8e>
		while(!(USARTx->SR & (1<<7))){++timeout; if (timeout==0xFFFFFFF) return;};
 8004e94:	bf00      	nop
 8004e96:	e000      	b.n	8004e9a <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x8e>
	while(!(USARTx->SR & (1<<6))) {++timeout; if (timeout==0xFFFF) return;}
 8004e98:	bf00      	nop
}
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr

08004ea2 <_Z5CRC16Pht>:


uint16_t CRC16 (uint8_t *nData, uint16_t wLength)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	807b      	strh	r3, [r7, #2]
    uint16_t temp, flag;
    temp = 0xFFFF;
 8004eae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004eb2:	81fb      	strh	r3, [r7, #14]
    for (uint16_t  i = 0; i < wLength; i++)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	81bb      	strh	r3, [r7, #12]
 8004eb8:	e024      	b.n	8004f04 <_Z5CRC16Pht+0x62>
    {
        temp = temp ^ nData[i];
 8004eba:	89bb      	ldrh	r3, [r7, #12]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	89fb      	ldrh	r3, [r7, #14]
 8004ec6:	4053      	eors	r3, r2
 8004ec8:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 1; j <= 8; j++)
 8004eca:	2301      	movs	r3, #1
 8004ecc:	72fb      	strb	r3, [r7, #11]
 8004ece:	e013      	b.n	8004ef8 <_Z5CRC16Pht+0x56>
        {
            flag = temp & 0x0001;
 8004ed0:	89fb      	ldrh	r3, [r7, #14]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	813b      	strh	r3, [r7, #8]
            temp >>=1;
 8004ed8:	89fb      	ldrh	r3, [r7, #14]
 8004eda:	085b      	lsrs	r3, r3, #1
 8004edc:	81fb      	strh	r3, [r7, #14]
            if (flag)
 8004ede:	893b      	ldrh	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d006      	beq.n	8004ef2 <_Z5CRC16Pht+0x50>
                temp ^= 0xA001;
 8004ee4:	89fb      	ldrh	r3, [r7, #14]
 8004ee6:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8004eea:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 1; j <= 8; j++)
 8004ef2:	7afb      	ldrb	r3, [r7, #11]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	72fb      	strb	r3, [r7, #11]
 8004ef8:	7afb      	ldrb	r3, [r7, #11]
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d9e8      	bls.n	8004ed0 <_Z5CRC16Pht+0x2e>
    for (uint16_t  i = 0; i < wLength; i++)
 8004efe:	89bb      	ldrh	r3, [r7, #12]
 8004f00:	3301      	adds	r3, #1
 8004f02:	81bb      	strh	r3, [r7, #12]
 8004f04:	89ba      	ldrh	r2, [r7, #12]
 8004f06:	887b      	ldrh	r3, [r7, #2]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d3d6      	bcc.n	8004eba <_Z5CRC16Pht+0x18>
        }
    }
    temp &= 0xFFFF;
    return temp;
 8004f0c:	89fb      	ldrh	r3, [r7, #14]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr

08004f18 <_ZN12Modbus_Slave8sendDataEPhi>:

void Modbus_Slave::sendData(uint8_t *data, int size)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
	// we will calculate the CRC in this function itself
	uint16_t crc = CRC16(data, size);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	4619      	mov	r1, r3
 8004f2a:	68b8      	ldr	r0, [r7, #8]
 8004f2c:	f7ff ffb9 	bl	8004ea2 <_Z5CRC16Pht>
 8004f30:	4603      	mov	r3, r0
 8004f32:	82fb      	strh	r3, [r7, #22]
	data[size] = crc&0xFF;   // CRC LOW
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	4413      	add	r3, r2
 8004f3a:	8afa      	ldrh	r2, [r7, #22]
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8004f40:	8afb      	ldrh	r3, [r7, #22]
 8004f42:	0a1b      	lsrs	r3, r3, #8
 8004f44:	b299      	uxth	r1, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	b2ca      	uxtb	r2, r1
 8004f50:	701a      	strb	r2, [r3, #0]
	GPIOA->ODR |=(1<<11);
 8004f52:	4b12      	ldr	r3, [pc, #72]	@ (8004f9c <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	4a11      	ldr	r2, [pc, #68]	@ (8004f9c <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8004f58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004f5c:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR |=(1<<12);
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f9c <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	4a0e      	ldr	r2, [pc, #56]	@ (8004f9c <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8004f64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f68:	60d3      	str	r3, [r2, #12]
	USARTx_PutS_Size(USART1,data,size+2);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	3302      	adds	r3, #2
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	490a      	ldr	r1, [pc, #40]	@ (8004fa0 <_ZN12Modbus_Slave8sendDataEPhi+0x88>)
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f7ff ff48 	bl	8004e0c <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh>
	GPIOA->ODR &=~(1<<11);
 8004f7c:	4b07      	ldr	r3, [pc, #28]	@ (8004f9c <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	4a06      	ldr	r2, [pc, #24]	@ (8004f9c <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8004f82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f86:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR &=~(1<<12);
 8004f88:	4b04      	ldr	r3, [pc, #16]	@ (8004f9c <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4a03      	ldr	r2, [pc, #12]	@ (8004f9c <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8004f8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f92:	60d3      	str	r3, [r2, #12]
}
 8004f94:	bf00      	nop
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40010800 	.word	0x40010800
 8004fa0:	40013800 	.word	0x40013800

08004fa4 <_ZN12Modbus_Slave15modbusExceptionEh>:

void Modbus_Slave::modbusException (uint8_t exceptioncode)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	this->TxData[0] = this->RxData[0];       // slave ID
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	78da      	ldrb	r2, [r3, #3]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	74da      	strb	r2, [r3, #19]
	this->TxData[1] = this->RxData[1]|0x80;  // adding 1 to the MSB of the function code
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	791b      	ldrb	r3, [r3, #4]
 8004fbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	751a      	strb	r2, [r3, #20]
	this->TxData[2] = exceptioncode;   // Load the Exception code
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	755a      	strb	r2, [r3, #21]
	sendData(this->TxData, 3);         // send Data... CRC will be calculated in the function
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3313      	adds	r3, #19
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff ff9f 	bl	8004f18 <_ZN12Modbus_Slave8sendDataEPhi>
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef>:


//10 not function expected
uint8_t Modbus_Slave::Check_Buffer(USART_TypeDef *USARTx){
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
	uint8_t status=0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	73fb      	strb	r3, [r7, #15]
		if (this->RxData[0] == this->Slave_id){
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	78da      	ldrb	r2, [r3, #3]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	789b      	ldrb	r3, [r3, #2]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d117      	bne.n	800502c <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x4a>
			switch (this->RxData[1]){
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	791b      	ldrb	r3, [r3, #4]
 8005000:	2b06      	cmp	r3, #6
 8005002:	d00e      	beq.n	8005022 <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x40>
 8005004:	2b06      	cmp	r3, #6
 8005006:	dc10      	bgt.n	800502a <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x48>
 8005008:	2b03      	cmp	r3, #3
 800500a:	d002      	beq.n	8005012 <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x30>
 800500c:	2b04      	cmp	r3, #4
 800500e:	d004      	beq.n	800501a <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x38>
				break;
			case 0x06:
				WriteIDRegs_FC6();
				break;
			default:
				break;
 8005010:	e00b      	b.n	800502a <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x48>
				readHoldingRegs();
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f896 	bl	8005144 <_ZN12Modbus_Slave15readHoldingRegsEv>
				break;
 8005018:	e008      	b.n	800502c <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x4a>
				readInputRegs_FC4();
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f80c 	bl	8005038 <_ZN12Modbus_Slave17readInputRegs_FC4Ev>
				break;
 8005020:	e004      	b.n	800502c <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x4a>
				WriteIDRegs_FC6();
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f898 	bl	8005158 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev>
				break;
 8005028:	e000      	b.n	800502c <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x4a>
				break;
 800502a:	bf00      	nop
			}
	}
	return status;
 800502c:	7bfb      	ldrb	r3, [r7, #15]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <_ZN12Modbus_Slave17readInputRegs_FC4Ev>:

uint8_t Modbus_Slave::readInputRegs_FC4 (void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	uint16_t startAddr = ((this->RxData[2]<<8)|this->RxData[3]);  // start Register Address
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	795b      	ldrb	r3, [r3, #5]
 8005044:	021b      	lsls	r3, r3, #8
 8005046:	b21a      	sxth	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	799b      	ldrb	r3, [r3, #6]
 800504c:	b21b      	sxth	r3, r3
 800504e:	4313      	orrs	r3, r2
 8005050:	b21b      	sxth	r3, r3
 8005052:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((this->RxData[4]<<8)|this->RxData[5]);   // number to registers master has requested
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	79db      	ldrb	r3, [r3, #7]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	b21a      	sxth	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	7a1b      	ldrb	r3, [r3, #8]
 8005060:	b21b      	sxth	r3, r3
 8005062:	4313      	orrs	r3, r2
 8005064:	b21b      	sxth	r3, r3
 8005066:	817b      	strh	r3, [r7, #10]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8005068:	897b      	ldrh	r3, [r7, #10]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x3c>
 800506e:	897b      	ldrh	r3, [r7, #10]
 8005070:	2b7d      	cmp	r3, #125	@ 0x7d
 8005072:	d905      	bls.n	8005080 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x48>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8005074:	2103      	movs	r1, #3
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7ff ff94 	bl	8004fa4 <_ZN12Modbus_Slave15modbusExceptionEh>
		return 0;
 800507c:	2300      	movs	r3, #0
 800507e:	e05b      	b.n	8005138 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x100>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8005080:	8afa      	ldrh	r2, [r7, #22]
 8005082:	897b      	ldrh	r3, [r7, #10]
 8005084:	4413      	add	r3, r2
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	813b      	strh	r3, [r7, #8]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 800508c:	893b      	ldrh	r3, [r7, #8]
 800508e:	2b31      	cmp	r3, #49	@ 0x31
 8005090:	d905      	bls.n	800509e <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x66>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8005092:	2102      	movs	r1, #2
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff ff85 	bl	8004fa4 <_ZN12Modbus_Slave15modbusExceptionEh>
		return 0;
 800509a:	2300      	movs	r3, #0
 800509c:	e04c      	b.n	8005138 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x100>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	this->TxData[0] = this->Slave_id;  // slave ID
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	789a      	ldrb	r2, [r3, #2]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	74da      	strb	r2, [r3, #19]
	this->TxData[1] = this->RxData[1];  // function code
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	791a      	ldrb	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	751a      	strb	r2, [r3, #20]
	this->TxData[2] = numRegs*2;  // Byte count
 80050ae:	897b      	ldrh	r3, [r7, #10]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	755a      	strb	r2, [r3, #21]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 80050ba:	2303      	movs	r3, #3
 80050bc:	613b      	str	r3, [r7, #16]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	e01f      	b.n	8005104 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0xcc>
	{
		this->TxData[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 80050c4:	8afb      	ldrh	r3, [r7, #22]
 80050c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005140 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x108>)
 80050c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050cc:	0a1b      	lsrs	r3, r3, #8
 80050ce:	b299      	uxth	r1, r3
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	613a      	str	r2, [r7, #16]
 80050d6:	b2c9      	uxtb	r1, r1
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	4413      	add	r3, r2
 80050dc:	460a      	mov	r2, r1
 80050de:	74da      	strb	r2, [r3, #19]
		this->TxData[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 80050e0:	8afb      	ldrh	r3, [r7, #22]
 80050e2:	4a17      	ldr	r2, [pc, #92]	@ (8005140 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x108>)
 80050e4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	613a      	str	r2, [r7, #16]
 80050ee:	b2c9      	uxtb	r1, r1
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	4413      	add	r3, r2
 80050f4:	460a      	mov	r2, r1
 80050f6:	74da      	strb	r2, [r3, #19]
		startAddr++;  // increment the register address
 80050f8:	8afb      	ldrh	r3, [r7, #22]
 80050fa:	3301      	adds	r3, #1
 80050fc:	82fb      	strh	r3, [r7, #22]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3301      	adds	r3, #1
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	897b      	ldrh	r3, [r7, #10]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	429a      	cmp	r2, r3
 800510a:	dbdb      	blt.n	80050c4 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x8c>
	}

	sendData(this->TxData, indx);  // send data... CRC will be calculated in the function itself
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3313      	adds	r3, #19
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4619      	mov	r1, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff feff 	bl	8004f18 <_ZN12Modbus_Slave8sendDataEPhi>
	memset(RxData, 0, sizeof(Buffer_Size_Rx_Modbus));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3303      	adds	r3, #3
 800511e:	2204      	movs	r2, #4
 8005120:	2100      	movs	r1, #0
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fc82 	bl	8005a2c <memset>
	memset(TxData, 0, sizeof(Buffer_Size_Tx_Modbus));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3313      	adds	r3, #19
 800512c:	2204      	movs	r2, #4
 800512e:	2100      	movs	r1, #0
 8005130:	4618      	mov	r0, r3
 8005132:	f000 fc7b 	bl	8005a2c <memset>
	return 1;   // success
 8005136:	2301      	movs	r3, #1
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	08005ac8 	.word	0x08005ac8

08005144 <_ZN12Modbus_Slave15readHoldingRegsEv>:

uint8_t Modbus_Slave::readHoldingRegs(){
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
	return 1;
 800514c:	2301      	movs	r3, #1
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr

08005158 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev>:


// address = 0x01
uint8_t Modbus_Slave::WriteIDRegs_FC6(){
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	uint16_t address=((this->RxData[2]<<8)|this->RxData[3]);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	795b      	ldrb	r3, [r3, #5]
 8005164:	021b      	lsls	r3, r3, #8
 8005166:	b21a      	sxth	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	799b      	ldrb	r3, [r3, #6]
 800516c:	b21b      	sxth	r3, r3
 800516e:	4313      	orrs	r3, r2
 8005170:	b21b      	sxth	r3, r3
 8005172:	81bb      	strh	r3, [r7, #12]
	uint16_t data=((this->RxData[4]<<8)|this->RxData[5]);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	79db      	ldrb	r3, [r3, #7]
 8005178:	021b      	lsls	r3, r3, #8
 800517a:	b21a      	sxth	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	7a1b      	ldrb	r3, [r3, #8]
 8005180:	b21b      	sxth	r3, r3
 8005182:	4313      	orrs	r3, r2
 8005184:	b21b      	sxth	r3, r3
 8005186:	817b      	strh	r3, [r7, #10]
	if (address!=0x01)
 8005188:	89bb      	ldrh	r3, [r7, #12]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d005      	beq.n	800519a <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0x42>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);
 800518e:	2102      	movs	r1, #2
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff ff07 	bl	8004fa4 <_ZN12Modbus_Slave15modbusExceptionEh>
		return 0;
 8005196:	2300      	movs	r3, #0
 8005198:	e036      	b.n	8005208 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0xb0>
	}
	if ((data ==0) || (data >247)){
 800519a:	897b      	ldrh	r3, [r7, #10]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0x4e>
 80051a0:	897b      	ldrh	r3, [r7, #10]
 80051a2:	2bf7      	cmp	r3, #247	@ 0xf7
 80051a4:	d905      	bls.n	80051b2 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0x5a>
		modbusException(ILLEGAL_DATA_VALUE);
 80051a6:	2103      	movs	r1, #3
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff fefb 	bl	8004fa4 <_ZN12Modbus_Slave15modbusExceptionEh>
		return 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e02a      	b.n	8005208 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0xb0>
	}
	this->Slave_id_to_Eeprom=data;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	897a      	ldrh	r2, [r7, #10]
 80051b6:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<6;++i){
 80051b8:	2300      	movs	r3, #0
 80051ba:	73fb      	strb	r3, [r7, #15]
 80051bc:	e00b      	b.n	80051d6 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0x7e>
		this->TxData[i]=this->RxData[i];
 80051be:	7bfa      	ldrb	r2, [r7, #15]
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	440a      	add	r2, r1
 80051c6:	78d1      	ldrb	r1, [r2, #3]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	4413      	add	r3, r2
 80051cc:	460a      	mov	r2, r1
 80051ce:	74da      	strb	r2, [r3, #19]
	for(uint8_t i=0;i<6;++i){
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	3301      	adds	r3, #1
 80051d4:	73fb      	strb	r3, [r7, #15]
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	2b05      	cmp	r3, #5
 80051da:	d9f0      	bls.n	80051be <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0x66>
	}
	sendData(this->TxData,6);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3313      	adds	r3, #19
 80051e0:	2206      	movs	r2, #6
 80051e2:	4619      	mov	r1, r3
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fe97 	bl	8004f18 <_ZN12Modbus_Slave8sendDataEPhi>
	memset(RxData, 0, sizeof(Buffer_Size_Rx_Modbus));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3303      	adds	r3, #3
 80051ee:	2204      	movs	r2, #4
 80051f0:	2100      	movs	r1, #0
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fc1a 	bl	8005a2c <memset>
	memset(TxData, 0, sizeof(Buffer_Size_Tx_Modbus));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3313      	adds	r3, #19
 80051fc:	2204      	movs	r2, #4
 80051fe:	2100      	movs	r1, #0
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fc13 	bl	8005a2c <memset>
	return 1;
 8005206:	2301      	movs	r3, #1
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <p_sensor_range>:


extern Switch_Range Status_Switch_Cur;
float P_sensor_range;

void p_sensor_range(){
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
	 switch(Status_Switch_Cur.range_sm9541_cur)
 8005214:	4b22      	ldr	r3, [pc, #136]	@ (80052a0 <p_sensor_range+0x90>)
 8005216:	785b      	ldrb	r3, [r3, #1]
 8005218:	2b07      	cmp	r3, #7
 800521a:	d838      	bhi.n	800528e <p_sensor_range+0x7e>
 800521c:	a201      	add	r2, pc, #4	@ (adr r2, 8005224 <p_sensor_range+0x14>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005245 	.word	0x08005245
 8005228:	0800524d 	.word	0x0800524d
 800522c:	08005257 	.word	0x08005257
 8005230:	08005261 	.word	0x08005261
 8005234:	0800526b 	.word	0x0800526b
 8005238:	08005275 	.word	0x08005275
 800523c:	0800527d 	.word	0x0800527d
 8005240:	08005287 	.word	0x08005287
	    {
	        case SM9541_RANGE_100PA:
	        	P_sensor_range=0.2f;
 8005244:	4b17      	ldr	r3, [pc, #92]	@ (80052a4 <p_sensor_range+0x94>)
 8005246:	4a18      	ldr	r2, [pc, #96]	@ (80052a8 <p_sensor_range+0x98>)
 8005248:	601a      	str	r2, [r3, #0]
	            break;
 800524a:	e025      	b.n	8005298 <p_sensor_range+0x88>

	        case SM9541_RANGE_250PA:
	        	P_sensor_range=0.5f;
 800524c:	4b15      	ldr	r3, [pc, #84]	@ (80052a4 <p_sensor_range+0x94>)
 800524e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8005252:	601a      	str	r2, [r3, #0]
	            break;
 8005254:	e020      	b.n	8005298 <p_sensor_range+0x88>

	        case SM9541_RANGE_500PA:
	        	P_sensor_range=1.0f;
 8005256:	4b13      	ldr	r3, [pc, #76]	@ (80052a4 <p_sensor_range+0x94>)
 8005258:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800525c:	601a      	str	r2, [r3, #0]
	            break;
 800525e:	e01b      	b.n	8005298 <p_sensor_range+0x88>

	        case SM9541_RANGE_750PA:
	        	P_sensor_range=1.5f;
 8005260:	4b10      	ldr	r3, [pc, #64]	@ (80052a4 <p_sensor_range+0x94>)
 8005262:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8005266:	601a      	str	r2, [r3, #0]
	            break;
 8005268:	e016      	b.n	8005298 <p_sensor_range+0x88>

	        case SM9541_RANGE_1000PA:
	        	P_sensor_range=2.0f;
 800526a:	4b0e      	ldr	r3, [pc, #56]	@ (80052a4 <p_sensor_range+0x94>)
 800526c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005270:	601a      	str	r2, [r3, #0]
	            break;
 8005272:	e011      	b.n	8005298 <p_sensor_range+0x88>

	        case SM9541_RANGE_1500PA:
	        	P_sensor_range=3.0f;
 8005274:	4b0b      	ldr	r3, [pc, #44]	@ (80052a4 <p_sensor_range+0x94>)
 8005276:	4a0d      	ldr	r2, [pc, #52]	@ (80052ac <p_sensor_range+0x9c>)
 8005278:	601a      	str	r2, [r3, #0]
	            break;
 800527a:	e00d      	b.n	8005298 <p_sensor_range+0x88>

	        case SM9541_RANGE_2000PA:
	        	P_sensor_range=4.0f;
 800527c:	4b09      	ldr	r3, [pc, #36]	@ (80052a4 <p_sensor_range+0x94>)
 800527e:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8005282:	601a      	str	r2, [r3, #0]
	            break;
 8005284:	e008      	b.n	8005298 <p_sensor_range+0x88>

	        case SM9541_RANGE_2500PA:
	        	P_sensor_range=5.0f;
 8005286:	4b07      	ldr	r3, [pc, #28]	@ (80052a4 <p_sensor_range+0x94>)
 8005288:	4a09      	ldr	r2, [pc, #36]	@ (80052b0 <p_sensor_range+0xa0>)
 800528a:	601a      	str	r2, [r3, #0]
	            break;
 800528c:	e004      	b.n	8005298 <p_sensor_range+0x88>

	        default:
	        	P_sensor_range=4.0f; //tu chọn
 800528e:	4b05      	ldr	r3, [pc, #20]	@ (80052a4 <p_sensor_range+0x94>)
 8005290:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8005294:	601a      	str	r2, [r3, #0]
	            break;
 8005296:	bf00      	nop
	    }
}
 8005298:	bf00      	nop
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr
 80052a0:	2000030c 	.word	0x2000030c
 80052a4:	20000308 	.word	0x20000308
 80052a8:	3e4ccccd 	.word	0x3e4ccccd
 80052ac:	40400000 	.word	0x40400000
 80052b0:	40a00000 	.word	0x40a00000

080052b4 <Get_Tempe_Press>:

#define SM9541_MAXCOUNT         14745
#define SM9541_MINCOUNT         1638

uint8_t Get_Tempe_Press(float *t9541, float *p9541){
 80052b4:	b590      	push	{r4, r7, lr}
 80052b6:	b089      	sub	sp, #36	@ 0x24
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
	uint8_t buf95_read[4]={0};
 80052be:	2300      	movs	r3, #0
 80052c0:	60bb      	str	r3, [r7, #8]
	uint8_t status =0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	75fb      	strb	r3, [r7, #23]
	uint16_t pressure_adc,temperature_adc;
	float dat;
	if (HAL_I2C_Master_Receive(&hi2c1, 0x28<<1, buf95_read, 4, 100)==HAL_OK){
 80052c6:	f107 0208 	add.w	r2, r7, #8
 80052ca:	2364      	movs	r3, #100	@ 0x64
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	2304      	movs	r3, #4
 80052d0:	2150      	movs	r1, #80	@ 0x50
 80052d2:	4834      	ldr	r0, [pc, #208]	@ (80053a4 <Get_Tempe_Press+0xf0>)
 80052d4:	f7fd fb5c 	bl	8002990 <HAL_I2C_Master_Receive>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d15c      	bne.n	8005398 <Get_Tempe_Press+0xe4>
				 status=buf95_read[0]>>6;
 80052de:	7a3b      	ldrb	r3, [r7, #8]
 80052e0:	099b      	lsrs	r3, r3, #6
 80052e2:	75fb      	strb	r3, [r7, #23]
				 if (!status){
 80052e4:	7dfb      	ldrb	r3, [r7, #23]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d156      	bne.n	8005398 <Get_Tempe_Press+0xe4>
					 pressure_adc=((buf95_read[0]&0x3f)<<8) | buf95_read[1];
 80052ea:	7a3b      	ldrb	r3, [r7, #8]
 80052ec:	021b      	lsls	r3, r3, #8
 80052ee:	b21b      	sxth	r3, r3
 80052f0:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80052f4:	b21a      	sxth	r2, r3
 80052f6:	7a7b      	ldrb	r3, [r7, #9]
 80052f8:	b21b      	sxth	r3, r3
 80052fa:	4313      	orrs	r3, r2
 80052fc:	b21b      	sxth	r3, r3
 80052fe:	82bb      	strh	r3, [r7, #20]
					 temperature_adc=(buf95_read[2]<<3) | (buf95_read[3]>>5);
 8005300:	7abb      	ldrb	r3, [r7, #10]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	b21a      	sxth	r2, r3
 8005306:	7afb      	ldrb	r3, [r7, #11]
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	b2db      	uxtb	r3, r3
 800530c:	b21b      	sxth	r3, r3
 800530e:	4313      	orrs	r3, r2
 8005310:	b21b      	sxth	r3, r3
 8005312:	827b      	strh	r3, [r7, #18]
					 dat = P_sensor_range /10;
 8005314:	4b24      	ldr	r3, [pc, #144]	@ (80053a8 <Get_Tempe_Press+0xf4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4924      	ldr	r1, [pc, #144]	@ (80053ac <Get_Tempe_Press+0xf8>)
 800531a:	4618      	mov	r0, r3
 800531c:	f7fb f8d8 	bl	80004d0 <__aeabi_fdiv>
 8005320:	4603      	mov	r3, r0
 8005322:	60fb      	str	r3, [r7, #12]
					 *p9541 = (pressure_adc - SM9541_MINCOUNT)*dat / (SM9541_MAXCOUNT - SM9541_MINCOUNT) + P_sensor_range/10;
 8005324:	8abb      	ldrh	r3, [r7, #20]
 8005326:	f2a3 6366 	subw	r3, r3, #1638	@ 0x666
 800532a:	4618      	mov	r0, r3
 800532c:	f7fa ffc8 	bl	80002c0 <__aeabi_i2f>
 8005330:	4603      	mov	r3, r0
 8005332:	68f9      	ldr	r1, [r7, #12]
 8005334:	4618      	mov	r0, r3
 8005336:	f7fb f817 	bl	8000368 <__aeabi_fmul>
 800533a:	4603      	mov	r3, r0
 800533c:	491c      	ldr	r1, [pc, #112]	@ (80053b0 <Get_Tempe_Press+0xfc>)
 800533e:	4618      	mov	r0, r3
 8005340:	f7fb f8c6 	bl	80004d0 <__aeabi_fdiv>
 8005344:	4603      	mov	r3, r0
 8005346:	461c      	mov	r4, r3
 8005348:	4b17      	ldr	r3, [pc, #92]	@ (80053a8 <Get_Tempe_Press+0xf4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4917      	ldr	r1, [pc, #92]	@ (80053ac <Get_Tempe_Press+0xf8>)
 800534e:	4618      	mov	r0, r3
 8005350:	f7fb f8be 	bl	80004d0 <__aeabi_fdiv>
 8005354:	4603      	mov	r3, r0
 8005356:	4619      	mov	r1, r3
 8005358:	4620      	mov	r0, r4
 800535a:	f7fa fefd 	bl	8000158 <__addsf3>
 800535e:	4603      	mov	r3, r0
 8005360:	461a      	mov	r2, r3
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	601a      	str	r2, [r3, #0]
					 *t9541 = (float)temperature_adc*200/2047 - 50;
 8005366:	8a7b      	ldrh	r3, [r7, #18]
 8005368:	4618      	mov	r0, r3
 800536a:	f7fa ffa5 	bl	80002b8 <__aeabi_ui2f>
 800536e:	4603      	mov	r3, r0
 8005370:	4910      	ldr	r1, [pc, #64]	@ (80053b4 <Get_Tempe_Press+0x100>)
 8005372:	4618      	mov	r0, r3
 8005374:	f7fa fff8 	bl	8000368 <__aeabi_fmul>
 8005378:	4603      	mov	r3, r0
 800537a:	490f      	ldr	r1, [pc, #60]	@ (80053b8 <Get_Tempe_Press+0x104>)
 800537c:	4618      	mov	r0, r3
 800537e:	f7fb f8a7 	bl	80004d0 <__aeabi_fdiv>
 8005382:	4603      	mov	r3, r0
 8005384:	490d      	ldr	r1, [pc, #52]	@ (80053bc <Get_Tempe_Press+0x108>)
 8005386:	4618      	mov	r0, r3
 8005388:	f7fa fee4 	bl	8000154 <__aeabi_fsub>
 800538c:	4603      	mov	r3, r0
 800538e:	461a      	mov	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	601a      	str	r2, [r3, #0]
					 return 1;
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <Get_Tempe_Press+0xe6>
				 }
			}
	return 0;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd90      	pop	{r4, r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000204 	.word	0x20000204
 80053a8:	20000308 	.word	0x20000308
 80053ac:	41200000 	.word	0x41200000
 80053b0:	464ccc00 	.word	0x464ccc00
 80053b4:	43480000 	.word	0x43480000
 80053b8:	44ffe000 	.word	0x44ffe000
 80053bc:	42480000 	.word	0x42480000

080053c0 <Status_Current_Switch>:
        {2425, 2500, SM9541_RANGE_2000PA, 4},
        {2515, 2575, SM9541_RANGE_2500PA, 1},
        {2585, 2690, SM9541_RANGE_2500PA, 4}
    };

void Status_Current_Switch(){
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < 16; i++) {
 80053c6:	2300      	movs	r3, #0
 80053c8:	71fb      	strb	r3, [r7, #7]
 80053ca:	e034      	b.n	8005436 <Status_Current_Switch+0x76>
	        if ((data_adc >= rangeMap[i].min) && (data_adc <= rangeMap[i].max)) {
 80053cc:	79fa      	ldrb	r2, [r7, #7]
 80053ce:	4920      	ldr	r1, [pc, #128]	@ (8005450 <Status_Current_Switch+0x90>)
 80053d0:	4613      	mov	r3, r2
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	4413      	add	r3, r2
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	440b      	add	r3, r1
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	4b1d      	ldr	r3, [pc, #116]	@ (8005454 <Status_Current_Switch+0x94>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d824      	bhi.n	8005430 <Status_Current_Switch+0x70>
 80053e6:	79fa      	ldrb	r2, [r7, #7]
 80053e8:	4919      	ldr	r1, [pc, #100]	@ (8005450 <Status_Current_Switch+0x90>)
 80053ea:	4613      	mov	r3, r2
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	4413      	add	r3, r2
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	440b      	add	r3, r1
 80053f4:	3302      	adds	r3, #2
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	461a      	mov	r2, r3
 80053fa:	4b16      	ldr	r3, [pc, #88]	@ (8005454 <Status_Current_Switch+0x94>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d316      	bcc.n	8005430 <Status_Current_Switch+0x70>
	            Status_Switch_Cur.range_sm9541_cur = rangeMap[i].range;
 8005402:	79fa      	ldrb	r2, [r7, #7]
 8005404:	4912      	ldr	r1, [pc, #72]	@ (8005450 <Status_Current_Switch+0x90>)
 8005406:	4613      	mov	r3, r2
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	4413      	add	r3, r2
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	440b      	add	r3, r1
 8005410:	3304      	adds	r3, #4
 8005412:	781a      	ldrb	r2, [r3, #0]
 8005414:	4b10      	ldr	r3, [pc, #64]	@ (8005458 <Status_Current_Switch+0x98>)
 8005416:	705a      	strb	r2, [r3, #1]
	            Status_Switch_Cur.response = rangeMap[i].response;
 8005418:	79fa      	ldrb	r2, [r7, #7]
 800541a:	490d      	ldr	r1, [pc, #52]	@ (8005450 <Status_Current_Switch+0x90>)
 800541c:	4613      	mov	r3, r2
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	4413      	add	r3, r2
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	440b      	add	r3, r1
 8005426:	3305      	adds	r3, #5
 8005428:	781a      	ldrb	r2, [r3, #0]
 800542a:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <Status_Current_Switch+0x98>)
 800542c:	701a      	strb	r2, [r3, #0]
	            return;
 800542e:	e00b      	b.n	8005448 <Status_Current_Switch+0x88>
	for (uint8_t i = 0; i < 16; i++) {
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	3301      	adds	r3, #1
 8005434:	71fb      	strb	r3, [r7, #7]
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	2b0f      	cmp	r3, #15
 800543a:	d9c7      	bls.n	80053cc <Status_Current_Switch+0xc>
	        }
	    }
    // Default
    Status_Switch_Cur.range_sm9541_cur = SM9541_RANGE_2000PA;
 800543c:	4b06      	ldr	r3, [pc, #24]	@ (8005458 <Status_Current_Switch+0x98>)
 800543e:	2206      	movs	r2, #6
 8005440:	705a      	strb	r2, [r3, #1]
    Status_Switch_Cur.response = 1;
 8005442:	4b05      	ldr	r3, [pc, #20]	@ (8005458 <Status_Current_Switch+0x98>)
 8005444:	2201      	movs	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]
}
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr
 8005450:	08005b2c 	.word	0x08005b2c
 8005454:	20000180 	.word	0x20000180
 8005458:	2000030c 	.word	0x2000030c

0800545c <_ZN6HT1621C1Ev>:
#define WR0 (GPIOC->BSRR = (1 << (14 + 16)))
#define DATA1 (GPIOC->BSRR = (1 << 13))
#define DATA0 (GPIOC->BSRR = (1 << (13 + 16)))


HT1621::HT1621(){
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af02      	add	r7, sp, #8
 8005462:	6078      	str	r0, [r7, #4]
	GPIOx_Init(GPIOC, 13,OUTPUT_PP,NOPULL,MODE_OUTPUT_50MHZ);
 8005464:	2303      	movs	r3, #3
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	2300      	movs	r3, #0
 800546a:	2200      	movs	r2, #0
 800546c:	210d      	movs	r1, #13
 800546e:	481b      	ldr	r0, [pc, #108]	@ (80054dc <_ZN6HT1621C1Ev+0x80>)
 8005470:	f7ff fc14 	bl	8004c9c <GPIOx_Init>
	GPIOx_Init(GPIOC, 14,OUTPUT_PP,NOPULL,MODE_OUTPUT_50MHZ);
 8005474:	2303      	movs	r3, #3
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	2300      	movs	r3, #0
 800547a:	2200      	movs	r2, #0
 800547c:	210e      	movs	r1, #14
 800547e:	4817      	ldr	r0, [pc, #92]	@ (80054dc <_ZN6HT1621C1Ev+0x80>)
 8005480:	f7ff fc0c 	bl	8004c9c <GPIOx_Init>
	GPIOx_Init(GPIOC, 15,OUTPUT_PP,NOPULL,MODE_OUTPUT_50MHZ);
 8005484:	2303      	movs	r3, #3
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	2300      	movs	r3, #0
 800548a:	2200      	movs	r2, #0
 800548c:	210f      	movs	r1, #15
 800548e:	4813      	ldr	r0, [pc, #76]	@ (80054dc <_ZN6HT1621C1Ev+0x80>)
 8005490:	f7ff fc04 	bl	8004c9c <GPIOx_Init>
	wrCmd(BIAS);
 8005494:	2152      	movs	r1, #82	@ 0x52
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f84c 	bl	8005534 <_ZN6HT16215wrCmdEh>
	wrCmd(RC256);
 800549c:	2130      	movs	r1, #48	@ 0x30
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f848 	bl	8005534 <_ZN6HT16215wrCmdEh>
	wrCmd(SYSDIS);
 80054a4:	2100      	movs	r1, #0
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f844 	bl	8005534 <_ZN6HT16215wrCmdEh>
	wrCmd(WDTDIS1);
 80054ac:	210a      	movs	r1, #10
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f840 	bl	8005534 <_ZN6HT16215wrCmdEh>
	wrCmd(SYSEN);
 80054b4:	2102      	movs	r1, #2
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f83c 	bl	8005534 <_ZN6HT16215wrCmdEh>
	wrCmd(LCDON);
 80054bc:	2106      	movs	r1, #6
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f838 	bl	8005534 <_ZN6HT16215wrCmdEh>

	clearAll();
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f8a3 	bl	8005610 <_ZN6HT16218clearAllEv>
	ValuesConstructor();
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f8bd 	bl	800564a <_ZN6HT162117ValuesConstructorEv>
}
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40011000 	.word	0x40011000

080054e0 <_ZN6HT16217wrBytesEhh>:

void HT1621::wrBytes(uint8_t addr,uint8_t sdata){
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
 80054ec:	4613      	mov	r3, r2
 80054ee:	70bb      	strb	r3, [r7, #2]
	  addr<<=2;
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	70fb      	strb	r3, [r7, #3]
	  CS0;
 80054f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005530 <_ZN6HT16217wrBytesEhh+0x50>)
 80054f8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80054fc:	611a      	str	r2, [r3, #16]
	  sendBits(0xa0,3);     //Write following to data memory
 80054fe:	2203      	movs	r2, #3
 8005500:	21a0      	movs	r1, #160	@ 0xa0
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f836 	bl	8005574 <_ZN6HT16218sendBitsEhh>
	  sendBits(addr,6);     // at address addr
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	2206      	movs	r2, #6
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f830 	bl	8005574 <_ZN6HT16218sendBitsEhh>
	  sendBits(sdata,8);    // this is the data to be written.
 8005514:	78bb      	ldrb	r3, [r7, #2]
 8005516:	2208      	movs	r2, #8
 8005518:	4619      	mov	r1, r3
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f82a 	bl	8005574 <_ZN6HT16218sendBitsEhh>
	  CS1;
 8005520:	4b03      	ldr	r3, [pc, #12]	@ (8005530 <_ZN6HT16217wrBytesEhh+0x50>)
 8005522:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005526:	611a      	str	r2, [r3, #16]
}
 8005528:	bf00      	nop
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40011000 	.word	0x40011000

08005534 <_ZN6HT16215wrCmdEh>:




void HT1621::wrCmd(uint8_t cmd){
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	70fb      	strb	r3, [r7, #3]
	  CS0;
 8005540:	4b0b      	ldr	r3, [pc, #44]	@ (8005570 <_ZN6HT16215wrCmdEh+0x3c>)
 8005542:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005546:	611a      	str	r2, [r3, #16]
	  sendBits(0x80,4);
 8005548:	2204      	movs	r2, #4
 800554a:	2180      	movs	r1, #128	@ 0x80
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f811 	bl	8005574 <_ZN6HT16218sendBitsEhh>
	  sendBits(cmd,8);
 8005552:	78fb      	ldrb	r3, [r7, #3]
 8005554:	2208      	movs	r2, #8
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f80b 	bl	8005574 <_ZN6HT16218sendBitsEhh>
	  CS1;
 800555e:	4b04      	ldr	r3, [pc, #16]	@ (8005570 <_ZN6HT16215wrCmdEh+0x3c>)
 8005560:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005564:	611a      	str	r2, [r3, #16]
}
 8005566:	bf00      	nop
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	40011000 	.word	0x40011000

08005574 <_ZN6HT16218sendBitsEhh>:
//		 		      HAL_Delay(1000);
//		 		      clearAll();
//		 		}
//}

void HT1621::sendBits(uint8_t sdata,uint8_t size){
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
 8005580:	4613      	mov	r3, r2
 8005582:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for (i=0;i<size;i++){
 8005584:	2300      	movs	r3, #0
 8005586:	73fb      	strb	r3, [r7, #15]
 8005588:	e01a      	b.n	80055c0 <_ZN6HT16218sendBitsEhh+0x4c>
		WR0;
 800558a:	4b12      	ldr	r3, [pc, #72]	@ (80055d4 <_ZN6HT16218sendBitsEhh+0x60>)
 800558c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005590:	611a      	str	r2, [r3, #16]
		//delay_us(1);
		if (sdata & 0x80) DATA1;
 8005592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005596:	2b00      	cmp	r3, #0
 8005598:	da04      	bge.n	80055a4 <_ZN6HT16218sendBitsEhh+0x30>
 800559a:	4b0e      	ldr	r3, [pc, #56]	@ (80055d4 <_ZN6HT16218sendBitsEhh+0x60>)
 800559c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80055a0:	611a      	str	r2, [r3, #16]
 80055a2:	e003      	b.n	80055ac <_ZN6HT16218sendBitsEhh+0x38>
		else DATA0;
 80055a4:	4b0b      	ldr	r3, [pc, #44]	@ (80055d4 <_ZN6HT16218sendBitsEhh+0x60>)
 80055a6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80055aa:	611a      	str	r2, [r3, #16]
		//delay_us(1);
		WR1;
 80055ac:	4b09      	ldr	r3, [pc, #36]	@ (80055d4 <_ZN6HT16218sendBitsEhh+0x60>)
 80055ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80055b2:	611a      	str	r2, [r3, #16]
		//delay_us(1);
		sdata <<= 1;
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	70fb      	strb	r3, [r7, #3]
	for (i=0;i<size;i++){
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	3301      	adds	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
 80055c0:	7bfa      	ldrb	r2, [r7, #15]
 80055c2:	78bb      	ldrb	r3, [r7, #2]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d3e0      	bcc.n	800558a <_ZN6HT16218sendBitsEhh+0x16>
	}
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr
 80055d4:	40011000 	.word	0x40011000

080055d8 <_ZN6HT16219displayOnEv>:

void HT1621::displayOn()
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	wrBytes(0x0E,0x01<<3);
 80055e0:	2208      	movs	r2, #8
 80055e2:	210e      	movs	r1, #14
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff ff7b 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
	wrBytes(0x30,0x8C);
 80055ea:	228c      	movs	r2, #140	@ 0x8c
 80055ec:	2130      	movs	r1, #48	@ 0x30
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff ff76 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
	wrBytes(0x0A,0x01);
 80055f4:	2201      	movs	r2, #1
 80055f6:	210a      	movs	r1, #10
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff ff71 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
	wrBytes(0x0E,0x80);
 80055fe:	2280      	movs	r2, #128	@ 0x80
 8005600:	210e      	movs	r1, #14
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff ff6c 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
	//wrBytes(0x18,0x80);
	//wrBytes(0x06,0x10);


}
 8005608:	bf00      	nop
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <_ZN6HT16218clearAllEv>:


void HT1621::clearAll(){
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	uint8_t addr=0;
 8005618:	2300      	movs	r3, #0
 800561a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i=0;i<32;++i){
 800561c:	2300      	movs	r3, #0
 800561e:	73bb      	strb	r3, [r7, #14]
 8005620:	e00b      	b.n	800563a <_ZN6HT16218clearAllEv+0x2a>
		  wrBytes(addr,0x00);
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	2200      	movs	r2, #0
 8005626:	4619      	mov	r1, r3
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff ff59 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
	      addr+=2;
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	3302      	adds	r3, #2
 8005632:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i=0;i<32;++i){
 8005634:	7bbb      	ldrb	r3, [r7, #14]
 8005636:	3301      	adds	r3, #1
 8005638:	73bb      	strb	r3, [r7, #14]
 800563a:	7bbb      	ldrb	r3, [r7, #14]
 800563c:	2b1f      	cmp	r3, #31
 800563e:	d9f0      	bls.n	8005622 <_ZN6HT16218clearAllEv+0x12>
	}
}
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <_ZN6HT162117ValuesConstructorEv>:

void HT1621::ValuesConstructor(){
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  this->HT1621_data.map2[0]= 0x5F;  //'0'
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	225f      	movs	r2, #95	@ 0x5f
 8005656:	731a      	strb	r2, [r3, #12]
  this->HT1621_data.map2[1]= 0x06;  //'1'
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2206      	movs	r2, #6
 800565c:	735a      	strb	r2, [r3, #13]
  this->HT1621_data.map2[2]= 0x6B;  //'2'
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	226b      	movs	r2, #107	@ 0x6b
 8005662:	739a      	strb	r2, [r3, #14]
  this->HT1621_data.map2[3]= 0x2F;  //'3'
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	222f      	movs	r2, #47	@ 0x2f
 8005668:	73da      	strb	r2, [r3, #15]
  this->HT1621_data.map2[4]= 0x36;  //'4'
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2236      	movs	r2, #54	@ 0x36
 800566e:	741a      	strb	r2, [r3, #16]
  this->HT1621_data.map2[5]= 0x3D;  //'5'
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	223d      	movs	r2, #61	@ 0x3d
 8005674:	745a      	strb	r2, [r3, #17]
  this->HT1621_data.map2[6]= 0x7D;  //'6'
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	227d      	movs	r2, #125	@ 0x7d
 800567a:	749a      	strb	r2, [r3, #18]
  this->HT1621_data.map2[7]= 0x27;  //'7'
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2227      	movs	r2, #39	@ 0x27
 8005680:	74da      	strb	r2, [r3, #19]
  this->HT1621_data.map2[8]= 0x7F;  //'8'
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	227f      	movs	r2, #127	@ 0x7f
 8005686:	751a      	strb	r2, [r3, #20]
  this->HT1621_data.map2[9]= 0x3F;  //'9'
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	223f      	movs	r2, #63	@ 0x3f
 800568c:	755a      	strb	r2, [r3, #21]


  this->HT1621_data.map1[0]= 0xAF;  //'0'
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	22af      	movs	r2, #175	@ 0xaf
 8005692:	709a      	strb	r2, [r3, #2]
  this->HT1621_data.map1[1]= 0x06;  //'1'
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2206      	movs	r2, #6
 8005698:	70da      	strb	r2, [r3, #3]
  this->HT1621_data.map1[2]= 0x6D;  //'2'
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	226d      	movs	r2, #109	@ 0x6d
 800569e:	711a      	strb	r2, [r3, #4]
  this->HT1621_data.map1[3]= 0x4F;  //'3'
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	224f      	movs	r2, #79	@ 0x4f
 80056a4:	715a      	strb	r2, [r3, #5]
  this->HT1621_data.map1[4]= 0xC6;  //'4'
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	22c6      	movs	r2, #198	@ 0xc6
 80056aa:	719a      	strb	r2, [r3, #6]
  this->HT1621_data.map1[5]= 0xCB;  //'5'
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	22cb      	movs	r2, #203	@ 0xcb
 80056b0:	71da      	strb	r2, [r3, #7]
  this->HT1621_data.map1[6]= 0xEB;  //'6'
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	22eb      	movs	r2, #235	@ 0xeb
 80056b6:	721a      	strb	r2, [r3, #8]
  this->HT1621_data.map1[7]= 0x4E;  //'7'
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	224e      	movs	r2, #78	@ 0x4e
 80056bc:	725a      	strb	r2, [r3, #9]
  this->HT1621_data.map1[8]= 0xEF;  //'8'
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	22ef      	movs	r2, #239	@ 0xef
 80056c2:	729a      	strb	r2, [r3, #10]
  this->HT1621_data.map1[9]= 0xCF;  //'9'
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	22cf      	movs	r2, #207	@ 0xcf
 80056c8:	72da      	strb	r2, [r3, #11]

  this->HT1621_data.map[0]= 0x20;  //'-'
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	701a      	strb	r2, [r3, #0]
  this->HT1621_data.map[1]= 0x00;  //' '
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	705a      	strb	r2, [r3, #1]

  this->HT1621_data.digit[0]=0x00;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	759a      	strb	r2, [r3, #22]
  this->HT1621_data.digit[1]=0x00;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	75da      	strb	r2, [r3, #23]
  this->HT1621_data.digit[2]=0x00;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	761a      	strb	r2, [r3, #24]
  this->HT1621_data.digit[3]=0x00;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	765a      	strb	r2, [r3, #25]
  this->HT1621_data.digit[4]=0x00;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	769a      	strb	r2, [r3, #26]
  this->HT1621_data.digit[5]=0x00;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	76da      	strb	r2, [r3, #27]
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr

08005704 <_ZN6HT16217ConvertEhhh>:
//convert -> blacking -> refresh.

void HT1621::Convert(uint8_t a,uint8_t line,uint8_t tmp){
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	4608      	mov	r0, r1
 800570e:	4611      	mov	r1, r2
 8005710:	461a      	mov	r2, r3
 8005712:	4603      	mov	r3, r0
 8005714:	70fb      	strb	r3, [r7, #3]
 8005716:	460b      	mov	r3, r1
 8005718:	70bb      	strb	r3, [r7, #2]
 800571a:	4613      	mov	r3, r2
 800571c:	707b      	strb	r3, [r7, #1]
		for (uint8_t i=0;i<5;++i) {
			this->HT1621_data.digit[i] =this->HT1621_data.map[10];
		}
		return;
	}
    for(Current_Digit = tmp;a>0; ++Current_Digit){
 800571e:	787b      	ldrb	r3, [r7, #1]
 8005720:	73fb      	strb	r3, [r7, #15]
 8005722:	e034      	b.n	800578e <_ZN6HT16217ConvertEhhh+0x8a>
      if (line==1) this->HT1621_data.digit[Current_Digit]=this->HT1621_data.map1[a%10];
 8005724:	78bb      	ldrb	r3, [r7, #2]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d114      	bne.n	8005754 <_ZN6HT16217ConvertEhhh+0x50>
 800572a:	78fa      	ldrb	r2, [r7, #3]
 800572c:	4b1b      	ldr	r3, [pc, #108]	@ (800579c <_ZN6HT16217ConvertEhhh+0x98>)
 800572e:	fba3 1302 	umull	r1, r3, r3, r2
 8005732:	08d9      	lsrs	r1, r3, #3
 8005734:	460b      	mov	r3, r1
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	b2db      	uxtb	r3, r3
 8005740:	4619      	mov	r1, r3
 8005742:	7bfb      	ldrb	r3, [r7, #15]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	440a      	add	r2, r1
 8005748:	7891      	ldrb	r1, [r2, #2]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	4413      	add	r3, r2
 800574e:	460a      	mov	r2, r1
 8005750:	759a      	strb	r2, [r3, #22]
 8005752:	e013      	b.n	800577c <_ZN6HT16217ConvertEhhh+0x78>
      else this->HT1621_data.digit[Current_Digit]=this->HT1621_data.map2[a%10];
 8005754:	78fa      	ldrb	r2, [r7, #3]
 8005756:	4b11      	ldr	r3, [pc, #68]	@ (800579c <_ZN6HT16217ConvertEhhh+0x98>)
 8005758:	fba3 1302 	umull	r1, r3, r3, r2
 800575c:	08d9      	lsrs	r1, r3, #3
 800575e:	460b      	mov	r3, r1
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	b2db      	uxtb	r3, r3
 800576a:	4619      	mov	r1, r3
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	440a      	add	r2, r1
 8005772:	7b11      	ldrb	r1, [r2, #12]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	4413      	add	r3, r2
 8005778:	460a      	mov	r2, r1
 800577a:	759a      	strb	r2, [r3, #22]
      a/=10;
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	4a07      	ldr	r2, [pc, #28]	@ (800579c <_ZN6HT16217ConvertEhhh+0x98>)
 8005780:	fba2 2303 	umull	r2, r3, r2, r3
 8005784:	08db      	lsrs	r3, r3, #3
 8005786:	70fb      	strb	r3, [r7, #3]
    for(Current_Digit = tmp;a>0; ++Current_Digit){
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	3301      	adds	r3, #1
 800578c:	73fb      	strb	r3, [r7, #15]
 800578e:	78fb      	ldrb	r3, [r7, #3]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1c7      	bne.n	8005724 <_ZN6HT16217ConvertEhhh+0x20>
    }
}
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	bc80      	pop	{r7}
 800579a:	4770      	bx	lr
 800579c:	cccccccd 	.word	0xcccccccd

080057a0 <_ZN6HT162117Write_Float_LinexEfh>:


void HT1621::Write_Float_Linex(float a,uint8_t line){
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	4613      	mov	r3, r2
 80057ac:	71fb      	strb	r3, [r7, #7]
	uint8_t h1[4]={0x08,0x06,0x04,0x02};
 80057ae:	4b5e      	ldr	r3, [pc, #376]	@ (8005928 <_ZN6HT162117Write_Float_LinexEfh+0x188>)
 80057b0:	617b      	str	r3, [r7, #20]
	uint8_t h2[4]={0x1A,0x18,0x16,0x14};
 80057b2:	4b5e      	ldr	r3, [pc, #376]	@ (800592c <_ZN6HT162117Write_Float_LinexEfh+0x18c>)
 80057b4:	613b      	str	r3, [r7, #16]
	for (uint8_t i=0;i<6;++i) this->HT1621_data.digit[i]=0x00;
 80057b6:	2300      	movs	r3, #0
 80057b8:	77fb      	strb	r3, [r7, #31]
 80057ba:	e007      	b.n	80057cc <_ZN6HT162117Write_Float_LinexEfh+0x2c>
 80057bc:	7ffb      	ldrb	r3, [r7, #31]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	2200      	movs	r2, #0
 80057c4:	759a      	strb	r2, [r3, #22]
 80057c6:	7ffb      	ldrb	r3, [r7, #31]
 80057c8:	3301      	adds	r3, #1
 80057ca:	77fb      	strb	r3, [r7, #31]
 80057cc:	7ffb      	ldrb	r3, [r7, #31]
 80057ce:	2b05      	cmp	r3, #5
 80057d0:	d9f4      	bls.n	80057bc <_ZN6HT162117Write_Float_LinexEfh+0x1c>
	if (line ==1 ) {
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d113      	bne.n	8005800 <_ZN6HT162117Write_Float_LinexEfh+0x60>
		for (uint8_t i=0;i<4;++i) wrBytes(h1[i],0x00);
 80057d8:	2300      	movs	r3, #0
 80057da:	77bb      	strb	r3, [r7, #30]
 80057dc:	e00c      	b.n	80057f8 <_ZN6HT162117Write_Float_LinexEfh+0x58>
 80057de:	7fbb      	ldrb	r3, [r7, #30]
 80057e0:	3320      	adds	r3, #32
 80057e2:	443b      	add	r3, r7
 80057e4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	4619      	mov	r1, r3
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f7ff fe77 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
 80057f2:	7fbb      	ldrb	r3, [r7, #30]
 80057f4:	3301      	adds	r3, #1
 80057f6:	77bb      	strb	r3, [r7, #30]
 80057f8:	7fbb      	ldrb	r3, [r7, #30]
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d9ef      	bls.n	80057de <_ZN6HT162117Write_Float_LinexEfh+0x3e>
 80057fe:	e012      	b.n	8005826 <_ZN6HT162117Write_Float_LinexEfh+0x86>
	}
	else {
		for (uint8_t i=0;i<4;++i) wrBytes(h2[i],0x00);
 8005800:	2300      	movs	r3, #0
 8005802:	777b      	strb	r3, [r7, #29]
 8005804:	e00c      	b.n	8005820 <_ZN6HT162117Write_Float_LinexEfh+0x80>
 8005806:	7f7b      	ldrb	r3, [r7, #29]
 8005808:	3320      	adds	r3, #32
 800580a:	443b      	add	r3, r7
 800580c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005810:	2200      	movs	r2, #0
 8005812:	4619      	mov	r1, r3
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff fe63 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
 800581a:	7f7b      	ldrb	r3, [r7, #29]
 800581c:	3301      	adds	r3, #1
 800581e:	777b      	strb	r3, [r7, #29]
 8005820:	7f7b      	ldrb	r3, [r7, #29]
 8005822:	2b03      	cmp	r3, #3
 8005824:	d9ef      	bls.n	8005806 <_ZN6HT162117Write_Float_LinexEfh+0x66>
	}

	uint8_t x=(a-(uint8_t)a)*10;
 8005826:	68b8      	ldr	r0, [r7, #8]
 8005828:	f7fa feee 	bl	8000608 <__aeabi_f2uiz>
 800582c:	4603      	mov	r3, r0
 800582e:	b2db      	uxtb	r3, r3
 8005830:	4618      	mov	r0, r3
 8005832:	f7fa fd45 	bl	80002c0 <__aeabi_i2f>
 8005836:	4603      	mov	r3, r0
 8005838:	4619      	mov	r1, r3
 800583a:	68b8      	ldr	r0, [r7, #8]
 800583c:	f7fa fc8a 	bl	8000154 <__aeabi_fsub>
 8005840:	4603      	mov	r3, r0
 8005842:	493b      	ldr	r1, [pc, #236]	@ (8005930 <_ZN6HT162117Write_Float_LinexEfh+0x190>)
 8005844:	4618      	mov	r0, r3
 8005846:	f7fa fd8f 	bl	8000368 <__aeabi_fmul>
 800584a:	4603      	mov	r3, r0
 800584c:	4618      	mov	r0, r3
 800584e:	f7fa fedb 	bl	8000608 <__aeabi_f2uiz>
 8005852:	4603      	mov	r3, r0
 8005854:	76fb      	strb	r3, [r7, #27]
	if (line==1){
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d106      	bne.n	800586a <_ZN6HT162117Write_Float_LinexEfh+0xca>
		this->HT1621_data.digit[0]=this->HT1621_data.map1[x];
 800585c:	7efb      	ldrb	r3, [r7, #27]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4413      	add	r3, r2
 8005862:	789a      	ldrb	r2, [r3, #2]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	759a      	strb	r2, [r3, #22]
 8005868:	e005      	b.n	8005876 <_ZN6HT162117Write_Float_LinexEfh+0xd6>
	}
	else {
		this->HT1621_data.digit[0]=this->HT1621_data.map2[x];
 800586a:	7efb      	ldrb	r3, [r7, #27]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	7b1a      	ldrb	r2, [r3, #12]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	759a      	strb	r2, [r3, #22]
	}
	Convert((uint8_t)a,line,1);
 8005876:	68b8      	ldr	r0, [r7, #8]
 8005878:	f7fa fec6 	bl	8000608 <__aeabi_f2uiz>
 800587c:	4603      	mov	r3, r0
 800587e:	b2d9      	uxtb	r1, r3
 8005880:	79fa      	ldrb	r2, [r7, #7]
 8005882:	2301      	movs	r3, #1
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff ff3d 	bl	8005704 <_ZN6HT16217ConvertEhhh>
	for(uint8_t i=0;this->HT1621_data.digit[i]!=0x00;++i){
 800588a:	2300      	movs	r3, #0
 800588c:	773b      	strb	r3, [r7, #28]
 800588e:	e03f      	b.n	8005910 <_ZN6HT162117Write_Float_LinexEfh+0x170>
		if (i==1) {
 8005890:	7f3b      	ldrb	r3, [r7, #28]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d11b      	bne.n	80058ce <_ZN6HT162117Write_Float_LinexEfh+0x12e>
			if (line==1){
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d10c      	bne.n	80058b6 <_ZN6HT162117Write_Float_LinexEfh+0x116>
				this->HT1621_data.digit[i] |= 0x10;
 800589c:	7f3b      	ldrb	r3, [r7, #28]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4413      	add	r3, r2
 80058a2:	7d9a      	ldrb	r2, [r3, #22]
 80058a4:	7f3b      	ldrb	r3, [r7, #28]
 80058a6:	f042 0210 	orr.w	r2, r2, #16
 80058aa:	b2d1      	uxtb	r1, r2
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	460a      	mov	r2, r1
 80058b2:	759a      	strb	r2, [r3, #22]
 80058b4:	e00b      	b.n	80058ce <_ZN6HT162117Write_Float_LinexEfh+0x12e>
			}
			else {
				this->HT1621_data.digit[i] |= 0x80;
 80058b6:	7f3b      	ldrb	r3, [r7, #28]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	7d9a      	ldrb	r2, [r3, #22]
 80058be:	7f3b      	ldrb	r3, [r7, #28]
 80058c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058c4:	b2d1      	uxtb	r1, r2
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4413      	add	r3, r2
 80058ca:	460a      	mov	r2, r1
 80058cc:	759a      	strb	r2, [r3, #22]
			}
		}
		if (line==1){
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d10d      	bne.n	80058f0 <_ZN6HT162117Write_Float_LinexEfh+0x150>
			wrBytes(h1[i],this->HT1621_data.digit[i]);
 80058d4:	7f3b      	ldrb	r3, [r7, #28]
 80058d6:	3320      	adds	r3, #32
 80058d8:	443b      	add	r3, r7
 80058da:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 80058de:	7f3b      	ldrb	r3, [r7, #28]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	7d9b      	ldrb	r3, [r3, #22]
 80058e6:	461a      	mov	r2, r3
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f7ff fdf9 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
 80058ee:	e00c      	b.n	800590a <_ZN6HT162117Write_Float_LinexEfh+0x16a>
		}
		else {
			wrBytes(h2[i],this->HT1621_data.digit[i]);
 80058f0:	7f3b      	ldrb	r3, [r7, #28]
 80058f2:	3320      	adds	r3, #32
 80058f4:	443b      	add	r3, r7
 80058f6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80058fa:	7f3b      	ldrb	r3, [r7, #28]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	7d9b      	ldrb	r3, [r3, #22]
 8005902:	461a      	mov	r2, r3
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7ff fdeb 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
	for(uint8_t i=0;this->HT1621_data.digit[i]!=0x00;++i){
 800590a:	7f3b      	ldrb	r3, [r7, #28]
 800590c:	3301      	adds	r3, #1
 800590e:	773b      	strb	r3, [r7, #28]
 8005910:	7f3b      	ldrb	r3, [r7, #28]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	7d9b      	ldrb	r3, [r3, #22]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1b9      	bne.n	8005890 <_ZN6HT162117Write_Float_LinexEfh+0xf0>
		}

	}
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	3720      	adds	r7, #32
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	02040608 	.word	0x02040608
 800592c:	1416181a 	.word	0x1416181a
 8005930:	41200000 	.word	0x41200000

08005934 <_ZN6HT16218Write_IdEh>:


void HT1621::Write_Id(uint8_t a){
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
	uint8_t h1[4]={0x08,0x06,0x04,0x02};
 8005940:	4b38      	ldr	r3, [pc, #224]	@ (8005a24 <_ZN6HT16218Write_IdEh+0xf0>)
 8005942:	613b      	str	r3, [r7, #16]
	uint8_t h2[4]={0x1A,0x18,0x16,0x14};
 8005944:	4b38      	ldr	r3, [pc, #224]	@ (8005a28 <_ZN6HT16218Write_IdEh+0xf4>)
 8005946:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0;i<6;++i) this->HT1621_data.digit[i]=0x00;
 8005948:	2300      	movs	r3, #0
 800594a:	75fb      	strb	r3, [r7, #23]
 800594c:	e007      	b.n	800595e <_ZN6HT16218Write_IdEh+0x2a>
 800594e:	7dfb      	ldrb	r3, [r7, #23]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	4413      	add	r3, r2
 8005954:	2200      	movs	r2, #0
 8005956:	759a      	strb	r2, [r3, #22]
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	3301      	adds	r3, #1
 800595c:	75fb      	strb	r3, [r7, #23]
 800595e:	7dfb      	ldrb	r3, [r7, #23]
 8005960:	2b05      	cmp	r3, #5
 8005962:	d9f4      	bls.n	800594e <_ZN6HT16218Write_IdEh+0x1a>
	for (uint8_t i=0;i<4;++i) wrBytes(h1[i],0x00);
 8005964:	2300      	movs	r3, #0
 8005966:	75bb      	strb	r3, [r7, #22]
 8005968:	e00c      	b.n	8005984 <_ZN6HT16218Write_IdEh+0x50>
 800596a:	7dbb      	ldrb	r3, [r7, #22]
 800596c:	3318      	adds	r3, #24
 800596e:	443b      	add	r3, r7
 8005970:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8005974:	2200      	movs	r2, #0
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff fdb1 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
 800597e:	7dbb      	ldrb	r3, [r7, #22]
 8005980:	3301      	adds	r3, #1
 8005982:	75bb      	strb	r3, [r7, #22]
 8005984:	7dbb      	ldrb	r3, [r7, #22]
 8005986:	2b03      	cmp	r3, #3
 8005988:	d9ef      	bls.n	800596a <_ZN6HT16218Write_IdEh+0x36>
	for (uint8_t i=0;i<4;++i) wrBytes(h2[i],0x00);
 800598a:	2300      	movs	r3, #0
 800598c:	757b      	strb	r3, [r7, #21]
 800598e:	e00c      	b.n	80059aa <_ZN6HT16218Write_IdEh+0x76>
 8005990:	7d7b      	ldrb	r3, [r7, #21]
 8005992:	3318      	adds	r3, #24
 8005994:	443b      	add	r3, r7
 8005996:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800599a:	2200      	movs	r2, #0
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7ff fd9e 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
 80059a4:	7d7b      	ldrb	r3, [r7, #21]
 80059a6:	3301      	adds	r3, #1
 80059a8:	757b      	strb	r3, [r7, #21]
 80059aa:	7d7b      	ldrb	r3, [r7, #21]
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d9ef      	bls.n	8005990 <_ZN6HT16218Write_IdEh+0x5c>
	/////phu

	wrBytes(16,0x0C);
 80059b0:	220c      	movs	r2, #12
 80059b2:	2110      	movs	r1, #16
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff fd93 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
	wrBytes(14,0x80);
 80059ba:	2280      	movs	r2, #128	@ 0x80
 80059bc:	210e      	movs	r1, #14
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff fd8e 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
	wrBytes(h1[3],0x06);
 80059c4:	7cfb      	ldrb	r3, [r7, #19]
 80059c6:	2206      	movs	r2, #6
 80059c8:	4619      	mov	r1, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7ff fd88 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
	wrBytes(h1[2],0x67);
 80059d0:	7cbb      	ldrb	r3, [r7, #18]
 80059d2:	2267      	movs	r2, #103	@ 0x67
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7ff fd82 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
	/////////////////////
	Convert((uint8_t)a,2,0);
 80059dc:	78f9      	ldrb	r1, [r7, #3]
 80059de:	2300      	movs	r3, #0
 80059e0:	2202      	movs	r2, #2
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff fe8e 	bl	8005704 <_ZN6HT16217ConvertEhhh>
	for(uint8_t i=0;this->HT1621_data.digit[i]!=0x00;++i){
 80059e8:	2300      	movs	r3, #0
 80059ea:	753b      	strb	r3, [r7, #20]
 80059ec:	e00f      	b.n	8005a0e <_ZN6HT16218Write_IdEh+0xda>
		wrBytes(h2[i],this->HT1621_data.digit[i]);
 80059ee:	7d3b      	ldrb	r3, [r7, #20]
 80059f0:	3318      	adds	r3, #24
 80059f2:	443b      	add	r3, r7
 80059f4:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 80059f8:	7d3b      	ldrb	r3, [r7, #20]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	4413      	add	r3, r2
 80059fe:	7d9b      	ldrb	r3, [r3, #22]
 8005a00:	461a      	mov	r2, r3
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7ff fd6c 	bl	80054e0 <_ZN6HT16217wrBytesEhh>
	for(uint8_t i=0;this->HT1621_data.digit[i]!=0x00;++i){
 8005a08:	7d3b      	ldrb	r3, [r7, #20]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	753b      	strb	r3, [r7, #20]
 8005a0e:	7d3b      	ldrb	r3, [r7, #20]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	4413      	add	r3, r2
 8005a14:	7d9b      	ldrb	r3, [r3, #22]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e9      	bne.n	80059ee <_ZN6HT16218Write_IdEh+0xba>
	}
}
 8005a1a:	bf00      	nop
 8005a1c:	bf00      	nop
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	02040608 	.word	0x02040608
 8005a28:	1416181a 	.word	0x1416181a

08005a2c <memset>:
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	4402      	add	r2, r0
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d100      	bne.n	8005a36 <memset+0xa>
 8005a34:	4770      	bx	lr
 8005a36:	f803 1b01 	strb.w	r1, [r3], #1
 8005a3a:	e7f9      	b.n	8005a30 <memset+0x4>

08005a3c <__libc_init_array>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	2600      	movs	r6, #0
 8005a40:	4d0c      	ldr	r5, [pc, #48]	@ (8005a74 <__libc_init_array+0x38>)
 8005a42:	4c0d      	ldr	r4, [pc, #52]	@ (8005a78 <__libc_init_array+0x3c>)
 8005a44:	1b64      	subs	r4, r4, r5
 8005a46:	10a4      	asrs	r4, r4, #2
 8005a48:	42a6      	cmp	r6, r4
 8005a4a:	d109      	bne.n	8005a60 <__libc_init_array+0x24>
 8005a4c:	f000 f81a 	bl	8005a84 <_init>
 8005a50:	2600      	movs	r6, #0
 8005a52:	4d0a      	ldr	r5, [pc, #40]	@ (8005a7c <__libc_init_array+0x40>)
 8005a54:	4c0a      	ldr	r4, [pc, #40]	@ (8005a80 <__libc_init_array+0x44>)
 8005a56:	1b64      	subs	r4, r4, r5
 8005a58:	10a4      	asrs	r4, r4, #2
 8005a5a:	42a6      	cmp	r6, r4
 8005a5c:	d105      	bne.n	8005a6a <__libc_init_array+0x2e>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a64:	4798      	blx	r3
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7ee      	b.n	8005a48 <__libc_init_array+0xc>
 8005a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6e:	4798      	blx	r3
 8005a70:	3601      	adds	r6, #1
 8005a72:	e7f2      	b.n	8005a5a <__libc_init_array+0x1e>
 8005a74:	08005b8c 	.word	0x08005b8c
 8005a78:	08005b8c 	.word	0x08005b8c
 8005a7c:	08005b8c 	.word	0x08005b8c
 8005a80:	08005b94 	.word	0x08005b94

08005a84 <_init>:
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	bf00      	nop
 8005a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8a:	bc08      	pop	{r3}
 8005a8c:	469e      	mov	lr, r3
 8005a8e:	4770      	bx	lr

08005a90 <_fini>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	bf00      	nop
 8005a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a96:	bc08      	pop	{r3}
 8005a98:	469e      	mov	lr, r3
 8005a9a:	4770      	bx	lr
